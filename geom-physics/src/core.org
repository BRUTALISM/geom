#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_3_gh:
 - [[#namespace-thinggeomphysicscore][Namespace: thi.ng.geom.physics.core]]
     - [[#protocols][Protocols]]
     - [[#type-implementations][Type implementations]]
     - [[#behaviors][Behaviors]]
     - [[#constraints][Constraints]]
     - [[#constructors][Constructors]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Namespace: thi.ng.geom.physics.core

** Protocols

#+BEGIN_SRC clojure :noweb-ref protos
  (defprotocol PTimeStep
    (timestep [_ delta]))

  (defprotocol PBehavioral
    (add-behavior [_ id b])
    (remove-behavior [_ id])
    (clear-behaviors [_])
    (apply-behaviors [_ delta]))

  (defprotocol PConstrained
    (add-constraint [_ id c])
    (remove-constraint [_ id])
    (clear-constraints [_])
    (apply-constraints [_ delta]))

  (defprotocol PParticle
    (add-force [_ f])
    (add-velocity [_ v])
    (apply-force [_ delta])
    (clear-force [_])
    (clear-velocity [_])
    (scale-velocity [_ s])
    (position [_])
    (set-position [_ p])
    (velocity [_])
    (lock [_])
    (unlock [_])
    (locked? [_]))

  (defprotocol PPhysics
    (update-particles [_])
    (update-springs [_]))
#+END_SRC

** Type implementations

#+BEGIN_SRC clojure :noweb-ref impl
  (defn apply-to-particle
    [p delta fns]
    (when-not (locked? p)
      (loop [f (seq fns)] (when f ((first f) p delta) (recur (next f))))))

  (defn apply-to-particles
    [src delta fns]
    (loop [coll (seq src)]
      (when coll
        (apply-to-particle (first coll) delta fns)
        (recur (next coll)))))

  (deftype VerletParticle
      ,#+clj
    [^:unsynchronized-mutable pos
     ^:unsynchronized-mutable prev
     ^:unsynchronized-mutable force
     ^:unsynchronized-mutable locked?
     ^:unsynchronized-mutable behaviors
     ^:unsynchronized-mutable constraints
     ^double weight
     ^double inv-weight]
    ,#+cljs
    [^:mutable pos
     ^:mutable prev
     ^:mutable force
     ^:mutable locked?
     ^:mutable behaviors
     ^:mutable constraints
     weight
     inv-weight]
    PBehavioral
    (add-behavior
      [_ id b] (set! behaviors (assoc behaviors id b)) _)
    (apply-behaviors
      [_ delta] (when (seq behaviors) (apply-to-particle _ delta (vals behaviors))) _)
    (remove-behavior
      [_ id] (set! behaviors (dissoc behaviors id)) _)
    (clear-behaviors
      [_] (set! behaviors {}) _)
    PConstrained
    (add-constraint
      [_ id c] (set! constraints (assoc constraints id c)) _)
    (apply-constraints
      [_ delta] (when (seq constraints) (apply-to-particle _ delta (vals constraints))) _)
    (remove-constraint
      [_ id] (set! constraints (dissoc constraints id)) _)
    (clear-constraints
      [_] (set! constraints {}) _)
    PParticle
    (lock
      [_] (set! locked? true) _)
    (unlock
      [_] (set! locked? false) _)
    (locked?
      [_] locked?)
    (position
      [_] pos)
    (set-position
      [_ p] (set! pos p) _)
    (velocity
      [_] (g/- pos prev))
    (add-force
      [_ f] (set! force (g/+ force f)) _)
    (clear-force
      [_] (set! force (g/clear* force)))
    (apply-force
      [_ delta]
      (let [pos' (g/madd force (* inv-weight (* delta delta)) (g/msub pos 2.0 prev))]
        (set! prev pos)
        (set! pos pos')
        (set! force (g/clear* force)))
      _)
    (scale-velocity
      [_ s] (set! prev (g/mix prev pos s)) _)
    PTimeStep
    (timestep
      [_ delta]
      (if-not locked?
        (-> (apply-behaviors _ delta)
            (apply-force delta)
            (apply-constraints delta))
        _))
    Object
    (toString
      [_]
      (pr-str
       {:pos pos
        :prev prev
        :force force
        :locked? locked?
        :weight weight
        :behaviors behaviors
        :constraints constraints})))

  (defrecord VerletSpring
      [^VerletParticle a
       ^VerletParticle b
       ^double rlen
       ^double strength
       a-locked? b-locked?]
    PTimeStep
    (timestep
      [_ delta]
      (let [aw   (.-inv-weight a)
            bw   (.-inv-weight b)
            pa   (position a)
            pb   (position b)
            diff (g/- pb pa)
            dist (+ (g/mag diff) 1e-6)
            nd   (* (/ (- dist rlen) (* dist (+ aw bw))) (* strength delta))]
        (when-not (or a-locked? (locked? a))
          (set-position a (g/madd diff (* nd aw) pa)))
        (when-not (or  b-locked? (locked? b))
          (set-position b (g/madd diff (* (- nd) bw) pb))))))

  (defrecord VerletPhysics
      [particles springs behaviors constraints drag]
    PBehavioral
    (add-behavior
      [_ id b] (assoc-in _ [:behaviors id] (b delta)))
    (apply-behaviors
      [_ delta] (apply-to-particles particles delta (vals behaviors)) _)
    (remove-behavior
      [_ id] (update-in _ [:behaviors] dissoc id))
    (clear-behaviors
      [_] (assoc _ behaviors {}))
    PConstrained
    (add-constraint
      [_ id c] (assoc-in _ [:constraints id] (c delta)))
    (apply-constraints
      [_ delta] (apply-to-particles particles delta (vals constraints)) _)
    (remove-constraint
      [_ id] (update-in _ [:constraints] dissoc id))
    (clear-constraints
      [_] (assoc _ constraints {}))
    PPhysics
    (update-particles
      [_ delta]
      (let [drag' (* delta drag)]
        (loop [ps (seq particles)]
          (when ps
            (-> ps first (scale-velocity drag') (timestep delta))
            (recur (next ps)))))
      _)
    (update-springs
      [_ delta] (loop [s (seq springs)] (when s (timestep (first s) delta) (recur (next s)))) _)
    PTimeStep
    (timestep
      [_ iter]
      (let [delta (/ 1.0 iter)]
        (loop [i iter]
          (when (pos? i)
            (-> (apply-behaviors _ delta)
                (update-springs delta)
                (update-particles delta)
                (apply-constraints delta))
            (recur (dec i)))))
      _))
#+END_SRC

** Behaviors

#+BEGIN_SRC clojure :noweb-ref behaviors
  (defn gravity
    [force]
    (fn [p delta]
      (add-force p (g/* force delta))))

  (defn attract
    [pos r strength]
    (let [r2 (* r r)]
      (fn [p delta]
        (let [d (g/- pos (position p))
              l (g/mag-squared d)]
          (if (and (> l 0.0) (< l r2))
            (add-force p (g/* d (/ (* (- 1.0 (/ l r2)) (* strength delta))
                                   (Math/sqrt l)))))))))

  (defn attract-particle
    [p r strength]
    (let [r2 (* r r)]
      (fn [q delta]
        (if-not (= p q)
          (let [d (g/- (position p) (position q))
                l (g/mag-squared d)]
            (if (and (> l 0.0) (< l r2))
              (add-force q (g/* d (/ (* (- 1.0 (/ l r2)) (* strength delta))
                                     (Math/sqrt l))))))))))
#+END_SRC

** Constraints

#+BEGIN_SRC clojure :noweb-ref constraints
  (defn shape-constraint*
    [pred shape]
    (fn [p delta]
      (let [pos (position p)]
        (if (pred pos) (set-position p (g/closest-point shape pos))))))

  (defn shape-constraint-inside
    [shape] (shape-constraint* #(not (g/contains-point? shape %)) shape))

  (defn shape-constraint-outside
    [shape] (shape-constraint* #(g/contains-point? shape %) shape))

  (defn shape-constraint-boundary
    [shape] (shape-constraint* (constantly true) shape))
#+END_SRC

** Constructors

#+BEGIN_SRC clojure :noweb-ref ctors
  (defn physics
    [{:keys [particles springs behaviors constraints drag]
      :or   {particles #{}, springs #{}, behaviors {}, constraints {}, drag 0.0}}]
    (map->VerletPhysics
     {:particles   (set particles)
      :springs     (set springs)
      :behaviors   behaviors
      :constraints constraints
      :drag        drag}))

  (defn particle
    [pos & [weight lock?]]
    (let [w (double (or weight 1.0))]
      (VerletParticle. pos pos (g/clear* pos) lock? nil nil w (/ 1.0 w))))

  (defn spring
    [a b rlen strength & [locka? lockb?]]
    (VerletSpring. a b (double rlen) (double strength) locka? lockb?))
#+END_SRC

** Complete namespace definition                                   :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/physics/core.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.physics.core
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]
     [thi.ng.common.data.core :as d]
     ,#+clj [thi.ng.macromath.core :as mm]))

  <<protos>>

  <<impl>>

  <<ctors>>

  <<behaviors>>

  <<constraints>>
#+END_SRC

#+BEGIN_SRC clojure
  (require '[thi.ng.geom.physics.core :as ph] :reload)
  (def a (ph/particle (v/vec2) 1 true))
  (def b (ph/particle (v/vec2 1 0) 1))
  (def s (ph/map->VerletSpring {:a a :b b :rlen 10.0 :strength 0.1}))
  (def p (ph/physics {:particles [a b] :springs [s] :drag 0.0
                      :behaviors {:g (ph/gravity (v/vec2 0 -0.5))
                                  :a (ph/attract (v/vec2 10 0) 10 -2)}}))
  (dotimes [i 100] (ph/timestep p 2) (let [pa (ph/position a) pb (ph/position b)] (prn i pb (g/dist pa pb))))

#+END_SRC
