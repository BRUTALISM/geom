#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeomwebglcamera][thi.ng.geom.webgl.camera]]
     - [[#perspective-camera][Perspective camera]]
     - [[#helpers][Helpers]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* thi.ng.geom.webgl.camera

** Perspective camera

| *Key*     | *Type*        |    *Default* | *Description*                           |
|-----------+---------------+--------------+-----------------------------------------|
| =:eye=    | vec3          |          nil | Camera position                         |
| =:target= | vec3          |     (vec3 0) | Camera target (center of view)          |
| =:up=     | vec3          | (vec3 0 1 0) | Camera up axis                          |
| =:fov=    | float         |           45 | Vertical FOV in degrees                 |
| =:aspect= | float or rect |         16:9 | Camera aspect ratio (or view rectangle) |
| =:near=   | float         |          0.1 | Camera near clipping distance           |
| =:far=    | float         |          100 | Camera far clipping distance            |

#+BEGIN_SRC clojure :noweb-ref cam
  (defn set-view
    [cam opts]
    (let [cam (update-keys cam [:eye :target :up] opts)]
      (assoc cam :view (mat/look-at (:eye cam) (:target cam) (:up cam)))))

  (defn set-projection
    [cam opts]
    (let [cam (update-keys cam  [:fov :aspect :near :far] opts)]
      (assoc cam :proj (gl/perspective (:fov cam) (:aspect cam) (:near cam) (:far cam)))))

  (defn perspective-camera
    [opts]
    (-> (merge
         {:eye    (vec3 0.0 0.0 2.0)
          :target v/V3
          :up     v/V3Y
          :fov    45
          :near   0.1
          :far    100
          :aspect (/ 16.0 9.0)}
         opts)
        (set-view opts)
        (set-projection opts)))
#+END_SRC

** Helpers
#+BEGIN_SRC clojure :noweb-ref helpers
  (defn apply
    "Takes a webgl model spec map & camera, injects :view & :proj
    uniforms into spec."
    [spec cam]
    (update spec :uniforms merge {:view (:view cam) :proj (:proj cam)}))

  (defn update-keys
    "Takes a map m, key seq and map of new vals, replaces keys in m with
    new vals. If a value in opts map is a function, applies fn to value
    of key in original map."
    [m ks opts]
    (reduce-kv
     (fn [acc k v] (assoc acc k (if (fn? v) (v (m k)) v)))
     m (select-keys opts ks)))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/camera.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.camera
    (:refer-clojure :exclude [apply])
    (:require
     [thi.ng.math.core :as m]
     [thi.ng.geom.core.vector :as v :refer [vec3]]
     [thi.ng.geom.core.matrix :as mat]
     [thi.ng.geom.webgl.core :as gl]))

  <<helpers>>

  <<cam>>
#+END_SRC
