#+SETUPFILE: ../../src/setup.org
#+TITLE: thi.ng/geom-webgl

* About the project

** Overview

This is a sub-module of [[file:../../src/index.org][thi.ng/geom]]. It provides a number of
conversion & rendering functions for using the types defined in the
=geom-types= module under CLJS with WebGL. As such this module is
purely intended for CLJS and therefore does *not* make use of CLJX
cross-platform source code.

** Status

ALPHA quality, in active development.

** Building & testing this project

Please see the [[file:../../src/index.org][parent project]] for further information.

** Injected properties                                             :noexport:

This template uses shared project configuration defined in [[../../src/config.org][config.org]].
Module specific settings are defined below:

#+BEGIN_SRC clojure :exports none :noweb-ref project-name
thi.ng/geom-webgl
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/geom-webgl-<<conf-version()>>.js
#+END_SRC

*** Dependencies

**** [[http://thi.ng/shaderlib][thi.ng/shaderlib]]

#+BEGIN_SRC clojure :exports none :noweb-ref dep-shaderlib
[thi.ng/shaderlib "0.1.0-SNAPSHOT"]
#+END_SRC

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*      | *Tagged Github URL*                       |
|-----------+------------+--------------------+-------------------------+-------------------------------------------|
|     0.2.0 | 2014-03-10 | 1st public release | =[thi.ng/geom "0.2.0"]= | https://github.com/thi-ng/geom/tree/0.2.0 |

** Contributors

| *Name*          | *Role*                          | *Website*           |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://postspectacular.com][postspectacular.com]] |
|                 |                                 | [[http://thi.ng][thi.ng]]              |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [<<project-name>> "<<conf-version()>>"]
#+END_SRC

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version()>>"
    :description  "thi.ng geometry kit - WebGL module"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url  "<<conf-project-url>>"}

    :min-lein-version "2.4.0"

    :dependencies [<<dep-clj>>
                   [thi.ng/geom-core "<<conf-version()>>"]
                   [thi.ng/geom-types "<<conf-version()>>"]
                   [thi.ng/geom-meshops "<<conf-version()>>"]
                   <<dep-color>>
                   <<dep-shaderlib>>]

    :profiles {:dev {:dependencies [<<dep-cljs>>
                                    <<dep-criterium>>]
                     :plugins      [<<dep-cljsbuild>>
                                    <<dep-cljs-test>>]
                     :aliases {"cleantest" ["do" "clean," "cljsbuild" "test"]}}}

    :cljsbuild {:builds [{:source-paths ["src" "test"]
                          :id "simple"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :whitespace
                                     :pretty-print true}}
                         {:source-paths ["src" "test"]
                          :id "prod"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :advanced
                                     :pretty-print false}}]
                :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
      <style type="text/css" media="screen">
        .stats { position: fixed; top: 0px; left: 0px; }
      </style>
    </head>
    <body>
      <canvas id="main" width="1280" height="720"></canvas>
      <script type="text/javascript" src="resources/stats.js"></script>
      <script type="text/javascript" src="resources/webgl-texture-float-extension-shims.js"></script>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.geom.webgl.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.geom.webgl.version)
  
  (prn version)
  ; "<<conf-version()>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/version.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.version)
  (def version "<<conf-version()>>")
#+END_SRC

* Namespaces

- [[./core.org][thi.ng.geom.webgl.core]]
- [[./animator.org][thi.ng.geom.webgl.animator]]
- [[./arrays.org][thi.ng.geom.webgl.arrays]]
- [[./buffers.org][thi.ng.geom.webgl.buffers]]
- [[./shaders.org][thi.ng.geom.webgl.shaders]]
- [[./utils.org][thi.ng.geom.webgl.utils]]
- [[./demo.org][examples]]

* Tests

