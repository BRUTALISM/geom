#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_3_gh:
 - [[#thinggeomwebglshaders][thi.ng.geom.webgl.shaders]]
     - [[#shader-uniforms][Shader uniforms]]
         - [[#supported-types][Supported types]]
         - [[#uniform-setup--handling][Uniform setup & handling]]
     - [[#shader-attributes][Shader attributes]]
     - [[#shader-creation][Shader creation]]
         - [[#header-injection][Header injection]]
         - [[#creation-compilation--linking][Creation, compilation & linking]]
     - [[#shader-pipeline][Shader pipeline]]
     - [[#shading-state-preparation][Shading state preparation]]
     - [[#complete-namespace-definition][Complete namespace definition]]
     - [[#presets][Presets]]
         - [[#basic][Basic]]
         - [[#lambert][Lambert]]
         - [[#phong][Phong]]
         - [[#x-ray][X-Ray]]
         - [[#spotlight][Spotlight]]
         - [[#shadow][Shadow]]
         - [[#2d-overlay][2D Overlay]]

* thi.ng.geom.webgl.shaders

** Shader uniforms

*** Supported types

#+BEGIN_SRC clojure :noweb-ref uniforms
  (def uniform-types
    {:float       ["1fv" arrays/float32]
     :int         ["1iv" arrays/int32]
     :vec2        ["2fv" arrays/float32]
     :vec3        ["3fv" arrays/float32]
     :vec4        ["4fv" arrays/float32]
     :ivec2       ["2iv" arrays/int32]
     :ivec3       ["3iv" arrays/int32]
     :ivec4       ["4iv" arrays/int32]
     :bool        ["1iv" arrays/int32]
     :bvec2       ["2iv" arrays/int32]
     :bvec3       ["3iv" arrays/int32]
     :bvec4       ["4iv" arrays/int32]
     :mat2        ["Matrix2fv" arrays/float32]
     :mat3        ["Matrix3fv" arrays/float32]
     :mat4        ["Matrix4fv" arrays/float32]
     :sampler2D   ["1iv" arrays/int32]
     :samplerCube ["1iv" arrays/int32]})

#+END_SRC

*** Uniform setup & handling

#+BEGIN_SRC clojure :noweb-ref uniforms
  (defn init-shader-uniforms
    [^WebGLRenderingContext gl prog uniforms]
    (reduce
     (fn [umap [id type]]
       (let [loc (.getUniformLocation gl prog (name id))
             [type transpose?] (if (sequential? type) type [type])
             transpose? (boolean transpose?)
             [u-type u-cast] (uniform-types type)
             setter (aget gl (str "uniform" u-type))]
         (assoc umap id
                {:type type
                 :setter (if (#{:mat2 :mat3 :mat4} type)
                           (fn [x] (.call setter gl loc transpose?
                                          (if (arrays/typed-array? x)
                                            x (u-cast x))))
                           (fn [x] (.call setter gl loc
                                          (if (arrays/typed-array? x)
                                            x (u-cast (if (not (sequential? x)) [x] x))))))
                 :loc loc})))
     {} uniforms))

  (defn set-uniform
    [shader id val]
    (if-let [u-spec (get-in shader [:uniforms id])]
      ((:setter u-spec) val)
      (err/illegal-arg! (str "Unknown shader uniform: " id))))
#+END_SRC

** Shader attributes

#+BEGIN_SRC clojure :noweb-ref attribs
  (defn init-shader-attribs
    [^WebGLRenderingContext gl prog attribs]
    (reduce
     (fn [amap id]
       (assoc amap id (.getAttribLocation gl prog (name id))))
     {} attribs))

  (defn set-attribute
    [^WebGLRenderingContext gl shader id {:keys [buffer stride size type normalized? offset]}]
    (if-let [loc (get-in shader [:attribs id])]
      (doto gl
        (.bindBuffer gl/array-buffer buffer)
        (.enableVertexAttribArray loc)
        (.vertexAttribPointer
         loc
         size
         (or type gl/float)
         (boolean normalized?)
         (or stride 0)
         (or offset 0)))
      (err/illegal-arg! (str "Unknown shader attribute: " id))))

  (defn disable-attribute
    [^WebGLRenderingContext gl shader id]
    (if-let [loc (get-in shader [:attribs id])]
      (do (.disableVertexAttribArray gl loc) gl)
      (err/illegal-arg! (str "Unknown shader attribute: " id))))
#+END_SRC

** Shader creation

*** Header injection

These boilerplate =#define='s are prefixed by default to any given
shader source before compilation with =compile-shader= below.

#+BEGIN_SRC c :noweb-ref header
  #ifdef GL_FRAGMENT_PRECISION_HIGH
  precision highp int;
  precision highp float;
  #else
  precision mediump int;
  precision mediump float;
  #endif
  #define PI      3.141592653589793
  #define TWO_PI  6.283185307179586
  #define HALF_PI 1.570796326794896
  #define RAD     0.008726646259972
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref ctors :noweb yes
  (def header-prefix "
    <<header>>
    ")
#+END_SRC

*** Creation, compilation & linking

#+BEGIN_SRC clojure :noweb-ref ctors
  (defn compile-glsl-vars
    [qualifier coll]
    (->> coll
         (map
          (fn [[id type]] (str qualifier " " (name type) " " (name id) ";\n")))
         (apply str)))

  (defn parse-and-throw-error
    [^WebGLRenderingContext gl shader src]
    (let [src-lines (vec (str/split-lines src))
          errors (->> shader
                      (.getShaderInfoLog gl)
                      (str/split-lines)
                      (map
                       (fn [line]
                         (let [[_ ln msg] (re-find #"ERROR: \d+:(\d+): (.*)" line)]
                           (when ln
                             (str "line " ln ": " msg "\n"
                                  (src-lines (dec (js/parseInt ln 10))))))))
                      (filter identity)
                      (str/join "\n"))]
      (.deleteShader gl shader)
      (err/throw! (str "Error compiling shader:\n" errors))))

  (defn compile-shader
    [^WebGLRenderingContext gl src type]
    (if-let [shader (.createShader gl type)]
      (do
        (.shaderSource gl shader src)
        (.compileShader gl shader)
        (if (.getShaderParameter gl shader gl/compile-status)
          shader
          (parse-and-throw-error gl shader src)))
      (err/throw! "Can't create shader")))

  (defn make-shader-from-spec
    [^WebGLRenderingContext gl {:keys [vs fs uniforms attribs varying prefix state]}]
    (let [u-src (compile-glsl-vars "uniform" uniforms)
          a-src (compile-glsl-vars "attribute" attribs)
          v-src (compile-glsl-vars "varying" varying)
          prefix (str (or prefix header-prefix) u-src v-src)
          vs (compile-shader gl (str prefix a-src vs) gl/vertex-shader)
          fs (compile-shader gl (str prefix fs) gl/fragment-shader)
          prog (.createProgram gl)]
      (doto gl
        (.attachShader prog vs)
        (.attachShader prog fs)
        (.linkProgram prog))
      (if (.getProgramParameter gl prog gl/link-status)
        (let [uniforms (init-shader-uniforms gl prog uniforms)
              attribs (init-shader-attribs gl prog (keys attribs))]
          (doto gl
            (.deleteShader vs)
            (.deleteShader fs))
          {:program  prog
           :uniforms uniforms
           :attribs  attribs
           :varying  varying
           :state    state})
        (err/throw! (str "Shader failed to link:" (.getProgramInfoLog gl prog))))))

  (defn make-shader-from-dom
    [^WebGLRenderingContext gl {:keys [vs fs] :as spec}]
    (make-shader-from-spec
     gl (assoc spec
          :vs (glu/get-script-text vs)
          :fs (glu/get-script-text fs))))
#+END_SRC

** Shader pipeline

#+BEGIN_SRC clojure :noweb-ref pipeline

#+END_SRC

** Shading state preparation

Shader specs can specify WebGL render state flags which can then be
automatically setup using the =prepare-render-state= function below.
Currently the following options are supported:

| *Key*         | *Values*                               | *Description*                  |
|---------------+----------------------------------------+--------------------------------|
| =:depth-test= | boolean                                | enabled if true, else disabled |
| =:blend=      | boolean                                | enabled if true, else disabled |
| =:blend-fn=   | 2-elem vector =[src-coeff dest-coeff]= | only used if =:blend true=     |
|               | [[https://www.khronos.org/opengles/sdk/docs/man/xhtml/glBlendFunc.xml][reference]]                              |                                |

#+BEGIN_SRC clojure :noweb-ref state
  (defn prepare-render-state
    "Takes a Gl context and shader spec, sets GL render flags stored
    under :state key."
    [gl {:keys [state]}]
    (if (:depth-test state)
      (gl/enable gl gl/depth-test)
      (gl/disable gl gl/depth-test))
    (if (:blend state)
      (let [[src dest] (or (:blend-fn state) [gl/src-alpha gl/one])]
        (doto gl
          (gl/enable gl/blend)
          (.blendFunc src dest)))
      (gl/disable gl gl/blend))
    gl)
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders.cljs :noweb yes :mkdirp yes :padline no
(ns thi.ng.geom.webgl.shaders
  (:require
    [thi.ng.geom.webgl.core :as gl]
    [thi.ng.geom.webgl.arrays :as arrays]
    [thi.ng.geom.webgl.utils :as glu]
    [thi.ng.common.error :as err]
    [clojure.string :as str]))

  <<uniforms>>

  <<attribs>>

  <<ctors>>

  <<state>>

  <<pipeline>>
#+END_SRC

** Presets
*** Basic

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/basic.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.basic)

  (defn make-color-shader-spec
    [& [{attr? :use-attrib is3d? :3d :or {is3d? true}}]]
    (let [spec {:vs (str "void main() { "
                         (if attr?
                           "vCol = color; " "")
                         "gl_Position = proj * "
                         (if is3d?
                           "view * model * vec4(position, 1.0)"
                           "model * vec4(position, 0.0, 1.0)")
                         "; }")
                :fs (str "void main() { gl_FragColor = "
                         (if attr? "vCol" "color")
                         "; }")
                :uniforms {:proj  :mat4
                           :model :mat4}
                :attribs  {:position (if is3d? :vec3 :vec2)}}
          spec (if attr?
                 (-> spec
                     (assoc-in [:attribs :color] :vec4)
                     (assoc :varying {:vCol :vec4}))
                 (assoc-in spec [:uniforms :color] :vec4))
          spec (if is3d?
                 (assoc-in spec [:uniforms :view] :mat4)
                 spec)]
      spec))
#+END_SRC

*** Lambert

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/lambert.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.lambert)

  (def shader-spec
    {:vs "void main() {
    vec3 tNormal = normalize((normalMat * vec4(normal, 0.0)).xyz);

    float lambert = min(max(dot(tNormal, lightDir), 0.0), 1.0);
    vCol = vec4(ambientCol + diffuseCol * lightCol * lambert, alpha);
    gl_Position = proj * view * model * vec4(position, 1.0);
  }"
     :fs "void main() { gl_FragColor = vCol; }"
     :uniforms {:model      :mat4
                :view       :mat4
                :normalMat  :mat4
                :proj       :mat4
                :ambientCol :vec3
                :diffuseCol :vec3
                :lightCol   :vec3
                :lightDir   :vec3
                :alpha      :float}
     :attribs  {:position   :vec3
                :normal     :vec3}
     :varying  {:vCol       :vec4}
     :state    {:depth-test true}})
#+END_SRC

*** Phong

#+BEGIN_SRC c :noweb-ref phong-vs
  void main(){
      vec4 worldPos = model * vec4(position, 1.0);
      vec4 eyePos = view * worldPos;
      vEyePos = eyePos.xyz;
      vNormal = (normalMat * vec4(normal, 0.0)).xyz;
      vLightPos = (view * vec4(lightPos, 1.0)).xyz;
      vCol = normal * 0.5 + 0.5;
      gl_Position = proj * eyePos;
  }
#+END_SRC

#+BEGIN_SRC c :noweb-ref phong-fs
  vec3 ambientColor = vec3(0.1, 0.1, 0.1);
  vec3 specularColor = vec3(1.0, 1.0, 1.0);
  vec3 diffuseColor = vCol;

  float phong(vec3 L, vec3 E, vec3 N) {
    vec3 R = reflect(-L, N);
    return dot(R, E);
  }

  float blinnPhong(vec3 L, vec3 E, vec3 N) {
    vec3 halfVec = normalize(L + E);
    return dot(halfVec, N);
  }

  void main() {
    vec3 L = normalize(vLightPos - vEyePos);
    vec3 E = normalize(-vEyePos);
    vec3 N = normalize(vNormal);

    float NdotL = max(0.0, (dot(N, L) + wrap) / (1.0 + wrap));
    vec3 color = ambientColor + NdotL * diffuseColor;

    float specular = 0.0;
    if (useBlinnPhong)
      specular = blinnPhong(L, E, N);
    else
      specular = phong(L, E, N);

    color += max(pow(specular, shininess), 0.0) * specularColor;

    gl_FragColor = vec4(color, 1.0);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/phong.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.phong
    (:require
      [thi.ng.geom.core :as g]
      [thi.ng.geom.webgl.core :as gl]
      [thi.ng.geom.webgl.buffers :as buf]))

  (def shader-spec
    {:vs "
    <<phong-vs>>"
     :fs "
    <<phong-fs>>"
     :uniforms {:view          :mat4
                :proj          :mat4
                :model         :mat4
                :normalMat     :mat4
                :shininess     :float
                :lightPos      :vec3
                :useBlinnPhong :bool
                :wrap          :float}
     :attribs {:position       :vec3
               :normal         :vec3}
     :varying {:vNormal        :vec3
               :vEyePos        :vec3
               :vLightPos      :vec3
               :vCol           :vec3}
     :state    {:depth-test true}})

  (defn draw-phong
    [^WebGLRenderingContext gl spec]
    (buf/draw-arrays
     gl (update-in
         spec [:uniforms]
         #(assoc % :normalMat (-> (:model %) (g/invert) (g/transpose))))))
#+END_SRC

*** X-Ray

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/xray.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.xray
    (:require
     [thi.ng.geom.webgl.core :as gl]))

  (def shader-spec
    {:vs "void main() {
    vec4 worldPos = view * model * vec4(position, 1.0);
    vNormal = (normalMat * vec4(normal, 0.0)).xyz;
    vIncident = worldPos.xyz;
    gl_Position = proj * worldPos;
  }"
     :fs "void main() {
    float opac = abs(dot(normalize(-vNormal), normalize(-vIncident)));
    opac = 1.0-pow(opac, alpha);
    gl_FragColor = vec4(lightCol * opac, opac);
  }"
     :uniforms {:model      :mat4
                :view       :mat4
                :normalMat  :mat4
                :proj       :mat4
                :lightCol   :vec3
                :alpha      :float}
     :attribs  {:position   :vec3
                :normal     :vec3}
     :varying  {:vIncident  :vec3
                :vNormal    :vec3}
     :state    {:depth-test false
                :blend true
                :blend-func [gl/src-alpha gl/one]}})
#+END_SRC

*** Spotlight

#+BEGIN_SRC c :noweb-ref spot-vs
  void main(){
    vNormal = normal;
    vWorldPos = model * vec4(position, 1.0);
    gl_Position = proj * view * vWorldPos;
  }
#+END_SRC

#+BEGIN_SRC c :noweb-ref spot-fs
  float attenuation(vec3 dir){
    float dist = length(dir);
    float radiance = 1.0/(1.0+pow(dist/10.0, 2.0));
    return clamp(radiance*10.0, 0.0, 1.0);
  }

  float influence(vec3 normal, float coneAngle){
    float minConeAngle = (360.0-coneAngle-10.0) * RAD;
    float maxConeAngle = (360.0-coneAngle) * RAD;
    return smoothstep(minConeAngle, maxConeAngle, acos(normal.z));
  }

  float lambert(vec3 surfaceNormal, vec3 lightDirNormal){
    return max(0.0, dot(surfaceNormal, lightDirNormal));
  }

  vec3 skyLight(vec3 normal){
    return vec3(smoothstep(0.0, PI, PI-acos(normal.y)))*0.4;
  }

  vec3 gamma(vec3 color){
    return pow(color, vec3(2.2));
  }

  void main(){
    vec3 worldNormal = normalize(vNormal);

    vec3 camPos = (view * vWorldPos).xyz;
    vec3 lightPos = (lightView * vWorldPos).xyz;
    vec3 lightPosNormal = normalize(lightPos);
    vec3 lightSurfaceNormal = lightRot * worldNormal;

    vec3 excident = (
                     skyLight(worldNormal) +
                     lambert(lightSurfaceNormal, -lightPosNormal) *
                     influence(lightPosNormal, coneAngle) *
                     attenuation(lightPos)
                     );
    gl_FragColor = vec4(gamma(excident), 1.0);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/spotlight.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.spotlight)

  (def shader-spec
    {:vs "
  <<spot-vs>>"
     :fs "
  <<spot-fs>>"
     :uniforms {:view :mat4
                :proj :mat4
                :model :mat4
                :lightView :mat4
                :lightRot :mat3
                :coneAngle :float}
     :attribs {:position :vec3
               :normal :vec3}
     :varying {:vNormal :vec3
               :vWorldPos :vec4}})
#+END_SRC

*** Shadow

#+BEGIN_SRC c :noweb-ref shadow-vs-pass1
  void main() {
    vWorldPos = model * vec4(position, 1.0);
    gl_Position = proj * view * vWorldPos;
  }
#+END_SRC

#+BEGIN_SRC c :noweb-ref shadow-fs-pass1
  void main() {
    vec3 lightPos = (view * vWorldPos).xyz;
    float depth = clamp(length(lightPos)/10.0, 0.0, 1.0);
    gl_FragColor = vec4(vec3(depth), 1.0);
  }
#+END_SRC

#+BEGIN_SRC c :noweb-ref shadow-hard
  // shadow calculation
  float lightDepth1 = texture2D(lightDepthTex, lightUV).r;                                                     
  float lightDepth2 = clamp(length(lightPos)/40.0, 0.0, 1.0);
  float bias = 0.001;
  float illuminated = step(lightDepth2, lightDepth1+bias);
#+END_SRC

#+BEGIN_SRC c :noweb-ref shadow-lerp1
  float texture2DCompare(sampler2D depths, vec2 uv, float compare) {
    float depth = texture2D(depths, uv).r;
    return step(compare, depth);
  }

  float texture2DShadowLerp(sampler2D depths, vec2 size, vec2 uv, float compare) {
    vec2 texelSize = vec2(1.0)/size;
    vec2 f = fract(uv * size + 0.5);
    vec2 centroidUV = floor(uv * size + 0.5) / size;

    float lb = texture2DCompare(depths, centroidUV + texelSize * vec2(0.0, 0.0), compare);
    float lt = texture2DCompare(depths, centroidUV + texelSize * vec2(0.0, 1.0), compare);
    float rb = texture2DCompare(depths, centroidUV + texelSize * vec2(1.0, 0.0), compare);
    float rt = texture2DCompare(depths, centroidUV + texelSize * vec2(1.0, 1.0), compare);
    return mix(mix(lb, lt, f.y), mix(rb, rt, f.y), f.x);
  }
#+END_SRC

#+BEGIN_SRC c :noweb-ref shadow-lerp2
  // shadow calculation
  float bias = 1e-4;
  float lightDepth2 = clamp(length(lightPos)/10.0, 0.0, 1.0)-bias;
  float illuminated = texture2DShadowLerp(lightDepthTex, lightDepthSize, lightUV, lightDepth2);
#+END_SRC

#+BEGIN_SRC c :noweb-ref shadow-fs-pass2 :noweb yes
  float attenuation(vec3 dir) {
    float dist = length(dir);
    float radiance = 1.0/(1.0+pow(dist/10.0, 2.0));
    return clamp(radiance*10.0, 0.0, 1.0);
  }

  float influence(vec3 normal, float coneAngle) {
    float minConeAngle = (360.0-coneAngle-10.0) * RAD;
    float maxConeAngle = (360.0-coneAngle) * RAD;
    return smoothstep(minConeAngle, maxConeAngle, acos(normal.z));
  }

  float lambert(vec3 surfaceNormal, vec3 lightDirNormal) {
    return max(0.0, dot(surfaceNormal, lightDirNormal));
  }

  vec3 skyLight(vec3 normal) {
    return vec3(smoothstep(0.0, PI, PI-acos(normal.y)))*0.4;
  }

  vec3 gamma(vec3 color) {
    return pow(color, vec3(2.2));
  }

  <<shadow-lerp1>>

  void main() {
    vec3 worldNormal = normalize(vNormal);

    vec3 camPos = (view * vWorldPos).xyz;
    vec3 lightPos = (lightView * vWorldPos).xyz;
    vec3 lightPosNormal = normalize(lightPos);
    vec3 lightSurfaceNormal = lightRot * worldNormal;

    vec4 lightDevice = lightProj * vec4(lightPos, 1.0);
    vec2 lightDeviceNormal = lightDevice.xy/lightDevice.w;
    vec2 lightUV = lightDeviceNormal*0.5+0.5;

    <<shadow-lerp2>>

    vec3 excident = (
                     0.4 + skyLight(worldNormal) +
                     lambert(lightSurfaceNormal, -lightPosNormal) *
                     influence(lightPosNormal, coneAngle) *
                     attenuation(lightPos) *
                     illuminated
                     );

    excident *=  worldNormal * 0.5 + 0.5; // TODO remove, debug only

    gl_FragColor = vec4(gamma(excident), 1.0);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/shadow.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.shadow
    (:require
     [thi.ng.geom.webgl.core :as gl]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]))
  
  (def light-pass-spec
    {:vs "
    <<shadow-vs-pass1>>"
     :fs "
    <<shadow-fs-pass1>>"
     :uniforms {:view :mat4
                :proj :mat4
                :model :mat4}
     :attribs {:position :vec3}
     :varying {:vWorldPos :vec4}})
  
  (def cam-pass-spec
    {:vs "
    <<spot-vs>>"
     :fs "
    <<shadow-fs-pass2>>"
     :uniforms {:view :mat4
                :proj :mat4
                :model :mat4
                :lightView :mat4
                :lightProj :mat4
                :lightRot :mat3
                :lightDepthTex :sampler2D
                :lightDepthSize :vec2
                :coneAngle :float}
     :attribs  {:position :vec3
                :normal :vec3}
     :varying  {:vNormal :vec3
                :vWorldPos :vec4}})
  
  (defn init-light-fbo
    [^WebGLRenderingContext gl size]
    (let [float-ext (.call (aget gl "getFloatExtension") gl
                           (clj->js {:require ["renderable"]
                                     :prefer ["filterable" "half"]}))
          tex (buf/make-texture2d
               gl {:type   (.-type float-ext)
                   :width  size
                   :height size
                   :filter gl/linear
                   :wrap   gl/clamp-to-edge})]
      {:tex tex
       :fbo (-> (buf/make-fbo gl)
                (gl/bind)
                (gl/set-fbo-color-texture tex)
                (gl/set-fbo-depth-buffer (buf/make-depth-buffer gl size size))
                (gl/unbind))}))
  
  (defn draw-light-pass
    [^WebGLRenderingContext gl {:keys [fbo tex]} draw]
    (gl/bind fbo)
    (doto gl
      (gl/set-viewport 0 0 (:width tex) (:height tex))
      (gl/clear-color-buffer 1 1 1 1)
      (gl/clear-depth-buffer 1)
      (gl/enable gl/depth-test)
      (gl/cull-faces gl/front))
    (draw)
    (gl/unbind fbo))
  
  (defn draw-cam-pass
    [^WebGLRenderingContext gl tex draw]
    (doto gl
      (gl/clear-depth-buffer 1)
      (gl/enable gl/depth-test)
      (gl/cull-faces gl/back))
    (gl/bind tex 0)
    (draw {:lightDepthTex 0
           :lightDepthSize [(:width tex) (:height tex)]}))
#+END_SRC

*** 2D Overlay

#+BEGIN_SRC c :noweb-ref overlay-vs
  void main() {
    vUV = uv;
    gl_Position = proj * model * vec4(position, 0.0, 1.0);
  }
#+END_SRC

#+BEGIN_SRC c :noweb-ref overlay-fs
  void main() {
    gl_FragColor = texture2D(tex, vUV);
  }
#+END_SRC

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/webgl/shaders/overlay.cljs :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.webgl.shaders.overlay
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.matrix :refer [M44]]
     [thi.ng.geom.rect :as r]
     [thi.ng.geom.webgl.core :as gl]
     [thi.ng.geom.webgl.buffers :as buf]
     [thi.ng.geom.webgl.shaders :as sh]
     [thi.ng.geom.webgl.arrays :as arrays]
     [thi.ng.common.math.core :as m]))
  
  (def shader-spec
    {:vs "
    <<overlay-vs>>"
     :fs "
    <<overlay-fs>>"
     :uniforms {:proj     :mat4
                :model    :mat4
                :tex      :sampler2D}
     :attribs  {:position :vec2
                :uv       :vec2}
     :varying  {:vUV      :vec2}})
  
  (defn overlay-spec-from-rect
    ([^WebGLRenderingContext gl]
       (overlay-spec-from-rect gl (r/rect 1) true))
    ([^WebGLRenderingContext gl r init-shader?]
       (let [vbuf (arrays/float32 8)
             [a b c d] (g/vertices r)
             _ (gl/into-buffer [a b d c] vbuf 0 2)
             spec {:attribs  (buf/make-attribute-buffers
                              gl gl/static-draw
                              {:position {:data vbuf :size 2}
                               :uv       {:data (arrays/float32 [0 0, 1 0, 0 1, 1 1]) :size 2}})
                   :uniforms {:tex 0
                              :proj (gl/ortho)}
                   :mode     gl/triangle-strip
                   :num-vertices 4}]
         (if init-shader?
           (assoc spec :shader (sh/make-shader-from-spec gl shader-spec))
           spec))))
  
  (defn draw-overlay2d
    [^WebGLRenderingContext gl {:keys [tex viewport pos width height] :as spec}]
    (let [[vw vh] (:size (or viewport (gl/get-viewport-rect gl)))
          x (m/map-interval (pos 0) 0 vw -1 1)
          y (m/map-interval (pos 1) 0 vh -1 1)
          s [(* 2.0 (/ width vw)) (* 2.0 (/ height vh))]
          spec (assoc-in spec [:uniforms :model] (-> M44 (g/translate x y 0) (g/scale s)))]
      (when tex
        (gl/bind tex (get-in spec [:uniforms :tex])))
      (buf/draw-arrays gl spec)))
#+END_SRC
