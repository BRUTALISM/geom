#+SEQ_TODO:       TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:           write(w) update(u) fix(f) verify(v) noexport(n) template(t)
#+EXPORT_EXCLUDE_TAGS: noexport

* thi.ng.geom.triangle
** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.triangle
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    (:require
     ,#+clj [thi.ng.macromath.core :as mm]
     [thi.ng.common.data.core :as d]
     [thi.ng.common.math.core :as m :refer [PI HALF_PI THIRD SQRT3 *eps*]]
     [thi.ng.common.error :as err]
     [thi.ng.geom.core :as g :refer [vec2 vec3]]
     [thi.ng.geom.types :as types])
    ,#+clj
    (:import
     [thi.ng.geom.types Circle Line2 Line3 Rect Polygon Triangle2 Triangle3]))
#+END_SRC
** Constructors
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  (defn triangle2
    ([t]
       (cond
        (map? t)        (thi.ng.geom.types.Triangle2.
                         (vec2 (:a t)) (vec2 (:b t)) (vec2 (:c t)))
        (sequential? t) (thi.ng.geom.types.Triangle2.
                         (vec2 (nth t 0)) (vec2 (nth t 1)) (vec2 (nth t 2)))
        :default (err/illegal-arg! t)))
    ([a b c] (thi.ng.geom.types.Triangle2. (vec2 a) (vec2 b) (vec2 c))))
  
  (defn triangle3
    ([t]
       (cond
        (map? t)        (thi.ng.geom.types.Triangle3.
                         (vec3 (:a t)) (vec3 (:b t)) (vec3 (:c t)))
        (sequential? t) (thi.ng.geom.types.Triangle3.
                         (vec3 (nth t 0)) (vec3 (nth t 1)) (vec3 (nth t 2)))
        :default (err/illegal-arg! t)))
    ([a b c] (thi.ng.geom.types.Triangle3. (vec3 a) (vec3 b) (vec3 c))))
  
  (defn equilateral2
    ([l]
       (cond
        (map? l) (equilateral2 (:p l) (:q l))
        (sequential? l) (equilateral2 (nth l 0) (nth l 1))
        :default (err/illegal-arg! l)))
    ([a b]
       (let [a (vec2 a) b (vec2 b)
             dir (g/- a b)
             n (g/normal dir)
             c (-> n (g/normalize (g/* (g/mag dir) (g/* SQRT3 0.5))) (g/+ (g/mix a b)))]
         (triangle2 a b c)))
    ([x1 y1 x2 y2]
       (equilateral2 [x1 y1] [x2 y2])))
#+END_SRC
** Shared 2d/3d functions
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  (defn norm-sign2
    [[ax ay] [bx by] [cx cy]]
    (- (mm/subm bx ax cy ay) (mm/subm cx ax by ay)))
  
  (defn norm-sign3
    ([a b c] (g/dot (g/cross (g/- b a) (g/- c a)) g/V3Z))
    ([a b c n] (g/dot (g/cross (g/- b a) (g/- c a)) n)))
  
  (defn area2
    ([a b c] (* 0.5 (norm-sign2 a b c)))
    ([[a b c]] (* 0.5 (norm-sign2 a b c))))
  
  (defn area3
    ([a b c] (* 0.5 (g/mag (g/cross (g/- b a) (g/- c a)))))
    ([[a b c]] (* 0.5 (g/mag (g/cross (g/- b a) (g/- c a))))))
  
  (defn clockwise2?
    [a b c] (neg? (norm-sign2 a b c)))
  
  (defn clockwise3?
    ([a b c] (neg? (norm-sign3 a b c g/V3Z)))
    ([a b c n] (neg? (norm-sign3 a b c n))))
  
  (defn barycentric*
    [a b c p]
    (let [e0 (g/- c a)
          e1 (g/- b a)
          e2 (g/- p a)
          d00 (g/mag-squared e0)
          d01 (g/dot e0 e1)
          d02 (g/dot e0 e2)
          d11 (g/mag-squared e1)
          d12 (g/dot e1 e2)
          denom (/ 1.0 (mm/msub d00 d11 d01 d01))
          u (* denom (mm/msub d11 d02 d01 d12))
          v (* denom (mm/msub d00 d12 d01 d02))]
      [(mm/add u v -1.0) v u]))
  
  (defn contains-point2*
    [[a b c] p]
    (if (clockwise2? a b c)
        (and (>= (norm-sign2 a c p) 0.0)
             (>= (norm-sign2 b a p) 0.0)
             (>= (norm-sign2 c b p) 0.0))
        (and (>= (norm-sign2 b c p) 0.0)
             (>= (norm-sign2 a b p) 0.0)
             (>= (norm-sign2 c a p) 0.0))))
  
  (defn contains-point3*
    [[a b c] p]
    (let [[u v w] (barycentric* a b c p)]
      (and (>= u 0.0) (>= v 0.0) (<= w 1.0))))
  
  (defn centroid*
    ([a b c] (g/* (g/+ a b c) THIRD))
    ([[a b c]] (g/* (g/+ a b c) THIRD)))
  
  (defn check-edge
    [splits classifier e p q add-p? add-q?]
    (let [pc (classifier e p) qc (classifier e q)
          splits (if add-p? (conj splits [p pc]) splits)]
      (if (neg? (* pc qc))
        (let [{ip :p ub :ub} (g/intersect-line e {:p p :q q})]
          (if add-q?
            (conj (conj splits [ip 0]) [q qc])
            (conj splits [ip 0])))
        (if add-q? (conj splits [q qc]) splits))))
  
  (defn slice-with*
    ([t e] (slice-with* t e g/classify-point))
    ([[a b c] e classifier] (slice-with* a b c e classifier))
    ([a b c e classifier]
       (let [verts (-> []
                       (check-edge classifier e a b true true)
                       (check-edge classifier e b c false true)
                       (check-edge classifier e c a false false))
             cmap (fn [ids]
                    (reduce
                     (fn [m [[a cl] b c]]
                       (update-in m [cl] conj [a (b 0) (c 0)]))
                     {-1 [] 1 []}
                     (map (fn [[a b c]] [(verts a) (verts b) (verts c)]) ids)))
             corner-index (fn []
                            (let [triverts #{a b c}]
                              (loop [i (dec (count verts))]
                                (when-let [[v c] (verts i)]
                                  (if (and (zero? c) (triverts v)) i (recur (dec i)))))))]
         (condp = (count verts)
           4 (let [d (corner-index)]
               (cmap [[(m/wrap-range (inc d) 4) (m/wrap-range (g/+ d 2) 4) d]
                      [(m/wrap-range (dec d) 4) d (m/wrap-range (g/+ d 2) 4)]]))
           5 (if (zero? (get-in verts [1 1]))
               (if (zero? (get-in verts [3 1]))
                 (cmap [[0 1 3] [0 3 4] [2 3 1]])
                 (cmap [[0 1 4] [2 4 1] [2 3 4]]))
               (cmap [[0 1 2] [0 2 4] [3 4 2]]))
           nil))))
#+END_SRC
** Reusable protocol templates for 2d/3d
*** PArea
#+NAME: tpl-area
#+BEGIN_SRC emacs-lisp :noweb yes :var fn="" :results output
  (princ
   (replace-regexp-in-string "{{fn}}" fn
  "g/PArea
  (area [_] ({{fn}} (:points _)))"))
#+END_SRC
*** PBounds
#+NAME: tpl-bounds
#+BEGIN_SRC emacs-lisp :noweb yes :var fn="" :results output
  (princ
   (replace-regexp-in-string "{{fn}}" fn
   "g/PBounds
  (bounds [_] ({{fn}} (:points _)))
  (width [_] (g/axis-range* 0 (:points _)))
  (height [_] (g/axis-range* 1 (:points _)))"))
#+END_SRC
*** PCenter
#+NAME: tpl-center
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
  "g/PCenter
  (center
   ([_] ({{type}}. (g/center* (:points _))))
   ([_ o] ({{type}}. (g/center* o (:points _)))))
  (centroid [_] (centroid* (:points _)))"))
#+END_SRC
*** PCircumference
#+NAME: tpl-circum
#+BEGIN_SRC emacs-lisp :noweb yes :results output
  (princ
   "g/PCircumference
  (circumference
   [{[a b c] :points}] (mm/add (g/dist a b) (g/dist b c) (g/dist c a)))")
#+END_SRC
*** PFlip
#+NAME: tpl-flip
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
   "g/PFlip
  (flip
   [_] ({{type}}. (reverse (:points _))))"))
#+END_SRC
*** PGraph
#+NAME: tpl-graph
#+BEGIN_SRC emacs-lisp :noweb yes :results output
  (princ
   "g/PGraph
  (vertices
   [_] (:points _))
  (edges
   [{[a b c] :points}] [[a b] [b c] [c a]])
  (vertex-neighbors
   [{[a b c] :points} v] (condp = v, a [c b], b [a c], c [b a], nil))
  (vertex-valence
   [_ v] (if ((set (:points _)) v) 2 0))")
#+END_SRC
*** PProximity
#+NAME: tpl-proxi
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
   "g/PProximity
  (closest-point
   [_ p]
   (g/closest-point* (mapv #({{type}}. %) (g/edges _)) p))"))
#+END_SRC
*** PSample
#+NAME: tpl-sample
#+BEGIN_SRC emacs-lisp :noweb yes :results output
  (princ
   "g/PSample
  (point-at
   [_ t] (g/point-at* t (:points _)))
  (random-point
   [_] (g/point-at* (m/random) (:points _)))
  (random-point-inside
   [_] (g/from-barycentric* (:points _) (m/normdist-weights 3)))
  (sample-uniform
   [{p :points} udist include-last?]
   (g/sample-uniform* udist include-last? (conj p (first p))))")
#+END_SRC
*** PSlice
#+NAME: tpl-slice
#+BEGIN_SRC emacs-lisp :noweb yes :results output
  (princ
   "g/PSlice
  (slice-with
   ([_ e]
      (slice-with* (:points _) e g/classify-point))
   ([_ e classifier]
      (slice-with* (:points _) e classifier)))")
#+END_SRC
*** PTransform
#+NAME: tpl-tx
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
  "g/PScale
  (scale
   ([_ s]
      ({{type}}. (mapv #(g/* % s) (:points _))))
   ([_ sx sy]
      ({{type}}. (mapv #(g/* % sx sy) (:points _))))
   ([_ sx sy sz]
      ({{type}}. (mapv #(g/* % sx sy sz) (:points _)))))
  (scale-size
   [_ s] ({{type}}. (g/scale-size* s (:points _))))
  g/PTranslate
  (translate
   [_ t] ({{type}}. (mapv #(g/+ % t) (:points _))))
  g/PTransform
  (transform
   [_ m] ({{type}}. (mapv #(g/transform-vector m %) (:points _))))"))
#+END_SRC

** Protocol implementations
*** Triangle2
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  (extend-type thi.ng.geom.types.Triangle2
#+END_SRC
**** PArea                                                         :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-area(fn="area2")>>
#+END_SRC
**** PClassify                                                       :verify:
***** TODO add clockwise? check, currently assumes clockwise ordering
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PClassify
  (classify-point
   [_ p] (->> (g/edges _)
              (map #(g/classify-point (thi.ng.geom.types.Line2. %) p))
              (reduce min)))
#+END_SRC
**** PBoundary                                                       :verify:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PBoundary
  (contains-point?
   [_ p] (contains-point2* (:points _) p))
#+END_SRC
**** PBounds                                                       :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-bounds(fn="g/bounding-rect*")>>
  (depth [_] 0)
#+END_SRC
**** PBoundingCircle
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PBoundingCircle
  (bounding-circle
   [_] (g/bounding-circle* (g/centroid _) (:points _)))
#+END_SRC
**** PCenter                                                       :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-center(type="thi.ng.geom.types.Triangle2")>>  
#+END_SRC
**** PCircumference                                                :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-circum()>>    
#+END_SRC
**** PFlip                                                         :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-flip(type="thi.ng.geom.types.Triangle2")>>
#+END_SRC
**** PGraph                                                        :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-graph()>>
#+END_SRC
**** PPolygonConvert
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PPolygonConvert
  (as-polygon
   [_] (thi.ng.geom.types.Polygon. (:points _) []))
#+END_SRC
**** PProximity                                                    :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-proxi(type="thi.ng.geom.types.Line2")>>  
#+END_SRC
**** PSample                                                :verify:template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-sample()>>  
#+END_SRC
**** PSlice                                                        :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-slice()>>
#+END_SRC
**** PTransform                                                    :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  g/PRotate
  (rotate
   [_ theta]
   (thi.ng.geom.types.Triangle2. (mapv #(g/rotate % theta) (:points _))))
  <<tpl-tx(type="thi.ng.geom.types.Triangle2")>>
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  )
#+END_SRC
*** Triangle3
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  (extend-type thi.ng.geom.types.Triangle3
#+END_SRC
**** PArea                                                         :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-area(fn="area3")>>
#+END_SRC
**** PBoundary
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PBoundary
  (contains-point? [_ p] (contains-point3* (:points _) p))
#+END_SRC
**** PBounds                                                       :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-area(fn="g/bounding-box*")>>
  (depth [_] (g/axis-range* 2 (:points _)))
#+END_SRC
**** PBoundingSphere
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PBoundingSphere
  (bounding-sphere
   [_] (g/bounding-sphere* (g/centroid _) (:points _)))
#+END_SRC
**** PCenter                                                       :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-center(type="thi.ng.geom.types.Triangle3")>>
#+END_SRC
**** TODO PClassify
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PClassify
  (classify-point [_ p] nil) ; TODO
#+END_SRC
**** PFlip                                                         :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-flip(type="thi.ng.geom.types.Triangle3")>>
#+END_SRC
**** PGraph                                                        :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-graph()>>
#+END_SRC
**** PIntersect
***** TODO update ray definition or protocol?
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PIntersect
  (intersect-ray
   [{[a b c :as points] :points} {p :p dir :dir}]
    (let [n (g/normal3* a b c)
          nd (g/dot n dir)]
      (if (neg? nd)
        (let [t (/ (- (g/dot n (g/- p a))) nd)]
          (if (>= t *eps*)
            (let [ip (g/madd dir t p)]
              (if (contains-point3* points ip)
                {:p ip :n n :dist t :dir (g/normalize (g/- ip p))})))))))
#+END_SRC
**** TODO PProximity
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PProximity
  (closest-point [_ p] nil) ; TODO
#+END_SRC
**** PSample                                                :verify:template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-sample()>>  
#+END_SRC
**** PSlice                                                        :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  <<tpl-slice()>>
#+END_SRC
**** PTransform                                                    :template:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx :noweb yes
  g/PRotate3D
  (rotate-x
   [_ theta]
   (thi.ng.geom.types.Triangle3. (mapv #(g/rotate-x % theta) (:points _))))
  (rotate-y
   [_ theta]
   (thi.ng.geom.types.Triangle3. (mapv #(g/rotate-y % theta) (:points _))))
  (rotate-z
   [_ theta]
   (thi.ng.geom.types.Triangle3. (mapv #(g/rotate-z % theta) (:points _))))
  (rotate-around-axis
   [_ axis theta]
   (thi.ng.geom.types.Triangle3.
    (mapv #(g/rotate-around-axis % axis theta) (:points _))))
  <<tpl-tx(type="thi.ng.geom.types.Triangle3")>>
#+END_SRC
**** PVolume
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  g/PVolume
  (volume [_] 0.0)
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  )
#+END_SRC
** Type specific functions
*** Circumcircle
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  (defn circumcircle-raw
    [[ax ay :as a] [bx by :as b] [cx cy :as c]]
    (let [eq-ab? (m/delta= ay by *eps*)
          eq-bc? (m/delta= by cy *eps*)]
      (when-not (and eq-ab? eq-bc?)
        (let [[ox oy :as o]
              (cond
                eq-ab? (let [m2 (- (/ (- cx bx) (- cy by)))
                             mx1 (* 0.5 (+ ax bx))
                             [mx2 my2] (g/mix b c)]
                         [mx1 (+ (* m2 (- mx1 mx2)) my2)])
                eq-bc? (let [m1 (- (/ (- bx ax) (- by ay)))
                             mx2 (* 0.5 (+ bx cx))
                             [mx1 my1] (g/mix a b)]
                         [mx2 (+ (* m1 (- mx2 mx1)) my1)])
                :default (let [m1 (- (/ (- bx ax) (- by ay)))
                               m2 (- (/ (- cx bx) (- cy by)))
                               [mx1 my1] (g/mix a b)
                               [mx2 my2] (g/mix b c)
                               xx (-> (* m1 mx1) (- (* m2 mx2))
                                      (+ my2) (- my1) (/ (- m1 m2)))]
                           [xx (+ (* m1 (- xx mx1)) my1)]))]
          [o (m/hypot (- bx ox) (- by oy))]))))
  
  (defn circumcircle
    ([t] (circumcircle (:a t) (:b t) (:c t)))
    ([a b c]
       (let [[o r] (circumcircle-raw a b c)]
         (thi.ng.geom.types.Circle. o r))))
#+END_SRC
*** Subdivision & slicing
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/triangle.cljx
  (defn subdivide*
    [ctor]
    (fn
      [{:keys [a b c] :as t}]
      (let [ab (g/mix a b)
            bc (g/mix b c)
            ca (g/mix c a)
            ct (centroid* t)]
        [(ctor a ab ca) (ctor bc ab b)
         (ctor c ca bc) (ctor ca ab bc)])))

  (def subdiv2 (subdivide* (fn [a b c] (thi.ng.geom.types.Triangle2. a b c))))
  (def subdiv3 (subdivide* (fn [a b c] (thi.ng.geom.types.Triangle3. a b c))))
#+END_SRC
