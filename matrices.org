#+SEQ_TODO:       TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:           Write(w) Update(u) Fix(f) Check(c) noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport

* Matrix implementations
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx :mkdirp yes
  #+cljs (ns thi.ng.geom.core
    (:refer-clojure :exclude [* - + min max])
    (:require
     [thi.ng.common.data.core :as d]
     [thi.ng.common.math.core :as m :refer [*eps* PI TWO_PI]]
     [thi.ng.geom.types :as types])
    (:require-macros [thi.ng.geom.macros.core :as mc]))
#+END_SRC
** 3x2 Matrix (Affine 2D transform)
*** Implementation
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx :mkdirp yes
  (defrecord Matrix32
      [^double m00 ^double m01 ^double m02
       ^double m10 ^double m11 ^double m12]
#+END_SRC
**** PMathOps
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PMathOps
  (*
   [_ m]
   (let [m ^Matrix32 m]
     (Matrix32.
      (mc/mat-item m00 (.-m00 m) m01 (.-m10 m))
      (mc/mat-item m00 (.-m01 m) m01 (.-m11 m))
      (clojure.core/+ m02 (mc/mat-item m00 (.-m02 m) m01 (.-m12 m)))
      (mc/mat-item m10 (.-m00 m) m11 (.-m10 m))
      (mc/mat-item m10 (.-m01 m) m11 (.-m11 m))
      (clojure.core/+ m12 (mc/mat-item m10 (.-m02 m) m11 (.-m12 m))))))
#+END_SRC
**** PMatrix
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PMatrix
  (set-scale
   [_ s]
   (let [[sx sy] (if (number? s) [s s] s)]
     (Matrix32. sx 0.0 0.0 0.0 sy 0.0)))
  (set-scale
   [_ sx sy]
   (Matrix32. sx 0.0 0.0 0.0 sy 0.0))
  (set-position
   [_ [x y]]
   (Matrix32. 1.0 0.0 x 0.0 1.0 y))
  (set-position
   [_ x y]
   (Matrix32. 1.0 0.0 x 0.0 1.0 y))
  (set-rotation
   [_ theta]
   (let [s (Math/sin theta) c (Math/cos theta)]
     (Matrix32. c (clojure.core/- s) 0.0 s c 0.0)))
  (set-shear
   [_ s]
   (let [[sx sy] (if (number? s) [s s] s)]
     (Matrix32. 1.0 sx 0.0 sy 1.0 0.0)))
  (set-shear
   [_ sx sy]
   (Matrix32. 1.0 sx 0.0 sy 1.0 0.0))
  (determinant
   [_]
   (clojure.core/- (clojure.core/* m00 m11) (clojure.core/* m01 m10)))
#+END_SRC
**** PInvert
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PInvert
  (invert
   [_]
   (let [d (determinant _)]
     (when-not (zero? d)
       (Matrix32.
        (/ m11 d) (clojure.core/- (/ m01 d)) (/ (clojure.core/- (clojure.core/* m01 m12) (clojure.core/* m11 m02)) d)
        (clojure.core/- (/ m10 d)) (/ m00 d) (/ (clojure.core/- (clojure.core/* m10 m02) (clojure.core/* m00 m12)) d)))))
#+END_SRC
**** PTransform
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PTransform
  (scale
   [_ s]
   (* _ (set-scale IDENTITY32 s)))
  (scale
   [_ sx sy]
   (* _ (set-scale IDENTITY32 sx sy)))
  (translate
   [_ t]
   (* _ (set-position IDENTITY32 t)))
  (translate
   [_ tx ty]
   (* _ (set-position IDENTITY32 tx ty)))
  (rotate
   [_ theta]
   (* _ (set-rotation IDENTITY32 theta)))
  (transform
   [_ matrix] (* _ matrix))
#+END_SRC
**** PVectorTransform
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PVectorTransform
  (transform-vector
    [_ v]
    (let [x (v 0) y (v 1)]
      (vec2 (clojure.core/+ (clojure.core/+ (clojure.core/* x m00) (clojure.core/* y m01)) m02)
            (clojure.core/+ (clojure.core/+ (clojure.core/* x m10) (clojure.core/* y m11)) m12))))
#+END_SRC
**** End of implementations
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  )
#+END_SRC
** 4x4 Matrix
*** TODO add unproject from [[file:/Users/toxi/dev/js/gl-matrix.orig/gl-matrix.js::385]]
*** Implementation
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  (defrecord Matrix44
      [^double m00 ^double m01 ^double m02 ^double m03
       ^double m10 ^double m11 ^double m12 ^double m13
       ^double m20 ^double m21 ^double m22 ^double m23
       ^double m30 ^double m31 ^double m32 ^double m33]
#+END_SRC
**** PMathOps
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PMathOps
  (*
   [_ m]
   (let [^Matrix44 m m]
     (with-meta
       (Matrix44.
        (mc/mat-item m00 (.-m00 m) m01 (.-m10 m) m02 (.-m20 m) m03 (.-m30 m))
        (mc/mat-item m00 (.-m01 m) m01 (.-m11 m) m02 (.-m21 m) m03 (.-m31 m))
        (mc/mat-item m00 (.-m02 m) m01 (.-m12 m) m02 (.-m22 m) m03 (.-m32 m))
        (mc/mat-item m00 (.-m03 m) m01 (.-m13 m) m02 (.-m23 m) m03 (.-m33 m))
  
        (mc/mat-item m10 (.-m00 m) m11 (.-m10 m) m12 (.-m20 m) m13 (.-m30 m))
        (mc/mat-item m10 (.-m01 m) m11 (.-m11 m) m12 (.-m21 m) m13 (.-m31 m))
        (mc/mat-item m10 (.-m02 m) m11 (.-m12 m) m12 (.-m22 m) m13 (.-m32 m))
        (mc/mat-item m10 (.-m03 m) m11 (.-m13 m) m12 (.-m23 m) m13 (.-m33 m))
  
        (mc/mat-item m20 (.-m00 m) m21 (.-m10 m) m22 (.-m20 m) m23 (.-m30 m))
        (mc/mat-item m20 (.-m01 m) m21 (.-m11 m) m22 (.-m21 m) m23 (.-m31 m))
        (mc/mat-item m20 (.-m02 m) m21 (.-m12 m) m22 (.-m22 m) m23 (.-m32 m))
        (mc/mat-item m20 (.-m03 m) m21 (.-m13 m) m22 (.-m23 m) m23 (.-m33 m))
  
        (mc/mat-item m30 (.-m00 m) m31 (.-m10 m) m32 (.-m20 m) m33 (.-m30 m))
        (mc/mat-item m30 (.-m01 m) m31 (.-m11 m) m32 (.-m21 m) m33 (.-m31 m))
        (mc/mat-item m30 (.-m02 m) m31 (.-m12 m) m32 (.-m22 m) m33 (.-m32 m))
        (mc/mat-item m30 (.-m03 m) m31 (.-m13 m) m32 (.-m23 m) m33 (.-m33 m)))
       (meta _))))
#+END_SRC
**** PMatrix
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PMatrix
  (set-position
   [_ [x y z]]
   (assoc _ :m03 x :m13 y :m23 z))
  
  (set-scale
   [_ s]
   (let [[x y z] (if (number? s) [s s s] s)]
     (assoc _ :m00 x :m11 y :m22 z)))
  
  (set-rotation
   [_ [rx ry rz]] ;; TODO
   _)
  
  (determinant
   [_]
   (reduce
    clojure.core/+
    [(mc/det-item m30 m21 m12 m03 m20 m31 m12 m03 m30 m11 m22 m03 m10 m31 m22 m03)
     (mc/det-item m20 m11 m32 m03 m10 m21 m32 m03 m30 m21 m02 m13 m20 m31 m02 m13)
     (mc/det-item m30 m01 m22 m13 m00 m31 m22 m13 m20 m01 m32 m13 m00 m21 m32 m13)
     (mc/det-item m30 m11 m02 m23 m10 m31 m02 m23 m30 m01 m12 m23 m00 m31 m12 m23)
     (mc/det-item m10 m01 m32 m23 m00 m11 m32 m23 m20 m11 m02 m33 m10 m21 m02 m33)
     (mc/det-item m20 m01 m12 m33 m00 m21 m12 m33 m10 m01 m22 m33 m00 m11 m22 m33)]))
#+END_SRC
**** PInvert
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PInvert
  (invert
   [_]
   (let [n00 (clojure.core/- (clojure.core/* m00 m11) (clojure.core/* m01 m10))
         n01 (clojure.core/- (clojure.core/* m00 m12) (clojure.core/* m02 m10))
         n02 (clojure.core/- (clojure.core/* m00 m13) (clojure.core/* m03 m10))
         n03 (clojure.core/- (clojure.core/* m01 m12) (clojure.core/* m02 m11))
         n04 (clojure.core/- (clojure.core/* m01 m13) (clojure.core/* m03 m11))
         n05 (clojure.core/- (clojure.core/* m02 m13) (clojure.core/* m03 m12))
         n06 (clojure.core/- (clojure.core/* m20 m31) (clojure.core/* m21 m30))
         n07 (clojure.core/- (clojure.core/* m20 m32) (clojure.core/* m22 m30))
         n08 (clojure.core/- (clojure.core/* m20 m33) (clojure.core/* m32 m30))
         n09 (clojure.core/- (clojure.core/* m21 m32) (clojure.core/* m22 m31))
         n10 (clojure.core/- (clojure.core/* m21 m33) (clojure.core/* m23 m31))
         n11 (clojure.core/- (clojure.core/* m22 m33) (clojure.core/* m23 m32))
         d (clojure.core/+ (clojure.core/- (clojure.core/+ (clojure.core/+ (clojure.core/- (clojure.core/* n00 n11) (clojure.core/* n01 n10)) (clojure.core/* n02 n09)) (clojure.core/* n03 n08)) (clojure.core/* n04 n07)) (clojure.core/* n05 n06))]
     (when-not (zero? d)
       (let [invd (/ 1.0 d)]
         (with-meta
           (Matrix44.
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m11 n11) (clojure.core/* m12 n10)) (clojure.core/* m13 n09)))      ;0
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m02 n10) (clojure.core/* m03 n09)) (clojure.core/* (clojure.core/- m01) n11))) ;1
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m31 n05) (clojure.core/* m32 n04)) (clojure.core/* m33 n03)))      ;2
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m22 n04) (clojure.core/* m23 n03)) (clojure.core/* (clojure.core/- m21) n05))) ;3
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m12 n08) (clojure.core/* m13 n07)) (clojure.core/* (clojure.core/- m10) n11))) ;4
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m00 n11) (clojure.core/* m02 n08)) (clojure.core/* m03 n07)))      ;5
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m32 n02) (clojure.core/* m33 n01)) (clojure.core/* (clojure.core/- m30) n05))) ;6
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m20 n05) (clojure.core/* m22 n02)) (clojure.core/* m23 n01)))      ;7
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m10 n10) (clojure.core/* m11 n08)) (clojure.core/* m13 n06)))      ;8
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m01 n08) (clojure.core/* m03 n06)) (clojure.core/* (clojure.core/- m00) n10))) ;9
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m30 n04) (clojure.core/* m31 n02)) (clojure.core/* m33 n00)))      ;10
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m21 n02) (clojure.core/* m23 n00)) (clojure.core/* (clojure.core/- m20) n04))) ;11
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m11 n07) (clojure.core/* m12 n06)) (clojure.core/* (clojure.core/- m10) n09))) ;12
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m00 n09) (clojure.core/* m01 n07)) (clojure.core/* m02 n06)))      ;13
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m31 n01) (clojure.core/* m32 n00)) (clojure.core/* (clojure.core/- m30) n03))) ;14
            (clojure.core/* invd (clojure.core/+ (clojure.core/- (clojure.core/* m20 n03) (clojure.core/* m21 n01)) (clojure.core/* m22 n00))))     ;15
           (meta _))))))
#+END_SRC
**** PTranspose
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PTranspose
  (transpose
   [_]
   (with-meta
     (Matrix44.
      m00 m10 m20 m30 m01 m11 m21 m31 m02 m12 m22 m32 m03 m13 m23 m33)
     (meta _)))
#+END_SRC
**** PTransform
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PTransform
  (scale
   [_ s]
   (* _ (set-scale IDENTITY44 s)))
  (translate
   [_ t]
   (* _ (set-position IDENTITY44 t)))
  (rotate-x
   [_ theta]
   (let [s (Math/sin theta) c (Math/cos theta)]
     (* _ (assoc IDENTITY44 :m11 c :m12 (clojure.core/- s) :m21 s :m22 c))))
  (rotate-y
   [_ theta]
   (let [s (Math/sin theta) c (Math/cos theta)]
     (* _ (assoc IDENTITY44 :m00 c :m02 s :m20 (clojure.core/- s) :m22 c))))
  (rotate-z
   [_ theta]
   (let [s (Math/sin theta) c (Math/cos theta)]
     (* _ (assoc IDENTITY44 :m00 c :m01 (clojure.core/- s) :m10 s :m11 c))))
  (rotate
   [_ theta] (rotate-z _ theta))
  (rotate-around-axis
   [_ [x y z] theta]
   (let [s (Math/sin theta) c (Math/cos theta)
         sx (clojure.core/* s x) sy (clojure.core/* s y) sz (clojure.core/* s z)
         t (clojure.core/- 1.0 c) tx (clojure.core/* t x) ty (clojure.core/* t y)]
     (* _
        (Matrix44.
         (clojure.core/+ (clojure.core/* tx x) c) (clojure.core/+ (clojure.core/* tx y) sz) (clojure.core/- (clojure.core/* tx z) sy) 0.0
         (clojure.core/- (clojure.core/* tx y) sz) (clojure.core/+ (clojure.core/* ty y) c) (clojure.core/+ (clojure.core/* ty z) sx) 0.0
         (clojure.core/+ (clojure.core/* tx z) sy) (clojure.core/- (clojure.core/* ty z) sx) (clojure.core/+ (clojure.core/* t z z) c) 0.0
         0.0 0.0 0.0 1.0))))
  (transform
   [_ matrix] (* _ matrix))
#+END_SRC
**** PVectorTransform
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  PVectorTransform
  (transform-vector
   [_ [x y z :as v]]
   (vec3 (mc/mat-item x m00 y m01 z m02 m03)
         (mc/mat-item x m10 y m11 z m12 m13)
         (mc/mat-item x m20 y m21 z m22 m23)))
#+END_SRC
**** End of implementation
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
    )
#+END_SRC
** Constants
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  (def ^:const IDENTITY32
    (Matrix32.
     1.0 0.0 0.0
     0.0 1.0 0.0))

  (def ^:const IDENTITY44
    (Matrix44.
     1.0 0.0 0.0 0.0
     0.0 1.0 0.0 0.0
     0.0 0.0 1.0 0.0
     0.0 0.0 0.0 1.0))
#+END_SRC
** Constructors
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/core/mat.cljx
  (defn matrix32
    ([] IDENTITY32)
    ([[m00 m01 m02 m10 m11 m12]]
       (Matrix32. m00 m01 m02 m10 m11 m12))
    ([m00 m01 m02 m10 m11 m12]
       (Matrix32. m00 m01 m02 m10 m11 m12)))

  (defn matrix44
    ([] IDENTITY44)
    ([[m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]]
       (Matrix44. m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33))
    ([m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33]
       (Matrix44. m00 m01 m02 m03 m10 m11 m12 m13 m20 m21 m22 m23 m30 m31 m32 m33)))
#+END_SRC

