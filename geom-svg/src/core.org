#+SETUPFILE: ../../src/setup.org

* Namespace: thi.ng.geom.svg.core

** Protocols

*** PSVGConvert
#+BEGIN_SRC clojure :noweb-ref protos
  (defprotocol PSVGConvert
    (as-svg [_ opts]))
#+END_SRC

** SVG serialization

#+BEGIN_SRC clojure :noweb-ref constants
  (def xml-preamble "<?xml version=\"1.0\"?>\n")
  
  (def ^:dynamic *ff* (f/float 2))
  (def ^:dynamic *fmt-vec* (fn [p] (str (*ff* (nth p 0)) "," (*ff* (nth p 1)))))
  
  (def point-seq-format
    (memoize
     (fn [n]
       (->> *fmt-vec*
            (repeat n)
            (interpose " ")))))
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref svg
  (defn svg
    [attrs & body]
    [:svg
     (merge
      {:xmlns "http://www.w3.org/2000/svg"
       :version "1.1"}
      attrs)
     body])

  ,#+clj
  (defn serialize
    [svg] (str xml-preamble (html {:mode :xml} svg)))

  ,#+clj
  (defn serialize-as-byte-array
    [svg] (.getBytes (serialize svg) "UTF-8"))
#+END_SRC

** Attribute map processing

#+BEGIN_SRC clojure
  (defn color-attrib
    [attribs id id2 f]
    (if-let [att (attribs id)]
      (if (string? att)
        attribs
        (-> attribs (dissoc id) (assoc id2 (apply f att))))
      attribs))

  (defn svg-attribs
    [attribs base]
    (if attribs
      (-> attribs
          (color-attrib :stroke :stroke col/rgba->css)
          (color-attrib :stroke-hsb :stroke col/hsba->css)
          (color-attrib :fill :fill col/rgba->css)
          (color-attrib :fill-hsb :fill col/hsba->css)
          (into base))
      base))
#+END_SRC

** SVG primitives

#+BEGIN_SRC clojure :noweb-ref prims
  (defn group
    [attribs & body]
    [:g (svg-attribs attribs nil) body])

  (defn text
    [[x y] txt & [attribs]]
    [:text
     (svg-attribs attribs {:x (*ff* x) :y (*ff* y)})
     txt])

  (defn circle
    [[x y] radius & [attribs]]
    [:circle
     (svg-attribs
      attribs
      {:cx (*ff* x) :cy (*ff* y)
       :r radius})])

  (defn rect
    [[x y] w h & [attribs]]
    [:rect
     (svg-attribs
      attribs
      {:x (*ff* x) :y (*ff* y)
       :width w :height h})])

  (defn line
    [[ax ay] [bx by] & [attribs]]
    [:line
     (svg-attribs
      attribs
      {:x1 (*ff* ax) :y1 (*ff* ay)
       :x2 (*ff* bx) :y2 (*ff* by)})])

  (defn line-strip
    [points & [attribs]]
    [:polyline
     (svg-attribs
      attribs
      {:fill "none"
       :points (apply f/format (point-seq-format (count points)) points)})])

  (defn polygon
    [points & [attribs]]
    [:polygon
     (svg-attribs
      attribs
      {:points (apply f/format (point-seq-format (count points)) points)})])
#+END_SRC

** SVG conversions for geom.types

#+BEGIN_SRC clojure :noweb-ref adapter
  (extend-protocol svg/PSVGConvert

    thi.ng.geom.types.Line2
    (as-svg [{p :points} opts] (svg/line (p 0) (p 1) opts))

    thi.ng.geom.types.Circle
    (as-svg [_ opts] (svg/circle (:p _) (:r _) opts))

    thi.ng.geom.types.LineStrip2
    (as-svg [_ opts] (svg/line-strip (:points _) opts))

    thi.ng.geom.types.Polygon2
    (as-svg [_ opts] (svg/polygon (:points _) opts))

    thi.ng.geom.types.Rect2
    (as-svg [{:keys [p size]} opts] (svg/rect p (size 0) (size 1) opts))

    )
#+END_SRC

** Complete namespace: svg.core                                    :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/svg/core.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.svg.core
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :refer [vec3 V3Z]]
     [thi.ng.geom.core.matrix :as mat :refer [M44]]
     [thi.ng.common.stringformat :as f]
     [thi.ng.common.color :as col]
     #+clj [hiccup.core :refer [html]]))

  <<constants>>

  <<protos>>

  <<svg>>

  <<prims>>
#+END_SRC

** Complete namespace: svg.adapter                                 :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/svg/adapter.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.svg.adapter
    (:require
     [thi.ng.geom.svg.core :as svg]
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :refer [vec3 V3Z]]
     [thi.ng.geom.core.matrix :as mat :refer [M44]]))

  <<adapter>>
#+END_SRC
