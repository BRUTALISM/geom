#+SETUPFILE: ../../src/setup.org

* Namespace: thi.ng.geom.svg.renderer

** Protocols

** 3D to 2D projection

#+BEGIN_SRC clojure :noweb-ref projection
  (defn project-face
    [mvp vtx points]
    (mapv #(mat/project-point-z % mvp vtx) points))

  (defn project-faces
    [mvp vtx faces]
    (map
     (fn [f]
       (let [f' (project-face mvp vtx f)
             n' (gu/ortho-normal f')]
         [f f' n']))
     faces))

  (defn cull-backfaces
    [norm-fn faces]
    (filter (fn [f] (neg? (g/dot (norm-fn f) V3Z))) faces))

  (defn z-map-faces
    [faces]
    (mapv
     (fn [[f f' n']] [(:z (gu/centroid f')) f f' n'])
     faces))

  (defn z-sort-faces
    [z-fn faces]
    (reverse (sort-by z-fn faces)))
#+END_SRC

** Render functions

#+BEGIN_SRC clojure :noweb-ref render
  (defn mesh
    [mesh mvp screen shader]
    (let [faces (project-faces mvp screen (g/faces mesh))
          faces (->> (if (solid? shader)
                       (cull-backfaces peek faces)
                       faces)
                     (z-map-faces)
                     (z-sort-faces first))]
      (group
       (uniforms shader)
       (if shader
         (map (fn [[z f f']] (polygon f' (shade-facet shader f f' z))) faces)
         (map (fn [f] (polygon (f 2) nil)) faces)))))
#+END_SRC

** Complete namespace definition                                   :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/svg/renderer.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.svg.renderer
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :refer [vec3 V3Z]]
     [thi.ng.geom.core.matrix :as mat :refer [M44]]))

  <<projection>>

  <<render>>
#+END_SRC
