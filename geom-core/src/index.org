#+SETUPFILE: ../../src/setup.org
#+TITLE: thi.ng/geom-core

* About the project

** Overview

This module defines all core protocols, vector & matrix types and
common lowlevel functions used throughout the entire library (and
the other library modules).

*** Geometric entities

| *2D*           | *3D*                      |
|----------------+---------------------------|
| Vec2           | Vec3                      |
| Matrix32       | Matrix44                  |
|                | Quaternion                |

** Status

ALPHA quality, in active development.

** Building & testing this project

Please see the [[file:../src/index.org][parent project]] for further information.

** Injected properties                                             :noexport:

This template uses shared project configuration defined in [[file:../../src/config.org][config.org]].
Module specific settings are defined below:

#+BEGIN_SRC clojure :noweb-ref project-name
thi.ng/geom-core
#+END_SRC

#+BEGIN_SRC clojure :noweb yes :noweb-ref cljs-artefact-path
target/geom-core-<<conf-version>>.js
#+END_SRC

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*      | *Tagged Github URL*                       |
|-----------+------------+--------------------+-------------------------+-------------------------------------------|
|     0.2.0 | 2014-03-10 | 1st public release | =[thi.ng/geom "0.2.0"]= | https://github.com/thi-ng/geom/tree/0.2.0 |

** Contributors

| *Name*          | *Role*                          | *Website*           |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://postspectacular.com][postspectacular.com]] |
|                 |                                 | [[http://thi.ng][thi.ng]]              |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [<<project-name>> "<<conf-version>>"]
#+END_SRC

** Leiningen project file

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version>>"
    :description "thi.ng geometry kit - core module"
    :url "<<conf-project-url>>"
    :license {:name "Apache Software License"
              :url "http://www.apache.org/licenses/LICENSE-2.0"}
    :dependencies [<<dep-clj>>
                   <<dep-common>>
                   <<dep-mmath>>]
  
    :source-paths ["src/cljx"]
    :test-paths ["<<conf-gen-test-path>>"]
  
    :profiles {:dev {:dependencies [<<dep-cljs>>
                                    <<dep-criterium>>]
                     :plugins [<<dep-cljx>>
                               <<dep-cljsbuild>>
                               <<dep-cljs-test>>
                               <<dep-austin>>]
                     :hooks [cljx.hooks]
                     :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}
  
    :cljx {:builds [{:source-paths ["src/cljx"]
                     :output-path "<<conf-gen-source-path>>"
                     :rules :clj}
                    {:source-paths ["src/cljx"]
                     :output-path "<<conf-gen-source-path>>"
                     :rules :cljs}
                    {:source-paths ["test/cljx"]
                     :output-path "<<conf-gen-test-path>>"
                     :rules :clj}
                    {:source-paths ["test/cljx"]
                     :output-path "<<conf-gen-test-path>>"
                     :rules :cljs}]}
  
    :cljsbuild {:builds [{:source-paths ["<<conf-gen-source-path>>" "<<conf-gen-test-path>>"]
                          :id "simple"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :whitespace
                                     :pretty-print true}}]
                :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.geom.core.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.geom.core.version)
  
  (prn version)
  ; "<<conf-version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/core/version.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.core.version)
  (def ^:const version "<<conf-version>>")
#+END_SRC

* Modules

*** Note for Github users

The following sections contain links to project modules, but are not
visibile when reading this file on Github. Please navigate to the
source files via the normal [[https://github.com/thi-ng/geom/tree/master/geom-core/][GH repo browser]].

** Core API

#+INCLUDE: "core.org"         :minlevel 2
#+INCLUDE: "vector.org"       :minlevel 2
#+INCLUDE: "matrix.org"       :minlevel 2
#+INCLUDE: "quaternion.org"   :minlevel 2

* Tests

#+INCLUDE: "../test/core.org" :minlevel 2
