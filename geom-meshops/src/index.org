#+SETUPFILE: ../../src/setup.org
#+TITLE: thi.ng/geom-meshops

* About the project

** Overview

This is a sub-module of [[file:../../src/index.org][thi.ng/geom]]. It contains various mesh related
tools & operations, incl. I/O, subdivisions, CSG/Boolean mesh merge
etc. Mesh I/O is currently only supported for Clojure with CLJS
versions forthcoming.

** Status

ALPHA quality, in active development.

* Namespaces

- [[./csg.org][thi.ng.geom.mesh.csg]]
- [[./delaunay.org][thi.ng.geom.mesh.delaunay]]
- [[./io.org][thi.ng.geom.mesh.io]]
- [[./meshops.org][thi.ng.geom.mesh.ops]]
- [[./subdivision.org][thi.ng.geom.mesh.subdivision]]

* Tests

- [[../test/core.org][Tests]]

* Module definition

** Building & testing this project

Please see the [[file:../../src/index.org][parent project]] for further information.

** Injected properties                                             :noexport:

This template uses shared project configuration defined in [[../../src/config.org][config.org]].
Module specific settings are defined below:

#+BEGIN_SRC clojure :exports none :noweb-ref project-name
thi.ng/geom-meshops
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/geom-meshops-<<conf-version()>>.js
#+END_SRC

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version()>>"
    :description  "thi.ng geometry kit - CSG module"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License"
                   :url  "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url  "<<conf-project-url>>"}

    :min-lein-version "2.4.0"

    :dependencies [<<dep-clj>>
                   [thi.ng/geom-core "<<conf-version()>>"]
                   [thi.ng/geom-types "<<conf-version()>>"]]

    :source-paths ["src/cljx"]
    :test-paths   ["<<conf-gen-test-path>>"]

    :profiles     {:dev {:dependencies [<<dep-cljs>>
                                        <<dep-criterium>>]
                         :plugins      [<<dep-cljx>>
                                        <<dep-cljsbuild>>
                                        <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :auto-clean false
                         :prep-tasks [["cljx" "once"]]
                         :aliases {"cleantest" ["do" "clean," "cljx" "once," "test," "cljsbuild" "test"]}}}

    :cljx         {:builds [{:source-paths ["src/cljx"]
                             :output-path "<<conf-gen-source-path>>"
                             :rules :clj}
                            {:source-paths ["src/cljx"]
                             :output-path "<<conf-gen-source-path>>"
                             :rules :cljs}
                            {:source-paths ["test/cljx"]
                             :output-path "<<conf-gen-test-path>>"
                             :rules :clj}
                            {:source-paths ["test/cljx"]
                             :output-path "<<conf-gen-test-path>>"
                             :rules :cljs}]}

    :cljsbuild    {:builds [{:source-paths ["<<conf-gen-source-path>>" "<<conf-gen-test-path>>"]
                             :id "simple"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.geom.mesh.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.geom.mesh.version)
  
  (prn version)
  ; "<<conf-version()>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/version.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.mesh.version)
  (def version "<<conf-version()>>")
#+END_SRC

** Contributors

| *Name*          | *Role*                          | *Website*           |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://postspectacular.com][postspectacular.com]] |
|                 |                                 | [[http://thi.ng][thi.ng]]              |
