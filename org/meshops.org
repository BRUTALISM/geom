* Namespace: thi.ng.geom.meshops
** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/meshops.cljx
  (ns thi.ng.geom.meshops
    (:require
      [thi.ng.math.core :as m]
      [thi.ng.geom.core :as g :refer [vec2 vec3]]
      [thi.ng.geom.aabb :as a]
      [thi.ng.geom.line :as l]
      [thi.ng.geom.mesh :as mesh]
      [thi.ng.geom.spatialtree :as st]
      [clojure.set :as set]))
#+END_SRC
** Utilities
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/meshops.cljx
  (defn find-in-tree
    "Returns the first item in the bounding box with size `eps` surrounding `p` in the given octree."
    [t eps half-eps p]
    (let [b (a/aabb (g/sub p half-eps) eps)]
      (first (st/select-with-shape b t))))

  (defn unique-point-tree
    [points eps]
    (let [{[bx by bz] :p [sx sy sz] :size} (g/bounding-box* points)
          eps (vec3 eps)
          eps2 (g/scale eps 0.5)
          [tree dupes]
          (reduce
            (fn [[t dupes :as state] p]
              (if (find-in-tree t eps eps2 p)
                [t (conj! dupes p)]
                [(st/add-point t p) dupes]))
            [(st/octree bx by bz sx sy sz) (transient [])]
            points)]
      [tree (persistent! dupes)]))

  (defn collapse-edges
    [m eps]
    (reduce
      (fn[m e] (if (get-in m [:edges e]) (g/merge-vertices m (first e) (second e)) m))
      m
      (filter
        (fn [e] (let [[a b] (vec e)] (< (g/dist-squared a b) eps)))
        (keys (:edges m)))))

  (defn unify-vertices
    [{:keys [vertices faces]} eps]
    (let [[octree dupes] (unique-point-tree (keys vertices) eps)
          eps (vec3 eps)
          eps2 (g/scale eps 0.5)
          lookup #(find-in-tree octree eps eps2 %)]
      [(reduce
         (fn [m [a b c]] (mesh/add-face m [(lookup a) (lookup b) (lookup c)]))
         (mesh/mesh3) faces)
       dupes]))

  (defn make-watertight
    [{:keys [vertices edges] :as m} eps]
    (let [split-face (fn[v e [fa fb fc :as f]]
                       (cond
                         (= e #{fa fb}) [f [fa v fc] [v fb fc]]
                         (= e #{fb fc}) [f [fa fb v] [v fc fa]]
                         :default [f [fc v fb] [v fa fb]]))
          update-face (fn[m [f f1 f2]]
                       (-> (g/remove-face m f)
                           (mesh/add-face f1)
                           (mesh/add-face f2)))]
      (reduce
        (fn [m v]
          (let [vedges (into #{} (map (fn[n] #{v n}) (g/vertex-neighbors m v)))
                coeff #(l/closest-point-coeff* v % %2)
                v-on-edge? (fn [a b]
                             (let [t (coeff a b)
                                   p (if (m/in-range? 0.01 0.99 t) (g/mix a b t))]
                               (if (and p (< (g/dist-squared v p) eps)) p)))]
            (loop [edges (set/difference (into #{} (keys (:edges m))) vedges)]
              (if-let [e (first edges)]
                (let [[a b] (vec e) p (v-on-edge? a b)]
                  (if p
                    (reduce update-face m (map #(split-face v e %) (get-in m [:edges e])))
                    (recur (rest edges))))
                m))))
        m (keys vertices))))
#+END_SRC
