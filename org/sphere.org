* thi.ng.geom.sphere
** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  (ns thi.ng.geom.sphere
    (:require
     [thi.ng.math.core :as m :refer [PI *eps*]]
     [thi.ng.geom.core :as g :refer [*resolution*]]
     [thi.ng.geom.mesh :as mesh]
     [thi.ng.geom.types :as types])
    #+clj
    (:import
     [thi.ng.geom.types Line3 AABB Sphere]))
#+END_SRC
** Constructor
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  (defn sphere
    ([] (thi.ng.geom.types.Sphere. [0.0 0.0 0.0] 1.0))
    ([r] (thi.ng.geom.types.Sphere. [0.0 0.0 0.0] #+clj (double r) #+cljs r))
    ([p r] (thi.ng.geom.types.Sphere. (g/vec3 p) #+clj (double r) #+cljs r)))
#+END_SRC
** Type specific functions
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx

#+END_SRC
** Protocol implementations
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  (extend-type thi.ng.geom.types.Sphere
#+END_SRC
*** TODO PGraph
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx

#+END_SRC
*** PShape
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  g/PShape
  (area
   [{r :r}] (* 4.0 PI r r))
  (bounds
   [this] (thi.ng.geom.types.AABB. (:p this) (g/vec3 (:r this))))
  (center
   ([this] (thi.ng.geom.types.Sphere. (g/vec3 0.0) (:r this)))
   ([this p] (thi.ng.geom.types.Sphere. p (:r this))))
  (centroid [this] (:p this))
  (width  [this] (* 2.0 (:r this)))
  (height [this] (* 2.0 (:r this)))
  (depth  [this] (* 2.0 (:r this)))
#+END_SRC
*** PShape3
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  g/PShape3
  (bounding-sphere [this] this)
  (volume
   [{r :r}] (* (/ 4.0 3.0) PI r r r))
#+END_SRC
*** PBoundary
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  g/PBoundary
  (contains-point?
   [{p :p r :r} q] (<= (g/dist3-squared p q) (* r r)))
  (classify-point
   [{p :p r :r} q]
   (m/signum (- (* r r) (g/dist3-squared p q)) *eps*))
  (random-point-inside
   [this]
   (g/add3 (:p this) (g/randvec3 (m/random (:r this)))))
  (random-point
   [this]
   (g/add3 (:p this) (g/randvec3 (:r this))))
#+END_SRC
*** TODO PMeshable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  g/PMeshable
  (as-mesh
   ([this] (g/as-mesh this *resolution*))
   ([this res] nil))
#+END_SRC
*** End of implementation
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/sphere.cljx
  )
#+END_SRC


* COMMENT DITAA
#+header: :exports results
#+BEGIN_SRC ditaa :file assets/hello-world.png :cmdline -r
+---------------------+
|Amazing stuff!       |
|cFF0                 |
|         +-----------+        +------------------------+
|         |cF60       |        |cF0F                    |
|         |           |        | o in pink is nice too  |
|         |           |        |                        +<-----------+
|         |           |        |                        |            |
|         |           |        |                        |            |
+---------+-----+-----+        +------+-----------------+            |
                |                     |                              |
                v                     v                              |
          +-----+---------------------+---+                          |
          |c0FF                           |                          |
          | o more bullets                +--------------------------+
          | o even more                   |
          +-------------------------------+
#+END_SRC

#+RESULTS:
file:assets/hello-world.png
