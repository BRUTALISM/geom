** thi.ng.geom.triangle
*** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (ns thi.ng.geom.triangle
    (:require
     [thi.ng.data.core :as d]
     [thi.ng.math.core :as m :refer [PI HALF_PI THIRD SQRT3 *eps*]]
     [thi.ng.geom.core :as g :refer [vec2 vec3]]
     [thi.ng.geom.types :as types])
    #+clj
    (:import
     [thi.ng.geom.types Circle Line2 Line3 Rect Polygon Triangle2 Triangle3]))
#+END_SRC
*** Constructors
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (defn triangle2
    [a b c] (thi.ng.geom.types.Triangle2. (vec2 a) (vec2 b) (vec2 c)))

  (defn triangle3
    ([t]
       (cond
        (or (instance? thi.ng.geom.types.Triangle2 t) (map? t))
        (thi.ng.geom.types.Triangle3.
         (vec3 (:a t)) (vec3 (:b t)) (vec3 (:c t)))
        :default
        (thi.ng.geom.types.Triangle3.
         (vec3 (nth t 0 0)) (vec3 (nth t 1 0)) (vec3 (nth t 2 0)))))
    ([a b c] (thi.ng.geom.types.Triangle3. (vec3 a) (vec3 b) (vec3 c))))

  (defn equilateral2
    ([l]
       (cond
        (map? l) (equilateral2 (:a l) (:b l))
        (sequential? l) (let [[a b] l] (equilateral2 a b))
        :default (assert false "invalid argument, only map or sequential supported"))) ;; TODO
    ([a b]
       (let [a (vec2 a) b (vec2 b)
             dir (g/sub a b)
             n (g/normal dir)
             c (-> n (g/normalize (* (g/mag dir) (* SQRT3 0.5))) (g/add (g/mix a b)))]
         (triangle2 a b c)))
    ([x1 y1 x2 y2]
       (equilateral2 [x1 y1] [x2 y2])))
#+END_SRC
*** Shared 2d/3d functions
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (defn area2
    ([a b c] (* 0.5 (g/cross (g/sub b a) (g/sub c a))))
    ([[a b c]] (* 0.5 (g/cross (g/sub b a) (g/sub c a)))))

  (defn area3
    ([a b c] (* 0.5 (g/mag (g/cross (g/sub b a) (g/sub c a)))))
    ([[a b c]] (* 0.5 (g/mag (g/cross (g/sub b a) (g/sub c a))))))

  (defn centroid*
    ([a b c] (g/scale (g/add a b c) THIRD))
    ([[a b c]] (g/scale (g/add a b c) THIRD)))

  (defn barycentric*
    [a b c p]
      (let [e0 (g/sub c a)
            e1 (g/sub b a)
            e2 (g/sub p a)
            d00 (g/mag-squared e0)
            d01 (g/dot e0 e1)
            d02 (g/dot e0 e2)
            d11 (g/mag-squared e1)
            d12 (g/dot e1 e2)
            denom (/ 1.0 (- (* d00 d11) (* d01 d01)))
            u (* denom (- (* d11 d02) (* d01 d12)))
            v (* denom (- (* d00 d12) (* d01 d02)))]
        [(- 1.0 (+ u v)) v u]))

  (defn contains-point*
    [a b c p]
      (let [[u v w] (barycentric* a b c p)]
        (and (>= u 0.0) (>= v 0.0) (<= w 1.0))))

  (defn check-edge
    [splits classifier e p q add-p? add-q?]
    (let [pc (classifier e p) qc (classifier e q)
          splits (if add-p? (conj splits [p pc]) splits)]
      (if (neg? (* pc qc))
        (let [{ip :p ub :ub} (g/intersect-line e {:p p :q q})]
          (if add-q?
            (conj (conj splits [ip 0]) [q qc])
            (conj splits [ip 0])))
        (if add-q? (conj splits [q qc]) splits))))

  (defn slice-with*
    ([t e] (slice-with* t e g/classify-point))
    ([[a b c] e classifier] (slice-with* a b c e classifier))
    ([a b c e classifier]
       (let [verts (-> []
                       (check-edge classifier e a b true true)
                       (check-edge classifier e b c false true)
                       (check-edge classifier e c a false false))
             cmap (fn [ids]
                    (reduce
                     (fn [m [[a cl] b c]]
                       (update-in m [cl] conj [a (b 0) (c 0)]))
                     {-1 [] 1 []}
                     (map (fn [[a b c]] [(verts a) (verts b) (verts c)]) ids)))
             corner-index (fn []
                            (let [triverts #{a b c}]
                              (loop [i (dec (count verts))]
                                (when-let [[v c] (verts i)]
                                  (if (and (zero? c) (triverts v)) i (recur (dec i)))))))]
         (condp = (count verts)
           4 (let [d (corner-index)]
               (cmap [[(m/wrap-range (inc d) 4) (m/wrap-range (+ d 2) 4) d]
                      [(m/wrap-range (dec d) 4) d (m/wrap-range (+ d 2) 4)]]))
           5 (if (zero? (get-in verts [1 1]))
               (if (zero? (get-in verts [3 1]))
                 (cmap [[0 1 3] [0 3 4] [2 3 1]])
                 (cmap [[0 1 4] [2 4 1] [2 3 4]]))
               (cmap [[0 1 2] [0 2 4] [3 4 2]]))
           nil))))
#+END_SRC
*** Protocol implementations
**** Triangle2
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (extend-type thi.ng.geom.types.Triangle2
#+END_SRC
***** PGraph
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PGraph
  (vertices
   [this] [(:a this) (:b this) (:c this)])
  (edges
   [{a :a b :b c :c}]
   [(thi.ng.geom.types.Line2. a b) (thi.ng.geom.types.Line2. b c) (thi.ng.geom.types.Line2. c a)])
#+END_SRC
***** PShape
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PShape
  (area
   [t] (area2 (:a t) (:b t) (:c t)))
  (bounds
   [t] (g/bounding-rect* [(:a t) (:b t) (:c t)]))
  (center
   ([t] (let [ct (g/centroid t)]
          (thi.ng.geom.types.Triangle2.
           (g/sub (:a t) ct) (g/sub (:b t) ct) (g/sub (:c t) ct))))
   ([t o] (let [ct (g/sub o (g/centroid t))]
            (thi.ng.geom.types.Triangle2.
             (g/add (:a t) ct) (g/add (:b t) ct) (g/add (:c t) ct)))))
  (centroid
   [t] (centroid* (:a t) (:b t) (:c t)))
  (width
   [this] (g/axis-range* 0 [(:a this) (:b this) (:c this)]))
  (height
   [this] (g/axis-range* 1 [(:a this) (:b this) (:c this)]))
  (depth [this] 0)
#+END_SRC
***** PShape2
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PShape2
  (bounding-circle
   [t] (g/bounding-circle* (g/centroid t) [(:a t) (:b t) (:c t)]))
  (circumference
   [{a :a b :b c :c}] (+ (+ (g/dist a b) (g/dist b c)) (g/dist c a)))
#+END_SRC
***** PBoundary
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PBoundary
  ;; TODO add clockwise? check, currently assumes clockwise ordering
  (classify-point
   [this p]
   (reduce min (map #(g/classify-point % p) (g/edges this))))
  (closest-point
   [this p]
   (g/closest-point* (g/edges this) p))
  (contains-point?
   [this p]
   (contains-point* (:a this) (:b this) (:c this) p))
#+END_SRC
***** PSampleable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PSampleable
  (point-at
   [this t] (g/point-at* t [(:a this) (:b this) (:c this) (:a this)]))
  (random-point
   [this] (g/point-at this (m/random)))
  (random-point-inside
   [this]
   (let [b1 (m/random)
         b2 (m/random (- 1.0 b1))
         b3 (- 1.0 (+ b1 b2))]
     (g/from-barycentric*
      [(:a this) (:b this) (:c this)] (shuffle [b1 b2 b3]))))
  (sample-uniform
   [this udist include-last?]
   (g/sample-uniform* udist include-last? [(:a this) (:b this) (:c this) (:a this)]))
#+END_SRC
***** PPolygonizable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PPolygonizable
  (as-polygon
   [t] (thi.ng.geom.types.Polygon. [(:a t) (:b t) (:c t)] []))
#+END_SRC
***** PInvertible
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PInvertible
  (invert
   [t] (thi.ng.geom.types.Triangle2. (:c t) (:b t) (:a t)))
#+END_SRC
***** PSliceable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PSliceable
  (slice-with
   ([this e]
      (slice-with* (:a this) (:b this) (:c this) e g/classify-point))
   ([this e classifier]
      (slice-with* (:a this) (:b this) (:c this) e classifier)))
#+END_SRC
***** PTransformable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PTransformable
  (scale
   ([this s]
    (thi.ng.geom.types.Triangle2. (g/scale (:a this) s) (g/scale (:b this) s) (g/scale (:c this) s)))
   ([this a b]
    (thi.ng.geom.types.Triangle2. (g/scale (:a this) a b) (g/scale (:b this) a b) (g/scale (:c this) a b))))
  (scale-size
   [{a :a b :b c :c} s]
   (let [cc (centroid* a b c)]
     (thi.ng.geom.types.Triangle2.
      (-> a (g/sub cc) (g/madd s cc)) (-> b (g/sub cc) (g/madd s cc)) (-> c (g/sub cc) (g/madd s cc)))))
#+END_SRC
***** End of implementations
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  )
#+END_SRC
**** Triangle3
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (extend-type thi.ng.geom.types.Triangle3
#+END_SRC
***** PGraph
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PGraph
  (vertices
   [this] [(:a this) (:b this) (:c this)])
  (edges
   [{a :a b :b c :c}]
   [(thi.ng.geom.types.Line3. a b)
    (thi.ng.geom.types.Line3. b c)
    (thi.ng.geom.types.Line3. c a)])
  (vertex-neighbors
   [{a :a b :b c :c} v]
   (condp = (vec3 v)
     a [c b]
     b [a c]
     c [b a]
     nil))
  (vertex-valence
   [{a :a b :b c :c} v] (if (#{a b c} (vec3 v)) 2 0))
#+END_SRC
***** PShape
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PShape
  (area
   [t] (area3 (:a t) (:b t) (:c t)))
  (bounds
   [t] (g/bounding-box* [(:a t) (:b t) (:c t)]))
  (center
   ([t]
      (let [ct (g/centroid t)]
        (thi.ng.geom.types.Triangle3.
         (g/sub (:a t) ct) (g/sub (:b t) ct) (g/sub (:c t) ct))))
   ([t o]
      (let [ct (g/sub o (g/centroid t))]
        (thi.ng.geom.types.Triangle3.
         (g/add (:a t) ct) (g/add (:b t) ct) (g/add (:c t) ct)))))
  (centroid
   [t] (centroid* (:a t) (:b t) (:c t)))
  (width
   [this] (g/axis-range* 0 [(:a this) (:b this) (:c this)]))
  (height
   [this] (g/axis-range* 1 [(:a this) (:b this) (:c this)]))
  (depth
   [this] (g/axis-range* 2 [(:a this) (:b this) (:c this)]))
#+END_SRC
***** PShape3
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PShape3
  (bounding-sphere
   [t] (g/bounding-sphere* (g/centroid t) [(:a t) (:b t) (:c t)]))
  (volume [this] 0.0)
#+END_SRC
***** PBoundary
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PBoundary
  (classify-point [this p] nil) ; TODO
  (closest-point [this p] nil) ; TODO
  (contains-point?
   [this p]
   (contains-point* (:a this) (:b this) (:c this) p))
#+END_SRC
***** PSampleable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PSampleable
  (point-at [this t] nil) ; TODO
  (random-point
   [this] (g/point-at this (m/random)))
  (random-point-inside
   [t]
   (let [b1 (m/random)
         b2 (m/random (- 1.0 b1))
         b3 (- 1.0 (+ b1 b2))]
     (g/from-barycentric*
      [(:a t) (:b t) (:c t)] (shuffle [b1 b2 b3]))))
#+END_SRC
***** PIntersectable
****** TODO update ray definition or protocol?
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PIntersectable
  (intersect-ray
   [{:keys [a b c]} {p :p dir :dir}]
    (let [n (g/normal3* a b c)
          nd (g/dot n dir)]
      (if (neg? nd)
        (let [t (/ (- (g/dot n (g/sub p a))) nd)]
          (if (>= t *eps*)
            (let [ip (g/add p (g/scale dir t))]
              (if (contains-point* a b c ip)
                {:p ip :n n :dist t :dir (g/normalize (g/sub ip p))})))))))
#+END_SRC
***** PInvertible
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PInvertible
  (invert
   [t] (thi.ng.geom.types.Triangle3. (:c t) (:b t) (:a t)))
#+END_SRC
***** PSliceable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PSliceable
  (slice-with
   ([this e]
      (slice-with* (:a this) (:b this) (:c this) e g/classify-point))
   ([this e classifier]
      (slice-with* (:a this) (:b this) (:c this) e classifier)))
#+END_SRC
***** PTransformable
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  g/PTransformable
  (scale
   ([this s]
    (thi.ng.geom.types.Triangle3. (g/scale (:a this) s) (g/scale (:b this) s) (g/scale (:c this) s)))
   ([this a b]
    (thi.ng.geom.types.Triangle3. (g/scale (:a this) a b) (g/scale (:b this) a b) (g/scale (:c this) a b))))
  (scale-size
   [{a :a b :b c :c} s]
   (let [cc (centroid* a b c)]
     (thi.ng.geom.types.Triangle3.
      (-> a (g/sub cc) (g/madd s cc)) (-> b (g/sub cc) (g/madd s cc)) (-> c (g/sub cc) (g/madd s cc)))))
#+END_SRC
***** End of implementations
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  )
#+END_SRC
*** Type specific functions
**** Circumcircle
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (defn circumcircle-raw
    [[ax ay :as a] [bx by :as b] [cx cy :as c]]
    (let [eq-ab? (m/delta= ay by *eps*)
          eq-bc? (m/delta= by cy *eps*)]
      (when-not (and eq-ab? eq-bc?)
        (let [[ox oy :as o]
              (cond
                eq-ab? (let [m2 (- (/ (- cx bx) (- cy by)))
                             mx1 (* 0.5 (+ ax bx))
                             [mx2 my2] (g/mix b c)]
                         [mx1 (+ (* m2 (- mx1 mx2)) my2)])
                eq-bc? (let [m1 (- (/ (- bx ax) (- by ay)))
                             mx2 (* 0.5 (+ bx cx))
                             [mx1 my1] (g/mix a b)]
                         [mx2 (+ (* m1 (- mx2 mx1)) my1)])
                :default (let [m1 (- (/ (- bx ax) (- by ay)))
                               m2 (- (/ (- cx bx) (- cy by)))
                               [mx1 my1] (g/mix a b)
                               [mx2 my2] (g/mix b c)
                               xx (-> (* m1 mx1) (- (* m2 mx2))
                                      (+ my2) (- my1) (/ (- m1 m2)))]
                           [xx (+ (* m1 (- xx mx1)) my1)]))]
          [o (m/hypot (- bx ox) (- by oy))]))))

  (defn circumcircle
    ([t] (circumcircle (:a t) (:b t) (:c t)))
    ([a b c]
       (let [[o r] (circumcircle-raw a b c)]
         (thi.ng.geom.types.Circle. o r))))
#+END_SRC
**** Subdivision & slicing
#+BEGIN_SRC clojure :tangle babel/src-cljx/thi/ng/geom/triangle.cljx
  (defn subdivide*
    [ctor]
    (fn
      [{:keys [a b c] :as t}]
      (let [ab (g/mix a b)
            bc (g/mix b c)
            ca (g/mix c a)
            ct (centroid* t)]
        [(ctor a ab ca) (ctor bc ab b)
         (ctor c ca bc) (ctor ca ab bc)])))

  (def subdiv2 (subdivide* (fn [a b c] (thi.ng.geom.types.Triangle2. a b c))))
  (def subdiv3 (subdivide* (fn [a b c] (thi.ng.geom.types.Triangle3. a b c))))
#+END_SRC
