#+SETUPFILE: setup.org

* thi.ng.geom.circle
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.circle
    (:require
     [thi.ng.common.data.core :as d]
     [thi.ng.common.error :as err]
     [thi.ng.common.math.core :as m :refer [PI TWO_PI *eps*]]
     [thi.ng.geom.core :as g :refer [vec2 vec3 *resolution*]]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.types :as types])
    #+clj
    (:import
     [thi.ng.geom.types Circle Line2 Polygon Rect Triangle2]))
#+END_SRC
** Constructor
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  (defn circle
    ([] (thi.ng.geom.types.Circle. (vec2) 1.0))
    ([r] (thi.ng.geom.types.Circle. (vec2) r))
    ([p r] (thi.ng.geom.types.Circle. (vec2 p) r))
    ([x y r] (thi.ng.geom.types.Circle. (vec2 x y) r)))
#+END_SRC
** Type specific functions
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  (defn intersect-circle
    [{p :p r1 :r} {q :p r2 :r}]
    (let [delta (g/- q p)
          d (g/mag delta)]
      (when (and (<= d (+ r1 r2)) (>= d (m/abs (- r1 r2))))
        (let [a (/ (+ (- (* r1 r1) (* r2 r2)) (* d d)) (* 2.0 d))
              invd (/ 1.0 d)
              p (g/madd delta (* a invd) p)
              h (Math/sqrt (- (* r1 r1) (* a a)))
              perp (g/* (g/normal delta) (* h invd))]
          [(g/+ p perp) (g/- p perp)]))))
  
  (defn tangent-points
    [{p :p :as c} q]
    (let [m (g/mix p q)]
      (intersect-circle c (circle m (g/dist m p)))))
#+END_SRC
** Protocol implementations
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  (extend-type thi.ng.geom.types.Circle
#+END_SRC
*** PArea
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PArea
  (area [{r :r}] (* PI (* r r)))
#+END_SRC
*** PBounds
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PBounds
  (bounds
   [{p :p r :r}]
   (let [d (* 2 r)] (thi.ng.geom.types.Rect. (g/- p r) d d)))
  (width  [_] (* 2.0 (:r _)))
  (height [_] (* 2.0 (:r _)))
  (depth  [_] 0)
#+END_SRC
*** PBoundingCircle
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PBoundingCircle
  (bounding-circle [_] _)
#+END_SRC
*** PBoundary
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PBoundary
  (contains-point?
   [{p :p r :r} q]
   (<= (g/mag-squared (g/- p q)) (* r r)))
#+END_SRC
*** PCenter
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PCenter
  (center
   ([_] (thi.ng.geom.types.Circle. (vec2) (:r _)))
   ([_ p] (thi.ng.geom.types.Circle. (vec2 p) (:r _))))
  (centroid [_] (:p _))
#+END_SRC
*** PCircumference
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PCircumference
  (circumference [_] (* TWO_PI (:r _)))
#+END_SRC
*** PClassify
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PClassify
  (classify-point
   [_ q]
   (m/signum (- (:r _) (g/dist (:p _) q)) *eps*))
#+END_SRC
*** PExtrude
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PExtrude
  (extrude
   [_
    {:keys [res depth offset scale top? bottom?]
     :or {res *resolution* depth 1.0 scale 1.0 top? true bottom? true}}]
   (let [points (g/vertices _ res)
         tpoints (if (= 1.0 scale) points (g/vertices (circle (:p _) (* scale (:r _))) res))
         off (or offset (vec3 0 0 depth))
         points3 (mapv vec3 points)
         tpoints3 (mapv #(g/+ off %) tpoints)]
     (g/into-mesh
      (gm/gmesh)
      (concat
       (when bottom?
         (->> points
              (g/tessellate* (:p _))
              (map (fn [[a b c]] [(vec3 b) (vec3 a) (vec3 c)]))))
       (mapcat (fn [[a1 b1] [a2 b2]] [[a1 b1 b2 a2]])
               (d/successive-nth 2 (conj points3 (points3 0)))
               (d/successive-nth 2 (conj tpoints3 (tpoints3 0))))
       (when top?
         (->> tpoints
              (g/tessellate* (:p _))
              (map (fn [[a b c]] [(g/+ off a) (g/+ off b) (g/+ off c)]))))))))
  (extrude-shell
   [_ opts] (g/extrude-shell (g/as-polygon _) opts))
#+END_SRC
*** PGraph
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PGraph
  (vertices
   ([_] (g/vertices _ *resolution*))
   ([_ res]
      (mapv #(g/point-at _ %) (butlast (m/norm-range res)))))
  (edges
   ([_] (g/edges _ *resolution*))
   ([_ res]
      (let [verts (g/vertices _ res)]
        (g/edges* vector (conj verts (first verts))))))
#+END_SRC
*** PIntersect
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PIntersect
  (intersect-shape
   [_ s]
   (cond
    (instance? thi.ng.geom.types.Circle s) (intersect-circle _ s)
    (instance? thi.ng.geom.types.Rect s) (g/intersect-shape s _)
    :default (err/type-error! "Circle" s)))
#+END_SRC
*** PMeshConvert
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ *resolution*))
   ([_ res]
      (->> res
           (g/vertices _)
           (mapv g/vec3)
           (g/tessellate* (vec3 (:p _)))
           (g/into-mesh (gm/gmesh)))))
#+END_SRC
*** PPolygonConvert
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PPolygonConvert
  (as-polygon
   ([_] (g/as-polygon _ *resolution*))
   ([_ res] (thi.ng.geom.types.Polygon. (vec (g/vertices _ res)))))
#+END_SRC
*** PProximity
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PProximity
  (closest-point
   [{p :p r :r} q]
   (g/+ p (g/normalize (g/- q p) r)))
#+END_SRC
*** PSample
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PSample
  (point-at
   [_ t]
   (g/+ (:p _) (g/as-cartesian (vec2 (:r _) (* t TWO_PI)))))
  (random-point
   [_] (g/point-at _ (m/random)))
  (random-point-inside
   [_]
   (g/+ (:p _) (g/randvec2 (m/random (:r _)))))
  (sample-uniform
   [_ udist include-last?]
   (let [points (g/vertices _)]
     (g/sample-uniform* udist include-last? (conj (vec points) (first points)))))
#+END_SRC
*** PTessellate
     A circle can be tessellated into a list of uniform triangles,
     each sharing the circle's centroid. If called without 2nd
     argument the default circle =*resolution*= (a dynamic var defined
     in [[file:core.org][thi.ng.geom.core]]) will be used.
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PTessellate
  (tessellate
   ([_] (g/tessellate _ *resolution*))
   ([{p :p :as _} res]
      (->> res
           (g/vertices _)
           (g/tessellate* p)
           (map #(thi.ng.geom.types.Triangle2. %)))))
#+END_SRC
*** TODO PTransform
**** TODO scale with non-uniform values should return Ellipse

Since transforming a circle with a matrix can produce non-circular
results, the =transform= implementation returns a [[file:polygon.org][polygon]].

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PRotate
  (rotate [_ theta] (thi.ng.geom.types.Circle. (g/rotate (:p _) theta) (:r _)))
  g/PScale
  (scale [_ s] (thi.ng.geom.types.Circle. (g/* (:p _) s) (* (:r _) s)))
  (scale-size [_ s] (thi.ng.geom.types.Circle. (:p _) (* (:r _) s)))
  g/PTranslate
  (translate [_ t] (thi.ng.geom.types.Circle. (g/+ (:p _) t) (:r _)))
  g/PTransform
  (transform [_ m] (g/transform (g/as-polygon _) m))
#+END_SRC
*** PVolume
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  g/PVolume
  (volume [_] 0)
#+END_SRC
*** End of implementations                                         :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/circle.cljx
  )
#+END_SRC
