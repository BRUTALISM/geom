#+SETUPFILE: setup.org
#+TITLE: thi.ng/geom

* About the project

** Overview

This project is part of the [[https://github.com/thi-ng/][thi.ng]] collection of Clojure &
Clojurescript libraries. It constitutes the current chapter-in-writing
in a long, ongoing quest to create a comprehensive, cross-platform,
yet easy-to-use API for 2D/3D geometry operations, both common and
more niché. Since geometry is fundamental to so many aspects of design
production, as with its Java based predecessor [[http://toxiclibs.org][toxiclibs]], the
objective is *not* to produce a graphics engine for games or other
specific use cases, but aims to provide geometry related functionality
in a minimal, modular and as re-usable as possible context, thus
making it easy to integrate into a wide number of scenarios: from
architecture, digital fabrication to data visualization, generative
design in general. We attempt to realise this goal by defining almost
all operations as [[file:core.org][polymorphic protocols]] (currently approx. 50 of
them). These are implemented to different extends by the various basic
[[file:types.org][entities/types]] and together form a small domain-specific language
(whilst remaining fully extensible) to easily create, transform &
export geometry. At the core of this DSL is an extensive (and still
growing) set of vector, matrix & quaternion types/operations, which
the rest of the library is built on, currently:

*** Geometric entities

| *2D*           | *3D*                      |
|----------------+---------------------------|
| Vec2           | Vec3                      |
| Matrix32       | Matrix44                  |
|                | Quaternion                |
| Line2          | Line3                     |
| LineStrip2     | LineStrip3 (TBD)          |
| Bezier2        | Bezier3 (TBD)             |
| Circle2        | Sphere                    |
| Ellipse2 (TBD) | Ellipsoid (TBD)           |
| Rect2          | AABB                      |
| Quad2 (TBD)    | Quad3                     |
|                | Tetrahedron               |
| Triangle2      | Triangle3                 |
| Polygon2       | Polygon3 (TBD)            |
| Path2          | Path3 (TBD)               |
|                | Plane                     |
|                | GMesh                     |
| Point quadtree | Point octree              |
|                | SVO (experimental)        |
|                | Isosurface (experimental) |

Once the protocol API is finalized an overview table/graph will show
which types implement which protocols. For now please consult the
source code to see which operations are supported.

*** Geometry operations

In addition to these types, the library also implements these common
operations:

- Automatic spline generation from set of points
- Basic SVG path parsing
- 2D Delaunay triangulation
- 2D convex hull
- Shape extrusion as solid or walled mesh
- Tesselation of simple 2D polygons
- Insetting of simple 2D polygons
- Sutherland-Hodgeman clipping of 2D polygons
- Entity area, circumference & volume calculations
- Entity intersection checks (vs. line, ray, shape)
- Entity to mesh conversion (w/ many options)
- Access entities as graph-like structures (vertices/edges)
- Entity sampling (at fixed resolution or uniform distance)
- Entity subdivision (only lines, rects, quads, tetrahedrons)
- Subdivision meshes (Catmull-Clark, Doo-Sabin, Butterfly)
- 3D Boolean operations on meshes (union, difference, intersection)
- 3D geometry export (PLY, STL, OBJ, OFF formats)

*** API scope

Since this project does not provide any display & rendering
functionality at all, a number of support libraries are being worked
on, incl. WebGL & SVG support via Clojurescript and wrappers &
GUI libraries for JOGL based desktop apps. Together with sister
libraries like [[https://github.com/thi-ng/luxor][luxor]], it's also possible to generate complete 3D
scenes for high quality & high resolution rendering using [[http://luxrender.net][Luxrender]].

Furthermore, providing all functionality under a common API for both
Clojure & Clojurescript, makes it trivial to offload heavy operations
(e.g. large mesh processing) to the server side.

** Library module structure

For the upcoming 0.3.0 release, the project has been restructured into
a number of modules, each addressing a different level of abstraction
and to group namespaces based on functionality. This reduces potential
code bloat for CLJS applications, but should also make it less
daunting for newcomers to navigate the project.

*** [[file:~/work/clj/thing/geom/geom-core/src/index.org][geom-core]]

This module forms the library's core and is required by all others. It
defines approx. 50 protocols and provides implementations of
fundamental geometry types/functions like 2d/3d vector algebra,
matrices, quaternion (and related convenience constructors &
conversions) and a number of often needed utility functions to deal
with point collections, normals, sampling, triangles etc.

*** [[file:../geom-types/src/index.org][geom-types]]

This module defines all high-level 2d/3d data types and
implementations of the various core protocols for each. From a user
perspective this module should be considered part of the core, however
it's been split out to dramatically reduce code size for use cases
where only vectors/matrix ops are needed.

*** [[file:../geom-meshops/src/index.org][geom-meshops]]

This module provides several tools & operations related to working
with meshes, incl. I/O, subdivisions, triangulation, cleaning,
CSG/Boolean mesh merge etc.

** Status

The project has been in development since late 2011 and is currently
in its 4th iteration/rewrite cycle. It should still be considered
ALPHA quality with several breaking API changes planned over the next
few weeks. On the other hand, the library has already been used
successfully in several commercial projects over the past 2 years and
can be considered stable for basic use cases.

A full test suite, website & tutorials are actively being worked on.
Right now, focus of development is on features required for my
[[https://devart.withgoogle.com/#/project/16501507][Google DevArt commission]].

** Example usage

A preliminary list of other projects using this library:

- [[http://github.com/learn-postspectacular/resonate-2014-workshop][Resonate 2014 workshop]]
- [[http://github.com/thi-ng/luxor][Luxor]]
- [[http://github.com/thi-ng/morphogen][Morphogen]]

The basic examples below show some common usage patterns how entities
can be created, dissected & transformed in a very functional/pipelined
way. Each results in a 3D model file in PLY/STL formats and can
then be imported into other 3D software. If you need a simple mesh
viewer, we recommend [[http://meshlab.sf.net][Meshlab]].

#+BEGIN_SRC clojure
  (require
   '[thi.ng.geom.core :as g]
   '[thi.ng.geom.bezier :as b]
   '[thi.ng.geom.circle :as c]
   '[thi.ng.geom.polygon :as p]
   '[thi.ng.geom.rect :as r]
   '[thi.ng.geom.gmesh :as gm]
   '[thi.ng.geom.mesh.io :as mio]
   '[thi.ng.common.math.core :as m]
   '[clojure.java.io :as io])
  
  (with-open [out (io/output-stream "grid.ply")]
    (->> (for [x (range -4 5)                        ;; create 9x9 grid in XY plane
               y (range -4 5)]
           (-> (c/circle x y 0.5)                    ;; create circle at X,Y radius=0.5
               (g/as-polygon 8)                      ;; convert into octagon
               (g/extrude-shell                      ;; convert into walled, cylindrical mesh
                {:depth (m/random 0.25 2)
                 :wall 0.1})))
         (reduce g/into)                             ;; combine into single mesh
         (mio/write-ply out)))                       ;; output as Stanford PLY file
  
  (with-open [out (io/output-stream "pedals.stl")]
    (let [pedal (-> (r/rect 100 60)                  ;; create rect 100x60 wide
                    (g/vertices)                     ;; get corner points
                    (b/auto-spline2 true)            ;; convert to spline
                    (g/sample-uniform 10 false)      ;; sample curve at uniform distance
                    (p/polygon)                      ;; convert to polygon
                    (g/as-mesh))]                    ;; tessellate & convert to mesh
      (->> (range 16)
           (map
            (fn [i]
              (-> pedal                              ;; replicate rotated around X & Z axis
                  (g/transform                       ;; pedal transformed using 4x4 matrix
                   (-> (g/matrix44)
                       (g/translate 0 0 (* i 2))
                       (g/rotate-z (* i m/PHI 0.5))  ;; Φ = golden ratio angle
                       (g/rotate-x (* m/PI 0.1)))))));; slight tilt to minimize overlap
           (reduce g/into)                           ;; combine into single mesh
           (mio/write-stl out))))                    ;; output as Stanford PLY file
#+END_SRC

** Building & testing this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in [[https://github.com/lynaghk/cljx][CLJX]] form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi-ng/geom.git
  cd geom

  # tangle all modules...
  ./tangle-all.sh

  # ...or just tangle an individual module
  ./tangle.sh geom-core/src/*.org geom-core/test/*.org

  # ...or an individual file
  ./tangle.sh geom-core/src/utils.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. This project
currently consists of 30 namespaces and 6800+ lines of code, the
tangling of which takes approx. 20 secs.

Once tangling is complete, you can =cd= into the generated project
directory of a module (=babel= in this case) and then use =lein= as usual.

*** Testing

The =project.clj= files of each module define an alias to trigger a
complete build & tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd <<module-name>>/babel
  lein cleantest # some tests currently fail due to still missing protocol impls
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Since the generated =project.clj= files include REPL hooks
for CLJX, editing files in Org-mode, then re-loading & testing changes
is quite trivial. Simply launch a REPL (via lein or Emacs) as usual.
Everytime you've made changes to an =.org= file, re-tangle it from
Emacs or =tangle.sh=, then reload the namespace in the REPL via
=(require 'thi.ng.geom... :reload)= or similar.

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :exports none :noweb-ref project-name
thi.ng/geom
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/geom-<<version>>.js
#+END_SRC

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*      | *Tagged Github URL*                       |
|-----------+------------+--------------------+-------------------------+-------------------------------------------|
|     0.2.0 | 2014-03-10 | 1st public release | =[thi.ng/geom "0.2.0"]= | https://github.com/thi-ng/geom/tree/0.2.0 |

** Authors

| *Name*          | *Role*                          | *Website*           |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://postspectacular.com][postspectacular.com]] |
|                 |                                 | [[http://thi.ng][thi.ng]]              |

** Leiningen coordinates
#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/geom "<<version>>"]
#+END_SRC

** Leiningen project file                                          :noexport:
#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version>>"
    :description "thi.ng geometry kit - meta project spec including all modules"
    :url "<<conf-project-url>>"
    :license {:name "Apache Software License"
              :url "http://www.apache.org/licenses/LICENSE-2.0"}
    :dependencies [<<dep-clj>>
                   <<dep-geom-core>>
                   <<dep-geom-types>>
                   <<dep-geom-meshops>>]

    :source-paths ["src/cljx"]
    :test-paths ["<<conf-gen-test-path>>"]
  
    :profiles {:dev {:dependencies [<<dep-cljs>>
                                    <<dep-criterium>>]
                     :plugins [<<dep-cljx>>
                               <<dep-cljsbuild>>
                               <<dep-cljs-test>>
                               <<dep-austin>>]
                     :hooks [cljx.hooks]
                     :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}
  
    :cljx {:builds [{:source-paths ["src/cljx"]
                     :output-path "<<conf-gen-source-path>>"
                     :rules :clj}
                    {:source-paths ["src/cljx"]
                     :output-path "<<conf-gen-source-path>>"
                     :rules :cljs}
                    {:source-paths ["test/cljx"]
                     :output-path "<<conf-gen-test-path>>"
                     :rules :clj}
                    {:source-paths ["test/cljx"]
                     :output-path "<<conf-gen-test-path>>"
                     :rules :cljs}]}
  
    :cljsbuild {:builds [{:source-paths ["<<conf-gen-source-path>>" "<<conf-gen-test-path>>"]
                          :id "simple"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :whitespace
                                     :pretty-print true}}]
                :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC



