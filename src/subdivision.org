#+SETUPFILE: setup.org

* thi.ng.geom.mesh.subdivision
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.mesh.subdivision
    (:require
     [thi.ng.common.data.core :as d]
     [thi.ng.common.error :as err]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.core :as g]
     [clojure.core.reducers :as r]))
#+END_SRC
** Shared helpers
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx

#+END_SRC

** Catmull-Clark

Based on reference: [[https://en.wikipedia.org/wiki/Catmull%25E2%2580%2593Clark_subdivision_surface][Wikipedia]]

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx
  (defn cc-face-points
    "Takes a seq of faces and returns map with faces as keys and their
      centroids as values."
    [faces]
    (->> faces
         (r/map (fn [f] [f (g/centroid* f)]))
         (r/fold (r/monoid conj hash-map))))
  
  (defn cc-subdiv-face
    [face fp e-points]
    (->> (d/wrap-seq face [(peek face)] [(first face)])
         (d/successive-nth 3)
         (r/map (fn [[p c n]] [(e-points #{p c}) c (e-points #{c n}) fp]))
         (r/fold (r/monoid conj vector))))
  
  (defn cc-edge-points
    [edges f-points]
    (->> edges
         (r/map
          (fn [e e-faces]
            [e (g/centroid* (into (mapv f-points e-faces) e))]))
         (r/fold (r/monoid conj hash-map))))
  
  (defn cc-subdiv-faces
    [f-points e-points]
    (->> f-points
         (r/map (fn [f fp] (cc-subdiv-face f fp e-points)))
         (r/fold (r/monoid into vector))))
  
  (defn cc-replace-vertices
    [mesh f-points e-points sd-faces]
    (let [new-verts (->> mesh
                         :vertices
                         (keys)
                         (r/map
                          (fn [v]
                            (let [f (g/centroid* (mapv f-points (gm/vertex-faces* mesh v)))
                                  vn (gm/vertex-neighbors* mesh v)
                                  n (count vn)
                                  r (g/centroid* (mapv #(g/mix v %) vn))
                                  v* (g/div (g/+ f (g/* r 2.0) (g/* v (- n 3))) n)]
                              [v v*])))
                         (r/fold (r/monoid conj hash-map)))]
      (->> sd-faces
           (r/map (fn [f] (replace new-verts f)))
           (into #{}))))
  
  (defn catmull-clark
    [{:keys [faces edges] :as mesh}]
    (let [f-points (cc-face-points faces)
          e-points (cc-edge-points edges f-points)
          sd-faces (cc-subdiv-faces f-points e-points)]
      (->> sd-faces
           (cc-replace-vertices mesh f-points e-points)
           (reduce gm/add-face (gm/gmesh)))))
#+END_SRC

** Doo-Sabin
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx
  (defn ds-edge-midpoints
    [edges]
    (->> edges
         (reduce
          (fn [acc e]
            (assoc! acc e (g/mix (first e) (second e))))
          (transient {}))
         persistent!))
  
  (defn ds-face-points*
    [f e-points]
    (let [fp (g/centroid* f)]
      (->> (d/wrap-seq f [(peek f)] [(first f)])
           (d/successive-nth 3)
           (reduce
            (fn [acc [p c n]]
              (assoc acc c
                     (-> fp
                         (g/+ (e-points #{p c}) (e-points #{c n}))
                         (g/+ c)
                         (g/* 0.25))))
            {}))))
  
  (defn ds-face-points
    [{:keys [faces edges] :as m}]
    (let [e-points (ds-edge-midpoints (keys edges))]
      (->> faces
           (reduce
            (fn [acc f]
              (assoc! acc f (ds-face-points* f e-points)))
            (transient {}))
           persistent!)))
  
  (defn ds-fp-faces
    "Construct new faces from face points"
    [f-points]
    (map (fn [[f fps]] (mapv fps f)) f-points))
  
  (defn ds-make-edge-loop
    [edges]
    (loop [acc [(ffirst edges)] p (peek (first edges)) edges (set (rest edges))]
      (if (seq edges)
        (let [[v n :as e] (first (filter #(= p (first %)) edges))]
          (if e
            (recur (conj acc v) n (disj edges e))
            (err/throw! "Mesh not manifold")))
        acc)))
  
  (defn ds-dual-faces
    [{:keys [vertices] :as mesh} f-points]
    (->> vertices
         keys
         (reduce
          (fn [acc v]
            (let [vn (gm/vertex-neighbors* mesh v)]
              (if (< 2 (count vn))
                (->> vn
                     (reduce
                      (fn [acc* n]
                        (let [f1 (->> v vertices (some #(if (= n (:prev %)) (:f %))))
                              f2 (->> v vertices (some #(if (= n (:next %)) (:f %))))
                              fp1 (get-in f-points [f2 v] v)
                              fp2 (get-in f-points [f1 v] v)]
                          (conj acc* [fp2 fp1])))
                      [])
                     (ds-make-edge-loop)
                     (conj! acc))
                acc)))
          (transient []))
         persistent!))
  
  (defn ds-edge-faces
    [{:keys [vertices edges] :as mesh} f-points]
    (->> edges
         (reduce
          (fn [acc [e e-faces]]
            (if (= 2 (count e-faces))
              (let [[a b] (seq e)
                    f1 (->> (vertices a) (some #(if (= b (:prev %)) (:f %))))
                    f2 (->> (vertices a) (some #(if (= b (:next %)) (:f %))))]
                (conj! acc (mapv #(get-in f-points %) [[f1 a] [f1 b] [f2 b] [f2 a]])))
              acc))
          (transient []))
         persistent!))
  
  (defn custom-doo-sabin
    [& {f* :faces, e* :edges, v* :vertices, :or {f* true, e* true, v* true}}]
    (fn [mesh]
      (let [f-points (ds-face-points mesh)
            f-faces (ds-fp-faces f-points)
            e-faces (if e* (ds-edge-faces mesh f-points))
            v-faces (if v* (ds-dual-faces mesh f-points))]
        (reduce gm/add-face
                (gm/gmesh) (concat (if f* f-faces) e-faces v-faces)))))
  
  (def doo-sabin (custom-doo-sabin))
#+END_SRC
