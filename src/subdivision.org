#+SETUPFILE: setup.org

* thi.ng.geom.mesh.subdivision
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.mesh.subdivision
    (:require
     [thi.ng.common.data.core :as d]
     [thi.ng.common.error :as err]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.core :as g]
     [clojure.core.reducers :as r]))
#+END_SRC
** Shared helpers
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx
  (defn fold-into-map
    [coll] (r/fold (r/monoid conj hash-map) coll))

  (defn fold-into-vec
    [coll] (r/fold (r/monoid conj vector) coll))
#+END_SRC

** Catmull-Clark

Based on reference: [[https://en.wikipedia.org/wiki/Catmull%25E2%2580%2593Clark_subdivision_surface][Wikipedia]]

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx
  (defn cc-face-points
    "Takes a seq of faces and returns map with faces as keys and their
    centroids as values."
    [faces]
    (->> faces
         (r/map (fn [f] [f (g/centroid* f)]))
         (fold-into-map)))
  
  (defn cc-subdiv-face
    [face fp e-points]
    (->> (d/wrap-seq face [(peek face)] [(first face)])
         (d/successive-nth 3)
         (r/map (fn [[p c n]] [(e-points #{p c}) c (e-points #{c n}) fp]))
         (fold-into-vec)))
  
  (defn cc-edge-points
    [edges f-points]
    (->> edges
         (r/map
          (fn [e e-faces]
            [e (-> (mapv f-points e-faces)
                   (conj (first e))
                   (conj (second e))
                   (g/centroid*))]))
           (fold-into-map)))
  
  (defn cc-subdiv-faces
    [f-points e-points]
    (->> f-points
         (r/map (fn [f fp] (cc-subdiv-face f fp e-points)))
         (r/fold (r/monoid into vector))))
  
  (defn cc-replace-vertices
    [mesh f-points e-points sd-faces]
    (let [new-verts (->> mesh
                         :vertices
                         (keys)
                         (r/map
                          (fn [v]
                            (let [f (g/centroid* (mapv f-points (gm/vertex-faces* mesh v)))
                                  vn (gm/vertex-neighbors* mesh v)
                                  n (count vn)
                                  r (g/centroid* (mapv #(g/mix v %) vn))]
                              [v (g/addm (g/madd r 2.0 f) (g/* v (- n 3)) (/ 1.0 n))])))
                         (fold-into-map))]
      (->> sd-faces
           (r/map (fn [f] (replace new-verts f)))
           (into []))))
  
  (defn catmull-clark
    [{:keys [faces edges] :as mesh}]
    (let [f-points (cc-face-points faces)
          e-points (cc-edge-points edges f-points)]
      (->> (cc-subdiv-faces f-points e-points)
           (cc-replace-vertices mesh f-points e-points)
           (reduce gm/add-face (gm/gmesh)))))
#+END_SRC

** Doo-Sabin
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx
  (defn ds-edge-midpoints
    [edges]
    (->> edges
         (r/map (fn [e] [e (g/mix (first e) (second e))]))
         (fold-into-map)))
  
  (defn ds-face-points*
    [f e-points]
    (let [fp (g/centroid* f)]
      (->> (d/wrap-seq f [(peek f)] [(first f)])
           (d/successive-nth 3)
           (r/map (fn [[p c n]]
                    [c (-> fp
                           (g/+ (e-points #{p c}) (e-points #{c n}))
                           (g/addm c 0.25))]))
           (fold-into-map))))
  
  (defn ds-face-points
    [{:keys [faces edges] :as m}]
    (let [e-points (ds-edge-midpoints (keys edges))]
      (->> faces
           (r/map (fn [f] [f (ds-face-points* f e-points)]))
           (fold-into-map))))
  
  (defn ds-fp-faces
    "Construct new faces from face points"
    [f-points]
    (map (fn [[f fps]] (mapv fps f)) f-points))
  
  (defn ds-make-edge-loop
    [edges]
    (loop [acc [(ffirst edges)], p (peek (first edges)), edges (set (rest edges))]
      (if (seq edges)
        (let [e (some #(if (= p (first %)) %) edges)]
          (if e
            (recur (conj acc (first e)) (second e) (disj edges e))
            (err/throw! "Mesh not manifold")))
        acc)))
  
  (defn ds-dual-faces
    [{:keys [vertices] :as mesh} f-points]
    (->> vertices
         (r/map
          (fn [v v-faces]
            (let [vn (gm/vertex-neighbors* mesh v)]
              (if (< 2 (count vn))
                (->> vn
                     (r/map
                      (fn [n]
                        (let [f1 (f-points (some #(if (= n (:prev %)) (:f %)) v-faces))
                              f2 (f-points (some #(if (= n (:next %)) (:f %)) v-faces))]
                          [(get f1 v v) (get f2 v v)])))
                     (into [])
                     (ds-make-edge-loop))))))
         (r/filter identity)
         (r/foldcat)))
  
  (defn ds-edge-faces
    [{:keys [vertices edges] :as mesh} f-points]
    (->> edges
         (r/map
          (fn [e e-faces]
            (if (= 2 (count e-faces))
              (let [[a b] (seq e)
                    va (vertices a)
                    f1 (f-points (some #(if (= b (:prev %)) (:f %)) va))
                    f2 (f-points (some #(if (= b (:next %)) (:f %)) va))]
                [(f1 a) (f1 b) (f2 b) (f2 a)]))))
         (r/filter identity)
         (r/foldcat)))
  
  (defn custom-doo-sabin
    [& {f* :faces, e* :edges, v* :vertices, :or {f* true, e* true, v* true}}]
    (fn [mesh]
      (let [f-points (ds-face-points mesh)
            f-faces (ds-fp-faces f-points)
            e-faces (if e* (ds-edge-faces mesh f-points))
            v-faces (if v* (ds-dual-faces mesh f-points))]
        (reduce
         gm/add-face
         (gm/gmesh)
         (concat (if f* f-faces) e-faces v-faces)))))
  
  (def doo-sabin (custom-doo-sabin))
#+END_SRC
** Butterfly

- http://graphics.stanford.edu/courses/cs468-10-fall/LectureSlides/10_Subdivision.pdf

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/mesh/subdivision.cljx
  ;; TODO move into tri or gmesh ns?
  (defn other-point-in-tri
    [[fa fb fc] a b]
    (if (= a fa)
      (if (= b fb) fc fb)
      (if (= a fb)
        (if (= b fa) fc fa)
        (if (= b fa) fb fa))))

  ;; TODO move into tri or gmesh ns?
  (defn other-point-in-opp-tri
    [edges a b f]
    (other-point-in-tri (first (disj (edges #{a b}) f)) a b))
  
  (defn bf-edge-points
    [edges omega]
    (let [om2 (* -0.5 omega)]
      (->> edges
           (r/map
            (fn [[e e-faces]]
              (let [[a b] (seq e)
                    [efa efb] (seq e-faces)
                    e1 (g/mix a b)
                    d3 (other-point-in-tri efa a b)
                    d4 (other-point-in-tri efb a b)]
                (if (and d3 d4)
                  (let [d6 (other-point-in-opp-tri edges a d3 efa)
                        d5 (other-point-in-opp-tri edges b d3 efa)
                        d8 (other-point-in-opp-tri edges a d4 efb)
                        d7 (other-point-in-opp-tri edges b d4 efb)]
                    (if (and d5 d6 d7 d8)
                      [e (g/+ e1
                              (g/addm d3 d4 omega)
                              (g/* (g/+ d5 [d6 d7 d8]) om2))]
                      [e e1]))
                  [e e1]))))
           (into {}))))
  
  (defn bf-faces-from-edge-points
    [e-points [a b c]]
    (let [ea (e-points #{a b}), eb (e-points #{b c}), ec (e-points #{c a})]
      [[a ea ec] [b eb ea] [c ec eb] [ea eb ec]]))
  
  (defn butterfly
    ([mesh] (butterfly mesh (/ 8.0)))
    ([mesh omega]
       (let [e-points (bf-edge-points (:edges mesh) omega)]
         (->> (:faces mesh)
              (r/mapcat
               (fn [f] (bf-faces-from-edge-points e-points f)))
              (g/into-mesh (gm/gmesh))))))
#+END_SRC
