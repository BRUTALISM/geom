#+SETUPFILE: setup.org

* thi.ng.geom.gmesh
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.gmesh
    (:require
     [thi.ng.common.data.core :as d]
     [thi.ng.common.math.core :as m]
     [thi.ng.geom.core :as g :refer [vec2 vec3]]
     [thi.ng.geom.triangle :as t]
     [thi.ng.geom.types :as types]
     [clojure.set :as set])
    #+clj
    (:import
     [thi.ng.geom.types AABB Sphere GMesh]))
#+END_SRC
** Helper functions
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  (defn add-face
    [{:keys [vertices edges faces] :as mesh} verts]
    (let [f (mapv #(get (find vertices %) 0 %) verts)]
      (if (and (nil? (get faces f))
               (= (count f) (count (set f))))
        (let [vertices (->> (d/wrap-seq f [(peek f)] [(first f)])
                            (d/successive-nth 3)
                            (reduce
                             (fn [acc [p c n]]
                               (d/index-kv acc c {:next n :prev p :f f}))
                             vertices))
              edges (->> (conj f (first f))
                         (d/successive-nth 2)
                         (reduce
                          (fn [acc pair] (d/index-kv acc (set pair) f))
                          edges))]
          (assoc mesh
            :vertices vertices
            :edges edges
            :faces (conj faces f)))
        mesh)))
  
  (defn vertices-planar?
    [[a b c :as verts]]
    (or (< (count verts) 4)
        (let [n (g/normal3* a b c)]
          (every? #(m/delta= n (g/normal3* %))
                  (d/successive-nth 3 (conj (rest verts) a))))))
  
  (defn face-neighbors-shared-edges
    [{:keys [edges]} f]
    (->> (conj f (first f))
         (d/successive-nth 2)
         (reduce
          (fn [acc pair] (into acc (-> pair set edges (disj f))))
          [])))
  
  (defn vertex-neighbors*
    [{vertices :vertices} v]
    (set/union
     (d/value-set :next vertices v)
     (d/value-set :prev vertices v)))
  
  (defn vertex-valence*
    [mesh v] (inc (count (get (:vertices mesh) v))))
  
  (defn vertex-faces*
    [mesh v] (d/value-set :f (:vertices mesh) v))
  
  (defn remove-vertex*
    [mesh v]
    (if (find (:vertices mesh) v)
      (reduce g/remove-face mesh (vertex-faces* mesh v))
      mesh))
  
  (defn replace-vertex*
    ([mesh v v2]
       (let [vfaces (vertex-faces* mesh v)]
         (-> (reduce g/remove-face mesh vfaces)
             (replace-vertex* v v2 vfaces))))
    ([mesh v v2 faces]
       (reduce #(add-face % (replace {v v2} %2)) mesh faces)))
  
  (defn merge-vertices*
    [mesh a b]
    (if ((vertex-neighbors* mesh a) b)
      (let [fa (vertex-faces* mesh a) fb (vertex-faces* mesh b)
            ab-isec (set/intersection fa fb)
            a-xor (set/difference fa ab-isec)
            b-xor (set/difference fb ab-isec)
            mp (g/mix a b)]
        (-> (reduce g/remove-face mesh (set/union ab-isec a-xor b-xor))
            (replace-vertex* a mp a-xor)
            (replace-vertex* b mp b-xor)))
      mesh))
#+END_SRC
** Constructors
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  (defn gmesh
    "Builds a new 2d mesh data structure and (optionally) populates it with
    the given items (a seq of existing meshes and/or faces). Faces are defined
    as vectors of their vertices."
    ([] (types/map->GMesh
         {:vertices {} :edges {} :fnormals {} :vnormals {}
          :normals #{} :faces #{} :attribs {}})))
  
  (defn into-mesh
    [m faces]
    (reduce add-face m (if (map? faces) (:faces faces) faces)))
  
  (defn saddle
    [s]
    (let [sv (vec3 s)]
      (reduce
       (fn [m [p flags]]
         (into-mesh m (g/as-mesh (thi.ng.geom.types.AABB p s) {:flags flags})))
       (gmesh)
       [[(vec3) :ewsfb]
        [(vec3 0 s 0) :wfb]
        [(vec3 s s 0) :ensfb]
        [(vec3 0 (* s 2) 0) :ewnfb]])))
#+END_SRC
** Tessellation
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  (defn tessellate-face
    [f]
    (condp = (count f)
      3 [f]
      4 (let [[a b c d] f] [[a b c] [a c d]])
      (g/tessellate* (g/centroid* f) f)))
  
  (defn tessellate-face4
    [f]
    (if (<= (count f) 4) [f] (g/tessellate* (g/centroid* f) f)))
  
  (defn tessellate-face1
    [f]
    (if (> (count f) 3)
      (let [[v0 & more] f]
        (map (fn [[a b]] [v0 a b]) (d/successive-nth 2 more)))
      [f]))
  
  (defn map-faces
    "Applies f to all faces of given mesh and adds resulting faces to
    new mesh. Thus f should return a seq of faces. Returns new mesh."
    [f mesh] (into-mesh (gmesh) (mapcat f (:faces mesh))))
#+END_SRC
** Protocol implementations
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  (extend-type thi.ng.geom.types.GMesh
#+END_SRC
*** PArea
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PArea
  (area
   [_] (reduce #(+ % (m/abs (t/area3 %))) 0 (g/tessellate _)))
#+END_SRC
*** TODO PBoundary
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx

#+END_SRC
*** PBounds
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PBounds
  (bounds [_] (g/bounding-box* (keys (:vertices _))))
  (width [_] (g/axis-range* 0 (keys (:vertices _))))
  (height [_] (g/axis-range* 1 (keys (:vertices _))))
  (depth [_] (g/axis-range* 2 (keys (:vertices _))))
#+END_SRC
*** PBoundingSphere
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PBoundingSphere
  (bounding-sphere
   [_] (g/bounding-sphere* (g/centroid _) (g/vertices _)))
#+END_SRC
*** TODO PCenter
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PCenter
  (center [_] _)
  (centroid [_] (g/centroid* (keys (:vertices _))))
#+END_SRC
*** TODO PGraph
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PGraph
  (connected-components
   [_] [_]) ;; TODO
  (edges
   [_] (keys (:edges _)))
  (vertices
   [_] (keys (:vertices _)))
  (vertex-neighbors
   [_ v] (vertex-neighbors* _ v))
  (vertex-valence
   [_ v] (vertex-valence* _ v))
  (remove-vertex
   [_ v] (remove-vertex* _ v))
  (replace-vertex
   [_ v v2] (replace-vertex* _ v v2))
  (merge-vertices
   [_ a b] (merge-vertices* _ a b))
#+END_SRC
*** PMesh
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PMesh
  (add-face
   [_ f] (add-face _ f))
  (faces
   [_] (:faces _))
  (vertex-faces
   [_ v] (vertex-faces* _ v))
  (compute-face-normals
   [_]
   (loop [norms (transient #{}), fnorms (transient {}), faces (:faces _)]
     (if faces
       (let [[a b c :as f] (first faces)
             [norms n] (d/index! norms (g/normal3* a b c))]
         (recur norms (assoc! fnorms f n) (next faces)))
       (assoc _
         :normals (persistent! norms)
         :fnormals (persistent! fnorms)))))
  (compute-vertex-normals
   [{:keys [vertices normals fnormals] :as _}]
   (loop [norms (transient normals), vnorms (transient {}), verts (keys vertices)]
     (if verts
       (let [v (first verts)
             n (->> v
                    (g/vertex-faces _)
                    (map #(get fnormals %))
                    (reduce g/+)
                    (g/normalize))
             [norms n] (d/index! norms n)]
         (recur norms (assoc! vnorms v n) (next verts)))
       (assoc _
         :normals (persistent! norms)
         :vnormals (persistent! vnorms)))))
  (into-mesh
   [_ faces] (into-mesh _ faces))
  (remove-face
   [{:keys [vertices edges faces fnormals vnormals] :as _} f]
   (if (get faces f)
     (loop [verts vertices
            vnorms vnormals
            edges edges
            fedges (d/successive-nth 2 (conj f (first f)))]
       (if fedges
         (let [[a b] (first fedges)
               e #{a b}
               efaces (disj (get edges e) f)
               edges (if (seq efaces)
                       (assoc edges e efaces)
                       (dissoc edges e))
               ve (filter #(not= (:f %) f) (get verts a))]
           (if (seq ve)
             (recur (assoc verts a (into #{} ve)) vnorms edges (next fedges))
             (recur (dissoc verts a) (dissoc vnorms a) edges (next fedges))))
         (assoc _
           :vertices verts
           :vnormals vnorms
           :edges edges
           :faces (disj faces f)
           :fnormals (dissoc fnormals f))))
     _))
#+END_SRC
*** PMeshConvert
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PMeshConvert
  (as-mesh [_] _)
#+END_SRC
*** PTessellate
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PTessellate
  (tessellate
   ([_] (g/tessellate _ {}))
   ([_ {:keys [fn] :or {fn tessellate-face1}}]
      (->> (:faces _) (mapcat fn) (map #(thi.ng.geom.types.Triangle3. %)))))
#+END_SRC
*** TODO PVolume
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  g/PVolume
  (volume [_] 0)
#+END_SRC
*** End of implementation                                          :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/gmesh.cljx
  )
#+END_SRC
