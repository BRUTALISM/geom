#+SETUPFILE: ../../meta/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeomsphere][thi.ng.geom.sphere]]
     - [[#constructor][Constructor]]
     - [[#type-specific-functions][Type specific functions]]
     - [[#protocol-implementations][Protocol implementations]]
         - [[#iarea][IArea]]
         - [[#iboundary][IBoundary]]
         - [[#ibounds][IBounds]]
         - [[#iboundingsphere][IBoundingSphere]]
         - [[#icenter][ICenter]]
         - [[#iclassify][IClassify]]
         - [[#todo-igraph][TODO IGraph]]
         - [[#iintersect][IIntersect]]
         - [[#todo-imeshconvert][TODO IMeshConvert]]
         - [[#iproximity][IProximity]]
         - [[#isample][ISample]]
         - [[#itessellate][ITessellate]]
         - [[#todo-transformations][TODO Transformations]]
             - [[#todo-scale-with-non-uniform-values-should-return-ellipsoid][TODO scale with non-uniform values should return Ellipsoid]]
         - [[#ivolume][IVolume]]
         - [[#end-of-implementation][End of implementation]]
     - [[#namespace-declaration][Namespace declaration]]

* thi.ng.geom.sphere

** Constructor

#+BEGIN_SRC clojure :noweb-ref ctor
  (defn sphere
    ([] (thi.ng.geom.types.Sphere. (vec3) 1.0))
    ([r] (thi.ng.geom.types.Sphere. (vec3) #?(:clj (double r) :cljs r)))
    ([p r] (thi.ng.geom.types.Sphere. (vec3 p) #?(:clj (double r) :cljs r))))
#+END_SRC

** Type specific functions

#+BEGIN_SRC clojure :noweb-ref helpers

#+END_SRC

** Protocol implementations

#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.Sphere
#+END_SRC

*** IArea

#+BEGIN_SRC clojure :noweb-ref impl
  g/IArea
  (area
   [{r :r}] (* 4.0 PI r r))
#+END_SRC

*** IBoundary

#+BEGIN_SRC clojure :noweb-ref impl
  g/IBoundary
  (contains-point?
   [{p :p r :r} q] (<= (g/dist-squared p q) (* r r)))
#+END_SRC

*** IBounds

#+BEGIN_SRC clojure :noweb-ref impl
  g/IBounds
  (bounds
   [_] (thi.ng.geom.types.AABB. (m/- (:p _) (:r _)) (vec3 (* 2 (:r _)))))
  (width  [_] (* 2.0 (:r _)))
  (height [_] (* 2.0 (:r _)))
  (depth  [_] (* 2.0 (:r _)))
#+END_SRC

*** IBoundingSphere

#+BEGIN_SRC clojure :noweb-ref impl
  g/IBoundingSphere
  (bounding-sphere [_] _)
#+END_SRC

*** ICenter

#+BEGIN_SRC clojure :noweb-ref impl
  g/ICenter
  (center
   ([_] (thi.ng.geom.types.Sphere. (vec3) (:r _)))
   ([_ p] (thi.ng.geom.types.Sphere. (vec3 p) (:r _))))
  (centroid [_] (:p _))
#+END_SRC

*** IClassify

#+BEGIN_SRC clojure :noweb-ref impl
  g/IClassify
  (classify-point
   [{p :p r :r} q]
   (m/signum (- (* r r) (g/dist-squared p q)) *eps*))
#+END_SRC

*** TODO IGraph

#+BEGIN_SRC clojure :noweb-ref impl

#+END_SRC

*** IIntersect

If ray intersects sphere, the function will return a 2-element vector
of distances from the ray's start point to the sphere surface. If
either of those distances is negative the intersection point lies in
the opposite ray direction. The actual intersection points can be
computed by passing the distances into the following form:

#+BEGIN_SRC clojure
  ;; dir = ray direction
  ;; p = ray start point
  ;; t = distance
  (m/madd dir t p)
#+END_SRC

If there's no intersection, the function returns =nil=.

#+BEGIN_SRC clojure :noweb-ref impl
  g/IIntersect
  (intersect-ray
   [{p :p r :r} ray]
   (let [[rp dir] (if (map? ray) [(:p ray) (:dir ray)] ray)]
     (isec/intersect-ray-sphere? rp dir p r)))
  (intersect-shape
   [_ s]
   (cond
    (instance? thi.ng.geom.types.AABB s)
    (isec/intersect-aabb-sphere? s _)
    (instance? thi.ng.geom.types.Sphere s)
    (isec/intersect-sphere-sphere? _ s)
    (instance? thi.ng.geom.types.Plane s)
    (isec/intersect-plane-sphere? (:n s) (:w s) (:p _) (:r _))
    :default (err/type-error! "Sphere" s)))
#+END_SRC

*** TODO IMeshConvert

#+BEGIN_SRC clojure :noweb-ref impl
  g/IMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([{[x y z] :p r :r}
     {:keys [mesh res slices stacks attribs] :as opts}]
    (let [res     (or res *resolution*)
          slices  (or slices res)
          stacks  (or stacks res)
          rsl     (m/norm-range slices)
          rst     (m/norm-range stacks)
          st      (#?(:clj double-array :cljs ta/float32) (map #(Math/sin (* TWO_PI %)) rsl))
          ct      (#?(:clj double-array :cljs ta/float32) (map #(Math/cos (* TWO_PI %)) rsl))
          sp      (#?(:clj double-array :cljs ta/float32) (map #(Math/sin (* PI %)) rst))
          cp      (#?(:clj double-array :cljs ta/float32) (map #(Math/cos (* PI %)) rst))
          iu      (/ 1.0 slices)
          iv      (/ 1.0 stacks)
          stacks' (dec stacks)
          fgen    (if attribs
                    (fn [fverts verts fid]
                      (attr/generate-face-attribs
                       fverts fid attribs
                       (merge {:uv (mapv #(vec2 (* iu (first %)) (* iv (nth % 1))) verts)} opts)))
                    (fn [fverts _ _] [fverts]))]
      (loop [acc (transient []), fid 0, i 0, j 0]
        (if (< i slices)
          (let [ii     (inc i)
                jj     (inc j)
                verts  (if (pos? j)
                         (if (< j stacks')
                           [[i j] [ii j] [ii jj] [i jj]]
                           [[i j] [ii j] [i jj]])
                         [[i j] [ii jj] [i jj]])
                fverts (mapv
                        (fn [[u v]]
                          (vec3
                           (+ (mm/mul (aget ct u) (aget sp v) r) x)
                           (mm/madd (aget cp v) r y)
                           (+ (mm/mul (aget st u) (aget sp v) r) z)))
                        verts)]
            (recur (conj! acc (fgen fverts verts fid)) (inc fid) ii j))
          (if (< j stacks')
            (recur acc fid 0 (inc j))
            (g/into (or mesh (bm/basic-mesh)) (persistent! acc))))))))
#+END_SRC

*** IProximity

#+BEGIN_SRC clojure :noweb-ref impl
  g/IProximity
  (closest-point
   [{p :p r :r} q]
   (m/+! (m/normalize (m/- q p) r) p))
#+END_SRC

*** ISample

#+BEGIN_SRC clojure :noweb-ref impl
  g/ISample
  (random-point-inside
   [_]
   (m/+ (:p _) (v/randvec3 (m/random (:r _)))))
  (random-point
   [_]
   (m/+ (:p _) (v/randvec3 (:r _))))
#+END_SRC

*** ITessellate

#+BEGIN_SRC clojure :noweb-ref impl
  g/ITessellate
  (tessellate
   ([_] (g/tessellate _ {}))
   ([_ opts] (g/tessellate (g/as-mesh _ opts))))
#+END_SRC

*** TODO Transformations
**** TODO scale with non-uniform values should return Ellipsoid

#+BEGIN_SRC clojure :noweb-ref impl
  g/IRotate
  (rotate
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-z (:p _) theta) (:r _)))
  g/IRotate3D
  (rotate-x
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-x (:p _) theta) (:r _)))
  (rotate-y
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-y (:p _) theta) (:r _)))
  (rotate-z
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-z (:p _) theta) (:r _)))
  (rotate-around-axis
   [_ axis theta]
   (thi.ng.geom.types.Sphere.
    (g/rotate-around-axis (:p _) axis theta) (:r _)))
  
  g/IScale
  (scale [_ s] (thi.ng.geom.types.Sphere. (m/* (:p _) s) (* (:r _) s)))
  (scale-size [_ s] (thi.ng.geom.types.Sphere. (:p _) (* (:r _) s)))

  g/ITranslate
  (translate [_ t] (thi.ng.geom.types.Sphere. (m/+ (:p _) t) (:r _)))
#+END_SRC

*** IVolume

#+BEGIN_SRC clojure :noweb-ref impl
  g/IVolume
  (volume [{r :r}] (mm/mul (/ 4.0 3.0) PI r r r))
#+END_SRC

*** End of implementation                                          :noexport:

#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC

** Namespace declaration

#+BEGIN_SRC clojure :tangle ../../babel/src/thi/ng/geom/sphere.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.sphere
    #?(:cljs
       (:require-macros [thi.ng.math.macros :as mm]))
    (:require
     [thi.ng.geom.core :as g :refer [*resolution*]]
     [thi.ng.geom.utils :as gu]
     [thi.ng.geom.vector :as v :refer [vec2 vec3]]
     [thi.ng.geom.utils.intersect :as isec]
     [thi.ng.geom.basicmesh :as bm]
     [thi.ng.geom.attribs :as attr]
     [thi.ng.geom.types :as types]
     [thi.ng.xerror.core :as err]
     [thi.ng.math.core :as m :refer [TWO_PI PI *eps*]]
     #?(:clj [thi.ng.math.macros :as mm]
        :cljs [thi.ng.typedarrays.core :as ta]))
    #?(:clj
       (:import
        [thi.ng.geom.types AABB Sphere])))

  <<ctor>>

  <<helpers>>

  <<impl>>
#+END_SRC
