#+SEQ_TODO:       TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:           write(w) update(u) fix(f) verify(v) noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport

* Helper macros
** Matrix operations
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/core.clj :mkdirp yes :padline no
  (ns thi.ng.geom.macros.core
    #+clj  (:require [thi.ng.macromath.core :as mm])
    #+cljs (:require-macros [thi.ng.macromath.core :as mm]))

  (defmacro det-item
    [a b c d, e f g h, i j k l, m n o p]
    `(+ (mm/sub (mm/mul ~a ~b ~c ~d)
             (mm/mul ~e ~f ~g ~h)
             (mm/mul ~i ~j ~k ~l))
        (mm/mul ~m ~n ~o ~p)))
  
  (defmacro inv-item
    [a b c d e f g]
    `(* (mm/msubadd ~a ~b ~c ~d ~e ~f) ~g))
#+END_SRC

** Voxel test
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/voxel.clj :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.macros.voxel)

  (defmacro set-bit-if-index
    [voxels idx mask id]
    `(if (~voxels ~idx) ~id (bit-or ~id ~mask)))
#+END_SRC
