#+SEQ_TODO:       TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:           write(w) update(u) fix(f) verify(v) noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport

* Helper macros
** Math operations
*** Clojure
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/core.clj :mkdirp yes :padline no
  (ns thi.ng.geom.macros.core
    (:require [thi.ng.common.math.macros :refer :all]))
#+END_SRC
*** ClojureScript
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/core_cljs.clj :mkdirp yes :padline no
  (ns thi.ng.geom.macros.core-cljs
    (:require [thi.ng.common.math.macros-cljs :refer :all]))
#+END_SRC
*** High level forms
#+BEGIN_SRC clojure :noweb-ref math-ops
  (defmacro det-item
    [a b c d, e f g h, i j k l, m n o p]
    `(+ (sub (mul ~a ~b ~c ~d)
             (mul ~e ~f ~g ~h)
             (mul ~i ~j ~k ~l))
        (mul ~m ~n ~o ~p)))
  
  (defmacro inv-item
    [a b c d e f g]
    `(* (msubadd ~a ~b ~c ~d ~e ~f) ~g))
#+END_SRC
*** Tangle for CLJ & CLJS                                          :noexport:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/core.clj :noweb yes
  <<math-ops>>
#+END_SRC
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/core_cljs.clj :noweb yes
  <<math-ops>>
#+END_SRC
** Voxel test
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/macros/voxel.clj :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.macros.voxel)

  (defmacro set-bit-if-index
    [voxels idx mask id]
    `(if (~voxels ~idx) ~id (bit-or ~id ~mask)))
#+END_SRC
