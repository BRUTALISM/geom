#+SEQ_TODO:       TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:           write(w) update(u) fix(f) verify(v) noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport

* thi.ng.geom.bezier
** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.bezier
    (:require
     [thi.ng.common.data.core :as d]
     [thi.ng.common.math.core :as m]
     [thi.ng.geom.core :as g :refer [vec2 vec3 *resolution*]]))
#+END_SRC
** The Bernstein polynomial
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  (defn bernstein
    [t]
    (let [it (- 1.0 t) it2 (* it it) t2 (* t t)]
      [(* it it2) (* 3 (* t it2)) (* 3 (* it t2)) (* t t2)]))
#+END_SRC
** Interpolation & curve samplings
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  (defn interpolate
    [[a b c d] t]
    (let [it (- 1.0 t), it2 (* it it), t2 (* t t)]
      (->> (g/* a (* it it2))
           (g/madd b (* 3 (* t it2)))
           (g/madd c (* 3 (* it t2)))
           (g/madd d (* t t2)))))
  
  (defn sample-segment
    [seg res]
    (map #(interpolate seg %) (butlast (m/norm-range res))))
  
  (defn sample-with-res
    [res include-last? points]
    (let [ls (->> points
                  (d/successive-nth 4)
                  (take-nth 3)
                  (mapcat #(sample-segment % res)))]
      (if include-last?
        (concat ls [(last points)])
        ls)))
#+END_SRC
** Automatic curve generation
     The following two functions allow us to compute a bezier curve
     which passes through all given points and automatically computes
     the required control points.
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  (defn- find-cpoints*
    [ctor]
    (fn [tight points]
      (let [np (count points)
            invt (/ 1.0 tight)
            points (vec points)
            c1 (g/* (g/- (points 2) (first points)) tight)
            [bi coeff] (reduce
                        (fn [[bi coeff] i]
                          (let [b (/ -1.0 (+ invt (peek bi)))
                                c (peek coeff)
                                p (get points (dec i))
                                q (get points (inc i))]
                            [(conj bi b)
                             (conj coeff (g/* (g/- q p c) (g/- b)))]))
                        [[0 (- tight)] [(ctor) c1]]
                        (range 2 (dec np)))]
        (reduce
         (fn [delta i]
           (assoc delta i (g/madd (delta (inc i)) (bi i) (coeff i))))
         (vec (repeatedly np ctor))
         (range (- np 2) 0 -1)))))
  
  (defn auto-spline*
    [find-cpoints]
    (fn [tight points]
      (concat
       (->> points
            (find-cpoints tight)
            (d/successive-nth 2)
            (interleave (d/successive-nth 2 points))
            (partition 2)
            (mapcat (fn [[[p q] [dp dq]]] [p (g/+ p dp) (g/- q dq)])))
       [(last points)])))
#+END_SRC
** Concrete implementations for 2D/3D...
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  (def auto-spline2 (auto-spline* (find-cpoints* vec2)))
  (def auto-spline3 (auto-spline* (find-cpoints* vec3)))
#+END_SRC
** TODO Bezier2
*** Protocol implementations
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  (extend-type thi.ng.geom.types.Bezier2
#+END_SRC
**** PGraph
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  g/PGraph
  (vertices
   ([_] (g/vertices _ *resolution*))
   ([{points :points} res]
      (map #(g/point-at* % points) (m/norm-range res))))
  (edges
   ([_] (g/edges* vector (g/vertices _ *resolution*)))
   ([_ res] (g/edges* vector (g/vertices _ res))))
  (vertex-neighbors
   [_ v] (d/neighbors v (:points _)))
  (vertex-valence
   [_ v] (if-let [p (d/neighbors v (:points _))]
              (let [points (:points _)]
                (if (or (= p (first points)) (= p (peek points)))
                  1 2))
              0))
#+END_SRC
**** PProximity
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  g/PProximity
  (closest-point
   [_ p] (g/closest-point* (mapv #(thi.ng.geom.types.Line2. (% 0) (% 1)) (g/edges _)) p))
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/bezier.cljx
  )
#+END_SRC
