#+SETUPFILE: ../../src/setup.org

* thi.ng.geom.line

** Constructors
#+BEGIN_SRC clojure :noweb-ref ctors
  (defn line2
    ([[p q]] (thi.ng.geom.types.Line2. [(vec2 p) (vec2 q)]))
    ([p q] (thi.ng.geom.types.Line2. [(vec2 p) (vec2 q)]))
    ([px py qx qy] (thi.ng.geom.types.Line2. [(vec2 px py) (vec2 qx qy)])))

  (defn line3
    ([[p q]] (thi.ng.geom.types.Line3. [(vec3 p) (vec3 q)]))
    ([p q] (thi.ng.geom.types.Line3. [(vec3 p) (vec3 q)]))
    ([px py qx qy] (thi.ng.geom.types.Line3. [(vec3 px py) (vec3 qx qy)]))
    ([px py pz qx qy qz] (thi.ng.geom.types.Line3. [(vec3 px py pz) (vec3 qx qy qz)])))

  (defn linestrip2
    ([points] (thi.ng.geom.types.LineStrip2. (mapv vec2 points)))
    ([p & more] (thi.ng.geom.types.LineStrip2. (mapv vec2 (cons p more)))))
#+END_SRC

** Shared helper functions

These functions are used for both 2D/3D implementations:

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn closest-point-coeff*
    [p a b]
    (let [d (g/- b a)]
      (/ (g/dot (g/- p a) d) (g/mag-squared d))))

  (defn closest-point*
    [p a b]
    (let [t (closest-point-coeff* p a b)]
      (cond
       (<= t 0.0) a
       (> t 1.0) b
       :default (g/mix a b t))))

  (defn closest-line*
    [a1 b1 a2 b2]
    (let [p43 (g/- b2 a2)]
      (if-not (m/delta= [0 0 0] p43 *eps*)
        (let [p21 (g/- b1 a1)]
          (if-not (m/delta= [0 0 0] p21 *eps*)
            (let [p13 (g/- a1 a2)
                  d1343 (g/dot p13 p43)
                  d4321 (g/dot p43 p21)
                  d1321 (g/dot p13 p21)
                  d4343 (g/dot p43 p43)
                  d2121 (g/dot p21 p21)
                  d (mm/msub d2121 d4343 d4321 d4321)]
              (if (m/delta= 0.0 d *eps*)
                {:type :parallel}
                (let [n (mm/msub d1343 d4321 d1321 d4343)
                      ua (/ n d)
                      ub (/ (mm/madd d4321 ua d1343) d4343)]
                  {:type :intersect
                   :a (g/madd p21 ua a1) :b (g/madd p43 ub a2)
                   :ua ua :ub ub}))))))))

  (defn sample-with-res*
    [a b res include-b?]
    (let [ls (for [t (m/norm-range res)] (g/mix a b t))]
      (if include-b? ls (butlast ls))))

  (defn reflect-on-ray
    [ctor p q rc dir]
    (ctor
     (g/+ rc (g/reflect (g/- p rc) dir))
     (g/+ rc (g/reflect (g/- q rc) dir))))

  (defn reflect-on-line
    [ctor p q rp rq]
    (reflect-on-ray ctor p q (g/mix rp rq) (g/normalize (g/- rq rp))))
#+END_SRC
** Reusable protocol templates for 2d/3d

These templates are used for protocol implementations which only have
minor differences between the 2d/3d versions. Templates with variables
are wrapped in an Emacs Lisp form and will have the variables injected
during code generation. See call sites in [[Line2]] & [[Line3]] further below.

*** PCenter
#+NAME: tpl-center
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
  "g/PCenter
  (center
   ([{[p q] :points}]
    (let [c (g/mix p q)]
      ({{type}}. [(g/- p c) (g/- q c)])))
   ([{[p q] :points} o]
    (let [c (g/- o (g/mix p q))]
      ({{type}}. [(g/+ p c) (g/+ q c)]))))
  (centroid [{p :points}] (g/mix (p 0) (p 1)))"))
#+END_SRC
*** PBounds
#+NAME: tpl-bounds
#+BEGIN_SRC emacs-lisp :noweb yes :var fn="" :results output
  (princ
   (replace-regexp-in-string "{{fn}}" fn
  "g/PBounds
  (bounds [_] ({{fn}} (:points _)))
  (width  [{p :points}] (m/abs (- ((p 0) 0) ((p 1) 0))))
  (height [{p :points}] (m/abs (- ((p 0) 1) ((p 1) 1))))"))
#+END_SRC
*** PCircumference
#+BEGIN_SRC clojure :noweb-ref tpl-circum
  g/PCircumference
  (circumference [{p :points}] (* 2.0 (g/dist (p 0) (p 1))))
#+END_SRC
*** PExtrude
#+BEGIN_SRC clojure :noweb-ref tpl-extrude
  g/PExtrude
  (extrude
   [{points :points :as _}
    {:keys [depth scale offset] :or {depth 1.0 scale 1.0}}]
   (let [tpoints (if (= 1.0 scale) points (:points (g/scale-size _ scale)))
         off (or offset (vec3 0 0 depth))
         a (vec3 (points 0)), b (vec3 (points 1))
         ta (g/+ off (tpoints 0)), tb (g/+ off (tpoints 1))]
     (g/add-face (gm/gmesh) [a b tb ta])))
#+END_SRC
*** PGraph
#+BEGIN_SRC clojure :noweb-ref tpl-graph
  g/PVertexAccess
  (vertices
   ([_] (:points _))
   ([{p :points} res] (sample-with-res* (p 0) (p 1) res true)))
  g/PEdgeAccess
  (edges
   ([_] [(:points _)])
   ([_ res] (d/successive-nth 2 (g/vertices _ res))))
  g/PGraph
  (vertex-neighbors
   [{[p q] :points} v] (condp = v, p q, q p, nil))
  (vertex-valence
   [{p :points} v] (if (or (= v (p 0)) (= v (p 1))) 1 0))
#+END_SRC
*** PMagnitude
#+BEGIN_SRC clojure :noweb-ref tpl-mag
  g/PMagnitude
  (mag [{p :points}] (g/dist (p 0) (p 1)))
  (mag-squared [{p :points}] (g/dist-squared (p 0) (p 1)))
#+END_SRC
*** PNormalize
#+NAME: tpl-normalize
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
  "g/PNormalize
  (normalize
   ([{[p q] :points}]
      (let [d (g/normalize (g/- q p))]
        ({{type}}. [p (g/+ p d)])))
   ([{[p q] :points} n]
      (let [d (g/normalize (g/- q p) n)]
        ({{type}}. [p (g/+ p d)]))))
  (normalized? [_] (m/delta= 1.0 (g/mag-squared _)))"))
#+END_SRC
*** PReflect
#+NAME: tpl-reflect
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :var ctor="" :results output
  (princ
   (replace-regexp-in-string "{{ctor}}" ctor
    (replace-regexp-in-string "{{type}}" type
  "g/PReflect
  (reflect
   [{[p q] :points} r]
   (if (instance? {{type}} r)
     (let [[pr qr] (:points r)] (reflect-on-line {{ctor}} p q pr qr))
     ({{type}}. [(g/reflect p r) (g/reflect q r)])))")))
#+END_SRC
*** PRotate
#+NAME: tpl-rotate
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
  "g/PRotate
  (rotate
   [{p :points} theta]
   ({{type}}. [(g/rotate (p 0) theta) (g/rotate (p 1) theta)]))"))
#+END_SRC
*** PSample
#+BEGIN_SRC clojure :noweb-ref tpl-sample
  g/PSample
  (point-at
   [{p :points} t] (g/mix (p 0) (p 1) t))
  (random-point
   [{p :points}] (g/mix (p 0) (p 1) (m/random)))
  (random-point-inside
   [{p :points}] (g/mix (p 0) (p 1) (m/random)))
  (sample-uniform
   [_ dist include-last?]
   (gu/sample-uniform dist include-last? (:points _)))
#+END_SRC
*** PTransform
#+NAME: tpl-tx
#+BEGIN_SRC emacs-lisp :noweb yes :var type="" :results output
  (princ
   (replace-regexp-in-string "{{type}}" type
  "g/PScale
  (scale
   ([{p :points} s]
    ({{type}}. [(g/* (p 0) s) (g/* (p 1) s)]))
   ([{p :points} sx sy]
    ({{type}}. [(g/* (p 0) sx sy) (g/* (p 1) sx sy)])))
  (scale-size
   [{[p q] :points} s]
   (let [c (g/mix p q)]
     ({{type}}. [(g/madd (g/- p c) s c) (g/madd (g/- q c) s c)])))
  g/PTranslate
  (translate
   [{p :points} t]
   ({{type}}. [(g/+ (p 0) t) (g/+ (p 1) t)]))
  g/PTransform
  (transform
   [{p :points} m]
   ({{type}}.
    [(g/transform-vector m (p 0)) (g/transform-vector m (p 1))]))"))
#+END_SRC

** Line2
*** Protocol implementations
#+BEGIN_SRC clojure :noweb-ref impl2
  (extend-type thi.ng.geom.types.Line2
#+END_SRC
**** PArea
#+BEGIN_SRC clojure :noweb-ref impl2
  g/PArea
  (area [_] 0)
#+END_SRC
**** PBoundary
#+BEGIN_SRC clojure :noweb-ref impl2
  g/PBoundary
  (contains-point?
   [{p :points} q] (m/in-range? 0.0 1.0 (closest-point-coeff* (vec2 q) (p 0) (p 1))))
#+END_SRC
**** PBounds                                                       :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-bounds(fn="tu/bounding-rect")>>
  (depth  [_] 0)
#+END_SRC
**** PBoundingCircle
#+BEGIN_SRC clojure :noweb-ref impl2
  g/PBoundingCircle
  (bounding-circle
   [{[p q] :points}]
   (thi.ng.geom.types.Circle2. (g/mix p q) (* 0.5 (g/dist p q))))
#+END_SRC
**** PCenter                                                       :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-center(type="thi.ng.geom.types.Line2")>>
#+END_SRC
**** PCircumference                                                :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-circum>>
#+END_SRC
**** PClassify
#+BEGIN_SRC clojure :noweb-ref impl2
  g/PClassify
  (classify-point
   [{[p q] :points} v]
   (m/signum (g/dot (g/- (vec2 v) p) (g/normal (g/- q p))) *eps*))
#+END_SRC
**** PExtrude                                                           :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-extrude>>
#+END_SRC
**** PGraph                                                        :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-graph>>
#+END_SRC
**** PIntersect
#+BEGIN_SRC clojure :noweb-ref impl2
  g/PIntersect
  (intersect-line
   [{[[px1 py1 :as p] [qx1 qy1 :as q]] :points :as _}
    {[[px2 py2 :as lp] [qx2 qy2 :as lq]] :points}]
   (let [dx1 (- qx1 px1), dy1 (- qy1 py1)
         dx2 (- qx2 px2), dy2 (- qy2 py2)
         dx12 (- px1 px2), dy12 (- py1 py2)
         denom (mm/msub dy2 dx1 dx2 dy1)
         na (mm/msub dx2 dy12 dy2 dx12)
         nb (mm/msub dx1 dy12 dy1 dx12)]
     (if-not (zero? denom)
       (let [ua (/ na denom)
             ub (/ nb denom)
             ipos (g/mix p q ua)]
         (if (and (>= ua 0.0) (<= ua 1.0) (>= ub 0.0) (<= ub 1.0))
           {:type :intersect :p ipos :ua ua :ub ub}
           {:type :intersect-outside :p ipos :ua ua :ub ub}))
       (if (and (zero? na) (zero? nb))
         (let [ip (g/closest-point _ lp)
               iq (g/closest-point _ lq)]
           (if (or (m/delta= ip lp) (m/delta= iq lq))
             {:type :coincident :p ip :q iq}
             {:type :coincident-no-intersect :p ip :q iq}))
         {:type :parallel}))))
#+END_SRC
**** PMagnitude                                                    :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-mag>>
#+END_SRC
**** PNormalize                                                    :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-normalize(type="thi.ng.geom.types.Line2")>>
#+END_SRC
**** PProximity
#+BEGIN_SRC clojure :noweb-ref impl2
  g/PProximity
  (closest-point
   [{p :points} q] (closest-point* (vec2 q) (p 0) (p 1)))
#+END_SRC
**** PReflect                                                      :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-reflect(type="thi.ng.geom.types.Line2", ctor="line2")>>
#+END_SRC
**** PSample                                                       :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-sample>>
#+END_SRC
**** PTransform                                                    :template:
#+BEGIN_SRC clojure :noweb-ref impl2 :noweb yes
  <<tpl-rotate(type="thi.ng.geom.types.Line2")>>
  <<tpl-tx(type="thi.ng.geom.types.Line2")>>
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :noweb-ref impl2
  )
#+END_SRC
** Line3
*** Protocol implementations
#+BEGIN_SRC clojure :noweb-ref impl3
  (extend-type thi.ng.geom.types.Line3
#+END_SRC
**** PArea
#+BEGIN_SRC clojure :noweb-ref impl3
  g/PArea
  (area [_] 0)
#+END_SRC
**** TODO PBoundary
#+BEGIN_SRC clojure :noweb-ref impl3
  g/PClassify
  (classify-point
   [{p :points} p] nil) ; TODO
  g/PProximity
  (closest-point
   [{p :points} q] (closest-point* (vec3 q) (p 0) (p 1)))
  g/PBoundary
  (contains-point?
   [{p :points} q] (m/in-range? 0.0 1.0 (closest-point-coeff* (vec3 q) (p 0) (p 1))))
#+END_SRC
**** PBounds                                                       :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-bounds(fn="tu/bounding-box")>>
  (depth  [{p :points}] (m/abs (- ((p 0) 2) ((p 1) 2))))
#+END_SRC
**** PBoundingSphere
#+BEGIN_SRC clojure :noweb-ref impl3
  g/PBoundingSphere
  (bounding-sphere
   [{[p q] :points}]
   (tu/bounding-sphere (g/mix p q) (* 0.5 (g/dist p q))))
#+END_SRC
**** PCenter                                                       :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-center(type="thi.ng.geom.types.Line3")>>
#+END_SRC
**** PCircumference                                                :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-circum>>
#+END_SRC
**** PExtrude                                                           :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-extrude>>
#+END_SRC
**** PGraph                                                        :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-graph>>
#+END_SRC
**** TODO PIntersect
#+BEGIN_SRC clojure :noweb-ref impl3
  g/PIntersect
  (intersect-line
   [{[a b] :points} l]
   (let [[c d] (if (sequential? l) l (:points l))]
     (closest-line* a b c d)))
  (intersect-ray [_ r])
  (intersect-shape [_ s])
#+END_SRC
**** PMagnitude                                                    :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-mag>>
#+END_SRC
**** PNormalize                                                    :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-normalize(type="thi.ng.geom.types.Line3")>>
#+END_SRC
**** PReflect                                               :verify:template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-reflect(type="thi.ng.geom.types.Line3", ctor="line3")>>
#+END_SRC
**** PSample                                                       :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  <<tpl-sample>>
#+END_SRC
**** PTransform                                                    :template:
#+BEGIN_SRC clojure :noweb-ref impl3 :noweb yes
  g/PRotate3D
  (rotate-x
   [{p :points} theta]
   (thi.ng.geom.types.Line3. [(g/rotate-x (p 0) theta) (g/rotate-x (p 1) theta)]))
  (rotate-y
   [{p :points} theta]
   (thi.ng.geom.types.Line3. [(g/rotate-y (p 0) theta) (g/rotate-y (p 1) theta)]))
  (rotate-z
   [{p :points} theta]
   (thi.ng.geom.types.Line3. [(g/rotate-z (p 0) theta) (g/rotate-z (p 1) theta)]))
  (rotate-around-axis
   [{p :points} axis theta]
   (thi.ng.geom.types.Line3.
    [(g/rotate-around-axis (p 0) axis theta)
     (g/rotate-around-axis (p 1) axis theta)]))
  <<tpl-rotate(type="thi.ng.geom.types.Line3")>>
  <<tpl-tx(type="thi.ng.geom.types.Line3")>>
#+END_SRC
**** PVolume
#+BEGIN_SRC clojure :noweb-ref impl3
  g/PVolume
  (volume [_] 0.0)
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :noweb-ref impl3
  )
#+END_SRC
** TODO LineStrip2
*** Protocol implementations
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  (extend-type thi.ng.geom.types.LineStrip2
#+END_SRC
**** PArea
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PArea
  (area [_] 0)
#+END_SRC
**** TODO PBoundary
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PBoundary
  (classify-point [_ v])
  g/PProximity
  (closest-point [_ a])
  g/PBoundary
  (contains-point? [_ a])
#+END_SRC
**** PBounds
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PBounds
  (bounds [_] (tu/bounding-rect (:points _)))
  (width [_] (gu/axis-range 0 (:points _)))
  (height [_] (gu/axis-range 1 (:points _)))
  (depth [_] 0)
#+END_SRC
**** PBoundingCircle
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PBoundingCircle
  (bounding-circle
   [_] (tu/bounding-circle (g/centroid _) (:points _)))
#+END_SRC
**** PCenter
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PCenter
  (center
   ([_] (g/translate _ (g/- (g/centroid _))))
   ([_ o] (g/translate _ (g/- (vec2 o) (g/centroid _)))))
  (centroid [_] (gu/centroid (:points _)))
#+END_SRC
**** PCircumference
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PCircumference
  (circumference
   [_] (* 2.0 (g/mag _)))
#+END_SRC
**** PExtrude                                                        :verify:
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PExtrude
  (extrude
   [{points :points :as _}
    {:keys [depth scale] :or {depth 1.0 scale 1.0}}]
   (let [tpoints (if (= 1.0 scale) points (:points (g/scale-size _ scale)))
         off (vec3 0 0 depth)
         bottom (map vec3 points)
         top (map #(g/+ off %) tpoints)]
     (gm/into-mesh
      (gm/gmesh)
      (mapcat
       (fn [[a1 a2] [b1 b2]] [[a1 b1 b2 a2]])
       (d/successive-nth 2 bottom)
       (d/successive-nth 2 top)))))
#+END_SRC
**** TODO PGraph                                                     :verify:
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PVertexAccess
  (vertices
   ([_] (:points _))
   ([{points :points} res]
      (map #(gu/point-at % points) (m/norm-range res))))
  g/PEdgeAccess
  (edges
   ([_] (d/successive-nth 2 (:points _)))
   ([_ res] (d/successive-nth 2 (g/vertices _ res))))
  g/PGraph
  (vertex-neighbors
   [_ v] (d/neighbors v (:points _)))
  (vertex-valence
   [{points :points} v]
   (if-let [p (d/neighbors v points)]
     (if (or (= p (first points)) (= p (peek points)))
       1 2)
     0))
#+END_SRC
**** TODO PIntersect
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PIntersect
  (intersect-line [_ l])
#+END_SRC
**** PMagnitude
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PMagnitude
  (mag
   [_] (d/reduce-pairs + g/dist (:points _)))
  (mag-squared
   [_] (d/reduce-pairs + g/dist-squared (:points _)))
#+END_SRC
**** TODO PReflect
***** TODO add support for reflect-on-line
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PReflect
  (reflect
   [_ r]
   (thi.ng.geom.types.LineStrip2. (mapv #(g/reflect % r) (:points _))))
#+END_SRC
**** PSample
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PSample
  (point-at
   [_ t] (gu/point-at t (:points _) nil))
  (random-point
   [_] (gu/point-at (m/random) (:points _) nil))
  (random-point-inside
   [_] (g/random-point _))
  (sample-uniform
   [_ udist include-last?]
   (gu/sample-uniform udist include-last? (:points _)))
#+END_SRC
**** TODO PTransform
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  g/PRotate
  (rotate
   [_ theta]
   (thi.ng.geom.types.LineStrip2. (mapv #(g/rotate % theta) (:points _))))
  g/PScale
  (scale
   ([_ s]
      (thi.ng.geom.types.LineStrip2. (mapv #(g/* % s) (:points _))))
   ([_ sx sy]
      (thi.ng.geom.types.LineStrip2. (mapv #(g/* % sx sy) (:points _)))))
  (scale-size
   [_ s]
   (thi.ng.geom.types.LineStrip2. (gu/scale-size s (:points _))))
  g/PTranslate
  (translate
   [_ t]
   (thi.ng.geom.types.LineStrip2. (mapv #(g/+ % t) (:points _))))
  g/PTransform
  (transform
   [_ m]
   (thi.ng.geom.types.LineStrip2. (mapv #(g/transform-vector m %) (:points _))))
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :noweb-ref impl-ls2
  )
#+END_SRC

** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/line.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.line
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.types :as types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.common.data.core :as d]
     [thi.ng.common.math.core :as m :refer [*eps*]]
     ,#+clj [thi.ng.macromath.core :as mm])
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    ,#+clj
    (:import
     [thi.ng.geom.types Circle2 Line2 Line3 LineStrip2]))

  <<ctors>>

  <<helpers>>

  <<impl2>>

  <<impl3>>

  <<impl-ls2>>
#+END_SRC

