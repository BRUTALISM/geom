#+SETUPFILE: ../../src/setup.org

* thi.ng.geom.sphere
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.sphere
    #+cljs (:require-macros [thi.ng.macromath.core :as mm])
    (:require
     [thi.ng.geom.core :as g :refer [*resolution*]]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :as v :refer [vec3]]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.types :as types]
     [thi.ng.common.math.core :as m :refer [TWO_PI PI *eps*]]
     ,#+clj [thi.ng.macromath.core :as mm])
    ,#+clj
    (:import
     [thi.ng.geom.types AABB Sphere]))
#+END_SRC
** Constructor
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  (defn sphere
    ([] (thi.ng.geom.types.Sphere. (vec3) 1.0))
    ([r] (thi.ng.geom.types.Sphere. (vec3) #+clj (double r) #+cljs r))
    ([p r] (thi.ng.geom.types.Sphere. (vec3 p) #+clj (double r) #+cljs r)))
#+END_SRC
** Type specific functions
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx

#+END_SRC
** Protocol implementations
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  (extend-type thi.ng.geom.types.Sphere
#+END_SRC
*** PArea
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PArea
  (area
   [{r :r}] (* 4.0 PI r r))
#+END_SRC
*** PBoundary
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PBoundary
  (contains-point?
   [{p :p r :r} q] (<= (g/dist-squared p q) (* r r)))
#+END_SRC
*** PBounds
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PBounds
  (bounds
   [_] (thi.ng.geom.types.AABB. (g/- (:p _) (:r _)) (vec3 (* 2 (:r _)))))
  (width  [_] (* 2.0 (:r _)))
  (height [_] (* 2.0 (:r _)))
  (depth  [_] (* 2.0 (:r _)))
#+END_SRC
*** PBoundingSphere
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PBoundingSphere
  (bounding-sphere [_] _)
#+END_SRC
*** PCenter
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PCenter
  (center
   ([_] (thi.ng.geom.types.Sphere. (vec3) (:r _)))
   ([_ p] (thi.ng.geom.types.Sphere. (vec3 p) (:r _))))
  (centroid [_] (:p _))
#+END_SRC
*** PClassify
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PClassify
  (classify-point
   [{p :p r :r} q]
   (m/signum (- (* r r) (g/dist-squared p q)) *eps*))
#+END_SRC
*** TODO PGraph
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx

#+END_SRC
*** PIntersect

If ray intersects sphere, the function will return a 2-element vector
of distances from the ray's start point to the sphere surface. If
either of those distances is negative the intersection point lies in
the opposite ray direction. The actual intersection points can be
computed by passing the distances into the following form:

#+BEGIN_SRC clojure
  ;; dir = ray direction
  ;; p = ray start point
  ;; t = distance
  (g/madd dir t p)
#+END_SRC

If there's no intersection, the function returns =nil=.

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PIntersect
  (intersect-ray
   [{p :p r :r} {rp :p dir :dir}]
   (let [q (g/- p rp)
         ds (g/mag-squared q)
         v (- (g/dot q dir))
         d (mm/msub r r (- ds (* v v)))]
     (if (>= d 0.0)
       (let [d (Math/sqrt d)
             a (+ v d)
             b (- v d)]
         (if-not (and (< a 0) (< b 0))
           (if (and (> a 0) (> b 0))
             (if (> a b) [b a] [a b])
             (if (> b 0) [b a] [a b]))
           [a b])))))
#+END_SRC
*** TODO PMeshConvert
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([{[x y z] :p r :r} {:keys [mesh res slices stacks] :or {res *resolution*}}]
      (let [slices (or slices res), stacks (or stacks res)
            range-u (range slices), range-v (range stacks)]
        (->> (for [i range-u, j range-v
                   :let [u (/ i slices)
                         v (/ j stacks)
                         u1 (/ (inc i) slices)
                         v1 (/ (inc j) stacks)
                         verts [[u v]]
                         verts (if (pos? j) (conj verts [u1 v]) verts)
                         verts (if (< j (dec stacks)) (conj verts [u1 v1]) verts)]]
               (conj verts [u v1]))
             (map
              (fn [verts]
                (map
                 (fn [[u v]]
                   (let [theta (* TWO_PI u) ;; FIXME optimize trig
                         phi (* PI v)
                         st (Math/sin theta) ct (Math/cos theta)
                         sp (Math/sin phi) cp (Math/cos phi)]
                     (vec3
                      (+ (mm/mul ct sp r) x)
                      (mm/madd cp r y)
                      (+ (mm/mul st sp r) z))))
                 verts)))
             (g/into (or mesh (gm/gmesh)))))))
#+END_SRC
*** PProximity
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PProximity
  (closest-point
   [{p :p r :r} q]
   (g/+ p (g/normalize (g/- q p) r)))
#+END_SRC
*** PSample
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PSample
  (random-point-inside
   [_]
   (g/+ (:p _) (v/randvec3 (m/random (:r _)))))
  (random-point
   [_]
   (g/+ (:p _) (v/randvec3 (:r _))))
#+END_SRC
*** PTessellate
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PTessellate
  (tessellate
   [_] (g/tessellate _ {}))
  (tessellate
   [_ opts] (g/tessellate (g/as-mesh _ opts)))
#+END_SRC

*** TODO Transformations
**** TODO scale with non-uniform values should return Ellipsoid
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PRotate
  (rotate
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-z (:p _) theta) (:r _)))
  g/PRotate3D
  (rotate-x
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-x (:p _) theta) (:r _)))
  (rotate-y
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-y (:p _) theta) (:r _)))
  (rotate-z
   [_ theta] (thi.ng.geom.types.Sphere. (g/rotate-z (:p _) theta) (:r _)))
  (rotate-around-axis
   [_ axis theta]
   (thi.ng.geom.types.Sphere.
    (g/rotate-around-axis (:p _) axis theta) (:r _)))
  
  g/PScale
  (scale [_ s] (thi.ng.geom.types.Sphere. (g/* (:p _) s) (* (:r _) s)))
  (scale-size [_ s] (thi.ng.geom.types.Sphere. (:p _) (* (:r _) s)))

  g/PTranslate
  (translate [_ t] (thi.ng.geom.types.Sphere. (g/+ (:p _) t) (:r _)))
#+END_SRC
*** PVolume
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  g/PVolume
  (volume [{r :r}] (mm/mul (/ 4.0 3.0) PI r r r))
#+END_SRC
*** End of implementation                                          :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/sphere.cljx
  )
#+END_SRC


