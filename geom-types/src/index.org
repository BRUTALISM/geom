#+SETUPFILE: ../../src/setup.org
#+TITLE: thi.ng/geom-types

* About the project

** Overview

This is a sub-project of [[file:../../src/index.org][thi.ng/geom]]. It contains a large collection
of 2D/3D geometric entities, each implementing a large number of
[[file:../../geom-core/src/core.org][core protocols]].

*** Geometric entities

| *2D*           | *3D*                      |
|----------------+---------------------------|
| Line2          | Line3                     |
| LineStrip2     | LineStrip3 (TBD)          |
| Bezier2        | Bezier3 (TBD)             |
| Circle2        | Circle3 (TBD)             |
|                | Sphere                    |
| Ellipse2 (TBD) | Ellipsoid (TBD)           |
| Rect2          | AABB                      |
| Quad2 (TBD)    | Quad3                     |
|                | Tetrahedron               |
| Triangle2      | Triangle3                 |
| Polygon2       | Polygon3 (TBD)            |
| Path2          | Path3 (TBD)               |
|                | Plane                     |
|                | GMesh                     |

Once the protocol API is finalized an overview table/graph will show
which types implement which protocols. For now please consult the
source code to see which operations are supported.

*** Geometry operations

In addition to these types, this module also implements these common
operations:

- Automatic spline generation from set of points
- Basic SVG path parsing
- 2D Delaunay triangulation
- 2D convex hull
- Shape extrusion as solid or walled mesh
- Tesselation of simple 2D polygons
- Insetting of simple 2D polygons & 3D convex/planar quads
- Sutherland-Hodgeman clipping of 2D polygons
- Entity area, circumference & volume calculations
- Entity intersection checks (vs. line, ray, shape)
- Entity to mesh conversion (w/ many options)
- Access entities as graph-like structures (vertices/edges)
- Entity sampling (at fixed resolution or uniform distance)
- Entity subdivision (only lines, rects, quads, tetrahedrons)
- Subdivision meshes (Catmull-Clark, Doo-Sabin, Butterfly)
- 3D Boolean/CSG operations on meshes (union, difference, intersection)
- 3D geometry export (PLY, STL, OBJ, OFF formats)

** Status

ALPHA quality, in active development.

** Building & testing this project

Please see the [[file:../../src/index.org][parent project]] for further information.

** Injected properties                                             :noexport:

This template uses shared project configuration defined in [[file:../../src/config.org][config.org]].
Module specific settings are defined below:

#+BEGIN_SRC clojure :exports none :noweb-ref project-name
thi.ng/geom-types
#+END_SRC

#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/geom-types-<<conf-version>>.js
#+END_SRC

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*      | *Tagged Github URL*                       |
|-----------+------------+--------------------+-------------------------+-------------------------------------------|
|     0.2.0 | 2014-03-10 | 1st public release | =[thi.ng/geom "0.2.0"]= | https://github.com/thi-ng/geom/tree/0.2.0 |

** Contributors

| *Name*          | *Role*                          | *Website*           |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://postspectacular.com][postspectacular.com]] |
|                 |                                 | [[http://thi.ng][thi.ng]]              |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [<<project-name>> "<<conf-version>>"]
#+END_SRC

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject <<project-name>> "<<conf-version>>"
    :description  "thi.ng geometry kit - types module"
    :url          "<<conf-project-url>>"
    :license      {:name "Apache Software License"
                   :url "http://www.apache.org/licenses/LICENSE-2.0"
                   :distribution :repo}
    :scm          {:name "git"
                   :url  "<<conf-project-url>>"}

    :min-lein-version "2.4.0"

    :dependencies [<<dep-clj>>
                   <<dep-geom-core>>]

    :source-paths ["src/cljx"]
    :test-paths   ["<<conf-gen-test-path>>"]

    :profiles     {:dev {:dependencies [<<dep-cljs>>
                                        <<dep-criterium>>]
                         :plugins      [<<dep-cljx>>
                                        <<dep-cljsbuild>>
                                        <<dep-cljs-test>>]
                         :global-vars {*warn-on-reflection* true}
                         :jvm-opts ^:replace []
                         :auto-clean false
                         :prep-tasks [["cljx" "once"] "javac" "compile"]
                         :aliases {"cleantest" ["do" "clean" ["test" ":all"] ["cljsbuild" "test"]]}}}

    :cljx         {:builds [{:source-paths ["src/cljx"]
                             :output-path "<<conf-gen-source-path>>"
                             :rules :clj}
                            {:source-paths ["src/cljx"]
                             :output-path "<<conf-gen-source-path>>"
                             :rules :cljs}
                            {:source-paths ["test/cljx"]
                             :output-path "<<conf-gen-test-path>>"
                             :rules :clj}
                            {:source-paths ["test/cljx"]
                             :output-path "<<conf-gen-test-path>>"
                             :rules :cljs}]}

    :cljsbuild    {:builds [{:source-paths ["<<conf-gen-source-path>>" "<<conf-gen-test-path>>"]
                             :id "simple"
                             :compiler {:output-to "<<cljs-artefact-path>>"
                                        :optimizations :whitespace
                                        :pretty-print true}}]
                   :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer {:id "toxi"}
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC

** Accessing library version during runtime

The autogenerated namespace =thi.ng.geom.types.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use 'thi.ng.geom.types.version)
  
  (prn version)
  ; "<<conf-version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/types/version.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.types.version)
  (def version "<<conf-version>>")
#+END_SRC

* Modules

*** Note for Github users

The following sections contain links to project modules, but are not
visibile when reading this file on Github. Please navigate to the
source files via the normal [[https://github.com/thi-ng/geom/tree/master/geom-types/][GH repo browser]].

** Type definitions

#+INCLUDE: "types.org"             :minlevel 2

* Tests

#+INCLUDE: "../test/protocols.org" :minlevel 2
