#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#namespace-thinggeommeshface][Namespace: thi.ng.geom.meshface]]
     - [[#meshface][MeshFace]]
     - [[#indexedmeshface][IndexedMeshFace]]
     - [[#helpers][Helpers]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Namespace: thi.ng.geom.meshface

** MeshFace

#+BEGIN_SRC clojure :noweb-ref plain
  (deftype MeshFace [vertices]
    g/PVertexAccess
    (vertices [_ _] vertices)
    g/PAttributeAccess
    (attribs [_ _] nil)
    g/PRawAccess
    (raw [_ _] [vertices])
    Object
    (toString [_]
      (str \[ vertices \])))
#+END_SRC

** IndexedMeshFace

#+BEGIN_SRC clojure :noweb-ref plain
  (deftype IndexedMeshFace [vertices attribs]
    g/PVertexAccess
    (vertices [_ mesh]
      (let [idx (-> mesh :vertices :id->v)]
        (mapv #(get idx %) vertices)))
    g/PAttributeAccess
    (attribs [_ mesh]
      (let [mattr (:attribs mesh)]
        (reduce-kv
         (fn [acc k v]
           (let [idx (-> mattr k :id->v)]
             (assoc acc k (if (sequential? v) (mapv idx v) (idx v)))))
         {} attribs)))
    (attribs [_ mesh attr]
      (let [idx (-> mesh :attribs attr :id->v)
            aval (attribs attr)]
        (if (sequential? aval) (mapv idx attribs) (idx aval))))
    g/PRawAccess
    (raw [_ mesh]
      [(g/vertices _ mesh) (g/attribs _ mesh)])
    Object
    (toString [_]
      (str \[ vertices \space attribs \])))
#+END_SRC

** Helpers

#+BEGIN_SRC clojure :noweb-ref helpers
  (defn xf-face-verts
    [mesh] (map #(first (g/raw % mesh))))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/meshface.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.meshface
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]))

  <<helpers>>

  <<plain>>

  <<indexed>>
#+END_SRC
