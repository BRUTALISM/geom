#+SETUPFILE: ../../src/setup.org

* thi.ng.geom.box

** Constructors
#+BEGIN_SRC clojure :noweb-ref ctors
  (defn box
    ([a b c d e f g h]
       (thi.ng.geom.types.Box. (mapv vec3 [a b c d e f g h])))
    ([size-or-points]
       (if (number? size-or-points)
         (box (vec3) size-or-points)
         (if (== 8 (count size-or-points))
           (thi.ng.geom.types.Box. (mapv vec3 size-or-points))
           (err/illegal-arg!
            "wrong number of points, expected 8, but got"
            (count size-or-points)))))
    ([o size]
       (let [a (vec3 o)
             [b c d e f g h] (map #(g/madd (vec3 %) size a)
                                  [[0 0 1] [1 0 1] [1 0 0]
                                   [0 1 0] [0 1 1] [1 1 1] [1 1 0]])]
         (thi.ng.geom.types.Box. [a b c d e f g h]))))
#+END_SRC

** Type specific functions
#+BEGIN_SRC clojure :noweb-ref helpers
  (defn unmap-uvw
    "Takes a seq of 8 points defining a box and vector of normalized
    u,v,w coordinates. Applies trilinear interpolation to compute point
    within the box:
    u is coord along AD/BC edge, v along AE/BF, w along AB/DC."
    [[a b c d e f g h] [u v w]]
    (g/mix (g/mix a d e h u v) (g/mix b c f g u v) w))
#+END_SRC

** Protocol implementations

#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.Box
#+END_SRC

*** PArea                                                            :verify:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PArea
  (area
   [_]
   (->> (g/tessellate _)
        (map #(apply gu/tri-area3 %))
        (reduce +)))
#+END_SRC

*** PBounds                                                          :verify:
#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  <<lob-geom-bounds(fn="tu/bounding-box", depth="yes")>>
#+END_SRC

*** PBoundingSphere                                                  :verify:
#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  <<lob-geom-bsphere>>
#+END_SRC

*** PBoundary                                                           :fix:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundary
  (contains-point?
   [_ p] (>= (g/classify-point _ p) 0))
#+END_SRC

*** PCenter                                                          :verify:
#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  <<lob-geom-center(type="thi.ng.geom.types.Box", vtype="vec3")>>
  (centroid
   [_] (gu/centroid (:points _)))
#+END_SRC

*** TODO PClassify                                                      :fix:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PClassify
  (classify-point
   [_ p])
#+END_SRC

*** PFaceAccess                                                      :verify:

Faces are always returned in this order: east, west, north, south,
front, back - assuming the vertex order given in the diagram for the
[[PGraph]] implementation below.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PFaceAccess
  (faces
   [_]
   (let [[a b c d e f g h] (:points _)]
     [[c d h g]
      [a b f e]
      [e f g h]
      [a d c b]
      [b c g f]
      [a e h d]]))
#+END_SRC

*** PGraph                                                           :verify:

  : e +----+ h
  :   |\   :\
  :   |f+----+ g
  :   | |  : | 
  : a +-|--+d|
  :    \|   \|
  :   b +----+ c

#+BEGIN_SRC clojure :noweb-ref impl
  g/PGraph
  (vertices
   [_] (:points _))
  (edges
   [_]
   (let [[a b c d e f g h] (:points _)]
     [[a b] [b c] [c d] [d a] ;; bottom
      [e f] [f g] [g h] [h e] ;; top
      [a e] [b f]             ;; left
      [c g] [d h]             ;; right
      ]))
#+END_SRC

*** TODO PIntersect                                                     :fix:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PIntersect
  (intersect-shape
   [_ s])
#+END_SRC

*** TODO PMeshConvert                                                :verify:
#+BEGIN_SRC clojure :noweb-ref excl
  g/PMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([_ {:keys [flags] :or {flags "nsewfb"}}]
      (let [[a b c d e f g h] (g/vertices _)
            [tp bt rt lf fr bk] (d/demunge-flags-seq flags "nsewfb")]
        (->> [(if fr [b c g f])
              (if bk [a e h d])
              (if lf [a b f e])
              (if rt [c d h g])
              (if tp [e f g h])
              (if bt [a d c b])]
             (filter identity)
             (gm/into-mesh (gm/gmesh))))))
#+END_SRC

*** TODO PProximity                                                     :fix:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PProximity
  (closest-point [_ p] nil)
#+END_SRC

*** TODO PSample                                                        :fix:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PSample
  (random-point-inside
   [{p :p size :size}]
   (let [[x1 y1 z1] p
         [x2 y2 z2] (g/+ p size)]
     (vec3 (m/random x1 x2) (m/random y1 y2) (m/random z1 z2))))
  (random-point
   [{p :p size :size}]
   (let [[x1 y1 z1] p
         [x2 y2 z2] (g/+ p size)
         id (int (m/random 6))]
     (cond
      (< id 2) (vec3 (if (zero? id) x1 x2) (m/random y1 y2) (m/random z1 z2))
      (< id 4) (vec3 (m/random x1 x2) (if (= 2 id) y1 y2) (m/random z1 z2))
      :default (vec3 (m/random x1 x2) (m/random y1 y2) (if (= 4 id) z1 z2)))))
#+END_SRC

*** PSubdivide                                                       :verify:

An Box can be subdivided into smaller ones, i.e. to create a seq of
uniform grid cells. The following options can be given as a 2nd
argument map:

| Key       | Description                                                          | Default |
|-----------+----------------------------------------------------------------------+---------|
| =:num=    | number of cols/rows/slices the box will be uniformly subdivided into |       1 |
| =:cols=   | number of times the box will be subdivided along the X-axis          |       1 |
| =:rows=   | number of times the box will be subdivided along the Y-axis          |       1 |
| =:slices= | number of times the box will be subdivided along the Z-axis          |       1 |

When =:num= is given, the resulting boxes will retain the aspect ratio
of the original. If specified, =:cols=, =:rows= and =:slices= will
take precedence over =:num=, but the latter will be used as default
for missing args. Boxes are returned as a lazyseq starting from the
first vertex of the original with inner sorting over XYZ.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSubdivide
  (subdivide
   ([_] (g/subdivide _ {}))
   ([{points :points} {:keys [num cols rows slices] :or {num 1}}]
      (let [ru (d/successive-nth 2 (m/norm-range (or cols num)))
            rv (d/successive-nth 2 (m/norm-range (or rows num)))
            rw (d/successive-nth 2 (m/norm-range (or slices num)))
            map-p (fn [p]
                    (->> (unmap-uvw points p)
                         (map #(m/roundto % *eps*))
                         (vec3)))]
        (for [[w1 w2] rw, [v1 v2] rv, [u1 u2] ru]
          (thi.ng.geom.types.Box.
           (mapv map-p [[u1 v1 w1] [u1 v1 w2] [u2 v1 w2] [u2 v1 w1]
                        [u1 v2 w1] [u1 v2 w2] [u2 v2 w2] [u2 v2 w1]]))))))
#+END_SRC

*** PTessellate                                                      :verify:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PTessellate
  (tessellate
   ([_] (g/tessellate _ {}))
   ([_ {f :fn :or {f gu/tessellate-3} :as opts}]
      (->> (if (some #{:num :cols :rows :slices} (keys opts))
             (g/subdivide _ opts)
             [_])
           (mapcat g/faces)
           (mapcat f))))
#+END_SRC

*** Transformations                                                  :verify:

#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  g/PRotate
  (rotate
   [_ theta] (g/rotate-z _ theta))
  <<lob-geom-rotate3d(type="thi.ng.geom.types.Box")>>
  <<lob-geom-scale(type="thi.ng.geom.types.Box")>>
  <<lob-geom-translate(type="thi.ng.geom.types.Box")>>
  <<lob-geom-tx(type="thi.ng.geom.types.Box")>>
#+END_SRC

*** TODO PVolume                                                        :fix:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PVolume
  (volume [_] 0)
#+END_SRC

*** End of implementation                                          :noexport:
#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC

** Complete namespace definition                                   :noexport:
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/box.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.box
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :refer [vec3]]
     ;;[thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.common.data.core :as d]
     [thi.ng.common.error :as err]
     [thi.ng.common.math.core :as m :refer [*eps*]]
     ,#+clj [thi.ng.macromath.core :as mm])
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    ,#+clj
    (:import
     [thi.ng.geom.types AABB Box Sphere]))

  <<ctors>>

  <<helpers>>

  <<impl>>
#+END_SRC
