#+SETUPFILE: ../../src/setup.org

* thi.ng.geom.rect

** Constructor
*** TODO replace sequential? w/ coll?
#+BEGIN_SRC clojure :noweb-ref ctors
  (defn rect
    ([] (thi.ng.geom.types.Rect2. (vec2) (vec2 1.0)))
    ([w] (thi.ng.geom.types.Rect2. (vec2) (vec2 w)))
    ([p q]
       (if (sequential? p)
         (if (sequential? q)
           (let [p (vec2 p) q (vec2 q)
                 [p q] [(g/min p q) (g/max p q)]]
             (thi.ng.geom.types.Rect2. p (g/- q p)))
           (thi.ng.geom.types.Rect2. (vec2 p) (vec2 q)))
         (thi.ng.geom.types.Rect2. (vec2) (vec2 p q))))
    ([x y w]
       (if (number? x)
         (thi.ng.geom.types.Rect2. (vec2 x y) (vec2 w))
         (thi.ng.geom.types.Rect2. (vec2 x) (vec2 y w))))
    ([x y w h] (thi.ng.geom.types.Rect2. (vec2 x y) (vec2 w h))))
#+END_SRC
** Type specific functions
#+BEGIN_SRC clojure :noweb-ref helpers
  (defn union
    [{:keys[p w h]} {q :p qw :w qh :h}]
    (let [[x1 y1 :as p*] (g/min p q)
          x2 (max (+ (p 0) w) (+ (q 0) qw))
          y2 (max (+ (p 1) h) (+ (q 1) qh))
          w (- x2 x1)
          h (- y2 y1)]
      (thi.ng.geom.types.Rect2. p* w h)))
  
  ;; FIXME shouldn't it return vec2?
  (defn map-uv
    [{:keys[p w h]} [qx qy]]
    [(/ (- qx (p 0)) w) (/ (- qy (p 1)) h)])
  
  (defn unmap-uv
    [{:keys[p w h]} [qx qy]]
    [(mm/madd qx w (p 0)) (mm/madd qy h (p 1))])
  
  (defn left [r] ((:p r) 0))
  (defn right [r] (+ ((:p r) 0) (:w r)))
  (defn top [r] ((:p r) 1))
  (defn top-left [r] (:p r))
  (defn bottom [r] (+ ((:p r) 1) (:h r)))
  (defn bottom-right [r] (g/+ (:p r) [(:w r) (:h r)]))
  
  (defn intersect-rect?
    [{[px py] :p w :w h :h} {[qx qy] :p w2 :w h2 :h}]
    (not (or (> px (+ qx w2)) (> qx (+ px w)) (> py (+ qy h2)) (> qy (+ py h)))))
  
  (defn intersect-circle?
    [{w :w h :h :as r} {c :p radius :r}]
    (let [p (g/centroid r)
          [dx dy :as d] (g/abs (g/- c p))
          w (* w 0.5) h (* h 0.5)]
      (if (and (<= dx (+ w radius))
               (<= dy (+ h radius)))
        (if (or (<= dx w) (<= dy h))
          true
          (<= (g/mag-squared (g/- d [w h])) (* radius radius)))
        false)))
#+END_SRC
** Protocol implementations
#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.Rect2
#+END_SRC
*** PArea
#+BEGIN_SRC clojure :noweb-ref impl
  g/PArea
  (area [_] (* (:w _) (:h _)))
#+END_SRC
*** PBoundary
#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundary
  (contains-point?
   [{[px py] :p w :w h :h} [x y]]
   (and (m/in-range? 0.0 w (- x px)) (m/in-range? 0.0 h (- y py))))
#+END_SRC
*** PBounds
#+BEGIN_SRC clojure :noweb-ref impl
  g/PBounds
  (bounds[_] _)
  (width  [_] (:w _))
  (height [_] (:h _))
  (depth  [_] 0)
#+END_SRC
*** PBoundingCircle
#+BEGIN_SRC clojure :noweb-ref impl
  g/PBoundingCircle
  (bounding-circle
   [_]
   (let [c (g/centroid _)]
     (tu/bounding-circle c (g/dist c (:p _)))))
#+END_SRC
*** PCenter
#+BEGIN_SRC clojure :noweb-ref impl
  g/PCenter
  (center
   ([{w :w h :h}]
      (let [w2 (* w 0.5) h2 (* h 0.5)]
        (thi.ng.geom.types.Rect2. (vec2 (- w2) (- h2)) w h)))
   ([{w :w h :h} o]
      (let [t [(* w 0.5) (* h 0.5)]]
        (thi.ng.geom.types.Rect2. (g/- o t) w h))))
  (centroid [{p :p :as _}] (g/madd (vec2 (:w _) (:h _)) 0.5 p))
#+END_SRC
*** PCircumference
#+BEGIN_SRC clojure :noweb-ref impl
  g/PCircumference
  (circumference [_] (mm/addm (:w _) (:h _) 2.0))
#+END_SRC
*** PClassify
#+BEGIN_SRC clojure :noweb-ref impl
  g/PClassify
  (classify-point
   [_ q] (reduce min (map #(g/classify-point % q) (g/edges _))))
#+END_SRC
*** PExtrude                                                         :verify:

Extruding a rectangle along the Z-axis results in a 3D mesh
implementation. The =extrude= function supports the following
options, given as parameter map:

| Key       | Description                             | Default |
|-----------+-----------------------------------------+---------|
| =:depth=  | extrusion depth along positive Z        |     1.0 |
| =:scale=  | scale factor of rect at extrusion depth |     1.0 |
| =:offset= | extrusion vector (overrides :depth)     |     nil |

The process results in bevelled forms for =:scale= values other
than 1.0.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PExtrude
  (extrude
   [_ {:keys [depth scale offset] :or {depth 1.0 scale 1.0} :as opts}]
   (if (and (= scale 1.0) (nil? offset))
     (g/as-mesh
      (thi.ng.geom.types.AABB.
       (vec3 (:p _))
       (vec3 (:w _) (:h _) depth)))
     (g/extrude (g/as-polygon _) opts)))
  (extrude-shell
   [_ opts] (g/extrude-shell (g/as-polygon _) opts))
#+END_SRC
*** PGraph
#+BEGIN_SRC clojure :noweb-ref impl
  g/PVertexAccess
  (vertices
   [{[x y :as p] :p w :w h :h}]
   (let [r (+ x w) b (+ y h)] [p (vec2 x b) (vec2 r b) (vec2 r y)]))
  g/PEdgeAccess
  (edges
   [{[x y :as p] :p w :w h :h}]
   (let [r (+ x w) b (+ y h)]
     [[p (vec2 r y)]
      [(vec2 r y) (vec2 r b)]
      [(vec2 r b) (vec2 x b)]
      [(vec2 x b) p]]))
  g/PGraph
  (vertex-neighbors
   [_ v] (d/neighbors (vec2 v) (g/vertices _)))
  (vertex-valence
   [_ v] (if ((set (g/vertices _)) (vec2 v)) 2 0))
#+END_SRC
*** TODO PIntersect
#+BEGIN_SRC clojure :noweb-ref impl
  g/PIntersect
  (intersect-line
   [_ l])
  (intersect-ray
   [_ r])
  (intersect-shape
   [_ s]
   (cond
    (instance? thi.ng.geom.types.Rect2 s) (intersect-rect? _ s)
    (instance? thi.ng.geom.types.Circle s) (intersect-circle? _ s)
    :default (err/type-error! "Rect2" s)))
#+END_SRC
*** PMeshConvert                                                     :verify:
#+BEGIN_SRC clojure :noweb-ref impl
  g/PMeshConvert
  (as-mesh
   [_] (g/add-face (gm/gmesh) (mapv vec3 (g/vertices _))))
#+END_SRC
*** PPolygonConvert
#+BEGIN_SRC clojure :noweb-ref impl
  g/PPolygonConvert
  (as-polygon
   [_] (thi.ng.geom.types.Polygon. (g/vertices _)))
#+END_SRC
*** PProximity
#+BEGIN_SRC clojure :noweb-ref impl
  g/PProximity
  (closest-point
   [_ p] (gu/closest-point-on-segments p (g/edges _)))
#+END_SRC
*** PSample
#+BEGIN_SRC clojure :noweb-ref impl
  g/PSample
  (point-at
   [_ t] (gu/point-at t (conj (g/vertices _) (:p _))))
  (random-point
   [_] (g/point-at _ (m/random)))
  (random-point-inside
   [_] (g/+ (:p _) (m/random (:w _)) (m/random (:h _))))
  (sample-uniform
   [_ udist include-last?]
   (gu/sample-uniform udist include-last? (conj (g/vertices _) (:p _))))
#+END_SRC
*** PSubdivide

A rectangle can be subdivided into smaller ones, i.e. to create a
list of uniform grid cells. The following options can be given as
a 2nd argument map:

| Key     | Description                                                    | Default |
|---------+----------------------------------------------------------------+---------|
| =:num=  | number of cols/rows the rect will be uniformly subdivided into |       2 |
| =:cols= | number of times the rect will be subdivided along the X-axis   |       2 |
| =:rows= | number of times the rect will be subdivided along the Y-axis   |       2 |

When =:num= is given, the resulting rects will retain the aspect
ratio of the original rect. If specified, =:cols= and =:rows= will
take precedence over =:num=, but the latter will be used as
default for missing args. Rects are returned as a lazyseq with
top-left to bottom-right ordering and inner sorting along X.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PSubdivide
  (subdivide
   ([_] (g/subdivide _ {}))
   ([_ {:keys [num cols rows] :or {num 2}}]
      (let [dx (/ 1.0 (or cols num))
            dy (/ 1.0 (or rows num))
            rx (range 0.0 1.0 dx)
            ry (range 0.0 1.0 dy)
            w (* (:w _) dx)
            h (* (:h _) dy)]
        (for [y ry x rx
              :let [[px py] (unmap-uv _ [x y])
                    px (m/roundto px *eps*)
                    py (m/roundto py *eps*)]]
          (thi.ng.geom.types.Rect2. (vec2 px py) w h)))))
#+END_SRC
*** PTessellate

A rectangle can be tessellated into a number of triangles. When
called without options map as 2nd argument, the rect will be split
into 2 triangles, each in anti-clockwise orientation: =[tl br tr]=
& =[tl bl br]=. When called *with* options, then these are used
for a call to [[PSubdivide][=subdivide=]] first and the function returns a lazyseq
of triangles of the subdivided rects.

#+BEGIN_SRC clojure :noweb-ref impl
  g/PTessellate
  (tessellate
   ([_]
      (let [[a b c d] (g/vertices _)]
        [(thi.ng.geom.types.Triangle2. a b c) (thi.ng.geom.types.Triangle2. a c d)]))
   ([_ opts]
      (mapcat g/tessellate (g/subdivide _ opts))))
#+END_SRC
*** TODO PTransform
#+BEGIN_SRC clojure :noweb-ref impl
  g/PRotate
  (rotate
   [_ m] (g/rotate (g/as-polygon _) m))
  
  g/PScale
  (scale
   ([_ s]
      (if (number? s)
        (thi.ng.geom.types.Rect2.
         (g/* (:p _) s) (* (:w _) s) (* (:h _) s))
        (thi.ng.geom.types.Rect2.
         (g/* (:p _) s) (* (:w _) (nth s 0 0)) (* (:h _) (nth s 1 0)))))
   ([_ a b]
      (if (number? a)
        (thi.ng.geom.types.Rect2.
         (g/* (:p _) a b) (* (:w _) a) (* (:h _) b))
        (thi.ng.geom.types.Rect2.
         (g/* (:p _) a b)
         (* (:w _) (nth a 0 0) (nth b 0 0))
         (* (:h _) (nth a 1 0) (nth b 1 0))))))
  (scale-size
   [{w :w h :h :as _} s]
   (let [[w2 h2] (if (number? s)
                   [(* w s) (* h s)]
                   [(* w (nth s 0 0)) (* h (nth s 1 0))])]
     (thi.ng.geom.types.Rect2.
      (g/madd (vec2 w2 h2) -0.5 (g/centroid _)) w2 h2)))
  
  g/PTranslate
  (translate
   [_ t] (thi.ng.geom.types.Rect2. (g/+ (:p _) t) (:width _) (:height _)))
  
  g/PTransform
  (transform
   [_ m] (g/transform (g/as-polygon _) m))
#+END_SRC
*** PVolume                                                     :usetemplate:
#+BEGIN_SRC clojure :noweb-ref impl :noweb yes
  <<lob-geom-zerovol>>
#+END_SRC

*** End of implementations                                         :noexport:
#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/rect.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.rect
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.vector :as v :refer [vec2 vec3]]
     [thi.ng.geom.gmesh :as gm]
     [thi.ng.geom.line :as l]
     [thi.ng.geom.types :as types]
     [thi.ng.common.data.core :as d]
     [thi.ng.common.error :as err]
     [thi.ng.common.math.core :as m :refer [*eps*]]
     ,#+clj [thi.ng.macromath.core :as mm])
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    ,#+clj
    (:import
     [thi.ng.geom.types Circle2 Line2 Polygon2 Rect2]))

  <<ctors>>

  <<helpers>>

  <<impl>>
#+END_SRC
