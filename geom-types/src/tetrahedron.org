#+SETUPFILE: ../../src/setup.org

* Contents                                                         :toc_4_gh:
 - [[#thinggeomtetrahedron][thi.ng.geom.tetrahedron]]
     - [[#typespecific-functions][Typespecific functions]]
     - [[#constructors][Constructors]]
     - [[#protocol-implementations][Protocol implementations]]
             - [[#iarea][IArea]]
             - [[#todo-iboundary][TODO IBoundary]]
             - [[#ibounds][IBounds]]
             - [[#iboundingsphere][IBoundingSphere]]
             - [[#icenter][ICenter]]
             - [[#iflip][IFlip]]
             - [[#igraph][IGraph]]
             - [[#todo-iintersect][TODO IIntersect]]
             - [[#imeshconvert][IMeshConvert]]
             - [[#todo-isample][TODO ISample]]
             - [[#todo-islice][TODO ISlice]]
             - [[#isubdivide][ISubdivide]]
             - [[#itessellate][ITessellate]]
             - [[#itransform][ITransform]]
             - [[#ivolume][IVolume]]
             - [[#end-of-implementations][End of implementations]]
     - [[#namespace-declaration][Namespace declaration]]

* thi.ng.geom.tetrahedron

** Typespecific functions
#+BEGIN_SRC clojure :noweb-ref helpers
  (defn orient-tetra
    "Takes a seq of 4 3D points, returns them as vector in the order so
    that the last point is on the opposite side of the plane defined by
    the first three points."
    [[a b c d :as t]]
    (let [dp (-> d (m/- a) (m/normalize) (m/dot (gu/ortho-normal a b c)))]
      (if (neg? dp) [a b c d] [a c b d])))
#+END_SRC

** Constructors
#+BEGIN_SRC clojure :noweb-ref ctors
  (defn tetrahedron
    ([points]
       (thi.ng.geom.types.Tetrahedron.
        (orient-tetra (mapv vec3 points))))
    ([a b c d] (tetrahedron [a b c d])))
#+END_SRC

** Protocol implementations
#+BEGIN_SRC clojure :noweb-ref impl
  (extend-type thi.ng.geom.types.Tetrahedron
#+END_SRC
**** IArea
#+BEGIN_SRC clojure :noweb-ref impl
  g/IArea
  (area
   [_] (transduce (map #(m/abs* (apply gu/tri-area3 %))) + (g/faces _)))
#+END_SRC
**** TODO IBoundary

- use classify-point on all faces to check for containment (must be
  neg for all)

#+BEGIN_SRC clojure :noweb-ref impl
  g/IClassify
  (classify-point [_ p] nil) ; TODO
  g/IProximity
  (closest-point [_ p] nil) ; TODO
  g/IBoundary
  (contains-point? [_ p] nil) ; TODO
#+END_SRC
**** IBounds
#+BEGIN_SRC clojure :noweb-ref impl
  g/IBounds
  (bounds [_] (tu/bounding-box (g/vertices _)))
  (width [_] (gu/axis-range 0 (g/vertices _)))
  (height [_] (gu/axis-range 1 (g/vertices _)))
  (depth [_] (gu/axis-range 2 (g/vertices _)))
#+END_SRC
**** IBoundingSphere
#+BEGIN_SRC clojure :noweb-ref impl
  g/IBoundingSphere
  (bounding-sphere
   [_] (tu/bounding-sphere (g/centroid _) (g/vertices _)))
#+END_SRC
**** ICenter
#+BEGIN_SRC clojure :noweb-ref impl
  g/ICenter
  (center
   ([_] (thi.ng.geom.types.Tetrahedron. (gu/center v/V3 (:points _))))
   ([_ o] (thi.ng.geom.types.Tetrahedron. (gu/center o (:points _)))))
  (centroid [_] (gu/centroid (:points _)))
#+END_SRC
**** IFlip
#+BEGIN_SRC clojure :noweb-ref impl
  g/IFlip
  (flip
   [{[a b c d] :points}] (thi.ng.geom.types.Tetrahedron. [b a c d]))
#+END_SRC
**** IGraph
#+BEGIN_SRC clojure :noweb-ref impl
  g/IVertexAccess
  (vertices
   [_] (:points _))
  g/IEdgeAccess
  (edges
   [{[a b c d] :points}]
   [[a b] [b c] [c a] [a d] [b d] [c d]])
  g/IFaceAccess
  (faces
   [{[a b c d] :points}]
   [[a b c] [a d b] [b d c] [c d a]])
  g/IGraph
  (vertex-neighbors
   [{[a b c d] :points} v]
   (condp = v
     a [c b d]
     b [a c d]
     c [b a d]
     d [a b c]
     nil))
  (vertex-valence
   [_ v] (if ((set (:points _)) v) 3 0))
#+END_SRC
**** TODO IIntersect                                                 :verify:
#+BEGIN_SRC clojure :noweb-ref impl
  g/IIntersect
  (intersect-shape
   [_ s]
   (cond
    (instance? thi.ng.geom.types.Tetrahedron s)
    (isec/intersect-tetrahedra?
     (orient-tetra (g/vertices _)) (orient-tetra (g/vertices s)))
    (and (sequential? s) (= 4 (count s)))
    (isec/intersect-tetrahedra? (g/vertices _) (orient-tetra s))
    :default (err/type-error! "Tetrahedron" s)))
  (intersect-line
   [_ l] nil)
  (intersect-ray
   [_ {p :p dir :dir}] nil)
#+END_SRC
**** IMeshConvert
#+BEGIN_SRC clojure :noweb-ref impl
  g/IMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([_ opts]
      (let [[a b c d] (orient-tetra (:points _))]
        (g/into (or (:mesh opts) (bm/basic-mesh)) (g/faces _)))))
#+END_SRC
**** TODO ISample                                                    :verify:
#+BEGIN_SRC clojure :noweb-ref impl
  g/ISample
  (point-at [_ t] nil) ; TODO
  (random-point
   [_] (g/point-at _ (m/random)))
  (random-point-inside
   [_] (gu/from-barycentric (g/vertices _) (m/normdist-weights 4)))
#+END_SRC
**** TODO ISlice
#+BEGIN_SRC clojure :noweb-ref impl
  g/ISlice
  (slice-with
   ([_ e] nil)
   ([_ e classifier] nil))
#+END_SRC
**** ISubdivide
#+BEGIN_SRC clojure :noweb-ref impl
  g/ISubdivide
  (subdivide
   [_]
   (let [cp (gu/centroid (:points _))]
     (map #(tetrahedron (conj % cp)) (g/faces _))))
#+END_SRC
**** ITessellate
#+BEGIN_SRC clojure :noweb-ref impl
  g/ITessellate
  (tessellate
   [_] (g/faces _))
#+END_SRC
**** ITransform
#+BEGIN_SRC clojure :noweb-ref impl
  g/IRotate
  (rotate [_ theta] (g/rotate-z _ theta))
  g/IRotate3D
  (rotate-x
   [_ theta]
   (thi.ng.geom.types.Tetrahedron. (mapv #(g/rotate-x % theta) (:points _))))
  (rotate-y
   [_ theta]
   (thi.ng.geom.types.Tetrahedron. (mapv #(g/rotate-y % theta) (:points _))))
  (rotate-z
   [_ theta]
   (thi.ng.geom.types.Tetrahedron. (mapv #(g/rotate-z % theta) (:points _))))
  (rotate-around-axis
   [_ axis theta]
   (thi.ng.geom.types.Tetrahedron.
    (mapv #(g/rotate-around-axis % axis theta) (:points _))))
  g/IScale
  (scale
   ([_ s]
      (thi.ng.geom.types.Tetrahedron. (mapv #(m/* % s) (:points _))))
   ([_ sx sy]
      (thi.ng.geom.types.Tetrahedron. (mapv #(m/* % sx sy) (:points _))))
   ([_ sx sy sz]
      (thi.ng.geom.types.Tetrahedron. (mapv #(m/* % sx sy sz) (:points _)))))
  (scale-size
   [_ s] (thi.ng.geom.types.Tetrahedron. (gu/scale-size s (:points _))))
  g/ITranslate
  (translate
   [_ t]
   (thi.ng.geom.types.Tetrahedron. (mapv #(m/+ % t) (:points _))))
  g/ITransform
  (transform
   [_ m]
   (thi.ng.geom.types.Tetrahedron. (mapv #(g/transform-vector m %) (:points _))))
#+END_SRC
**** IVolume                                                         :verify:
#+BEGIN_SRC clojure :noweb-ref impl
  g/IVolume
  (volume [{[a b c d] :points}]
    (/ (m/dot (m/- a d) (gu/ortho-normal d b c)) 6.0))
#+END_SRC
**** End of implementations                                        :noexport:
#+BEGIN_SRC clojure :noweb-ref impl
  )
#+END_SRC
** Namespace declaration
#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/geom/tetrahedron.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.tetrahedron
    #?(:cljs (:require-macros [thi.ng.math.macros :as mm]))
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.utils :as gu]
     [thi.ng.geom.core.intersect :as isec]
     [thi.ng.geom.core.vector :as v :refer [vec3]]
     [thi.ng.geom.triangle :as t]
     [thi.ng.geom.basicmesh :as bm]
     [thi.ng.geom.types]
     [thi.ng.geom.types.utils :as tu]
     [thi.ng.dstruct.core :as d]
     [thi.ng.xerror.core :as err]
     [thi.ng.math.core :as m :refer [PI HALF_PI THIRD SQRT3 *eps*]]
     #?(:clj [thi.ng.math.macros :as mm])))

  <<helpers>>

  <<ctors>>

  <<impl>>
#+END_SRC
