#+SETUPFILE: ../../src/setup.org

* thi.ng.geom.types.utils.ptf

** Parallel Transport Frames

- http://en.wikipedia.org/wiki/Parallel_transport
- http://www.cs.indiana.edu/pub/techreports/TR425.pdf

#+BEGIN_SRC clojure :noweb-ref ptf
  (defn compute-tangents
    [points]
    (let [t (mapv (fn [[p q]] (g/normalize (g/- q p))) (d/successive-nth 2 points))]
      (conj t (peek t))))

  (defn compute-frame
    [tangents norms bnorms i]
    (let [ii (dec i)
          p  (tangents ii)
          q  (tangents i)
          a  (g/cross p q)
          n  (if (not (m/delta= 0.0 (g/mag-squared a)))
               (let [theta (Math/acos (m/clamp-normalized (g/dot p q)))]
                 (g/transform-vector (g/rotate-around-axis M44 (g/normalize a) theta) (norms ii)))
               (norms ii))]
      [n (g/cross q n)]))

  (defn compute-first-frame
    [t]
    (let [t' (g/abs t)
          i  (if (< (t' 0) (t' 1)) 0 1)
          i  (if (< (t' 2) (t' i)) 2 i)
          v  (g/normalize (g/cross t (assoc V3 i 1.0)))
          n  (g/cross t v)]
      [n (g/cross t n)]))

  (defn compute-frames
    [points]
    (let [tangents (compute-tangents points)
          [n b]    (compute-first-frame (first tangents))
          num      (count tangents)]
      (loop [norms [n], bnorms [b], i 1]
        (if (< i num)
          (let [[n b] (compute-frame tangents norms bnorms i)]
            (recur (conj norms n) (conj bnorms b) (inc i)))
          [points tangents norms bnorms]))))

  (defn align-frames
    [[points tangents norms bnorms]]
    (let [num   (count tangents)
          a     (first norms)
          b     (peek norms)
          theta (-> (g/dot a b) (m/clamp-normalized) (Math/acos) (/ (dec num)))
          theta (if (> (g/dot (first tangents) (g/cross a b)) 0.0) (- theta) theta)]
      (loop [norms norms, bnorms bnorms, i 1]
        (if (< i num)
          (let [t (tangents i)
                n (-> M44
                      (g/rotate-around-axis t (* theta i))
                      (g/transform-vector (norms i)))
                b (g/cross t n)]
            (recur (assoc norms i n) (assoc bnorms i b) (inc i)))
          [points tangents norms bnorms]))))

  (defn sweep-profile
    [profile [points _ norms bnorms]]
    (let [frames (map vector points norms bnorms)
          txp (fn [p n b [qx qy]]
                (vec3
                 (mm/madd qx (n 0) qy (b 0) (p 0))
                 (mm/madd qx (n 1) qy (b 1) (p 1))
                 (mm/madd qx (n 2) qy (b 2) (p 2))))
          tx  (fn [[p n b]] (mapv #(txp p n b %) profile))]
      (->> (next frames)
           (reduce
            (fn [[faces prev] frame]
              (let [curr (tx frame)
                    faces (->> (mapcat
                                (fn [[a b] [c d]] [[a b d c]])
                                (d/successive-nth 2 (conj prev (first prev)))
                                (d/successive-nth 2 (conj curr (first curr))))
                               (concat faces))]
                [faces curr]))
            [nil (tx (first frames))])
           (first))))

  (defn sweep-mesh
    [points profile & {:keys [mesh align?]}]
    (let [frames (compute-frames points)
          frames (if align? (align-frames frames) frames)]
      (->> frames
           (sweep-profile profile)
           (g/into (or mesh (bm/basic-mesh))))))
#+END_SRC

** Luxor knot example

This brief example demonstrates usage of the =sweep-mesh= function in
combination with [[http://thi.ng/luxor][thi.ng/luxor's]] test scene setup. It computes a
[[https://en.wikipedia.org/wiki/Torus_knot][Cinquefoil knot]] (a (5,2)-torus knot) and sweeps a circle along the
path using PTF. The example is tangled into the =/babel/examples=
directory, but will only work in a REPL which has both the =geom= and
=luxor= libs on its classpath.

[[../../assets/ptf-knot.jpg]]

#+BEGIN_SRC clojure :tangle ../babel/examples/ptf-knot.clj :mkdirp yes :padline no
  (require '[thi.ng.geom.core :as g])
  (require '[thi.ng.geom.core.vector :refer [vec3]])
  (require '[thi.ng.geom.aabb :as a])
  (require '[thi.ng.geom.circle :as c])
  (require '[thi.ng.geom.types.utils.ptf :as ptf])
  (require '[thi.ng.common.math.core :as m])
  (require '[thi.ng.luxor.scenes :as scene])
  (require '[thi.ng.luxor.io :as lio])

  (defn cinquefoil
    [t]
    (let [t  (* t m/TWO_PI)
          pt (* 2.0 t)
          qt (* 5.0 t)
          qc (+ 3.0 (Math/cos qt))]
      (vec3 (* qc (Math/cos pt)) (* qc (Math/sin pt)) (Math/sin qt))))

  (-> (scene/base-scene {:width 640 :height 360})
      (scene/scene-add-main-mesh
       (ptf/sweep-mesh
        (map cinquefoil (m/norm-range 400))
        (g/vertices (c/circle 0.5) 20)
        :align? true)
       {:bounds (a/aabb 1.5) :target [0 0.5 -2] :rx (* m/PI -0.333)})
      (lio/serialize-scene "ptf-knot" false)
      (lio/export-scene)
      (dorun))
#+END_SRC

** Namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/geom/types/utils/ptf.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.geom.types.utils.ptf
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    (:require
     [thi.ng.geom.core :as g]
     [thi.ng.geom.core.vector :refer [vec2 vec3 V3]]
     [thi.ng.geom.core.matrix :refer [matrix44 M44]]
     [thi.ng.geom.basicmesh :as bm]
     [thi.ng.common.data.core :as d]
     [thi.ng.common.math.core :as m :refer [*eps*]]
     ,#+clj [thi.ng.macromath.core :as mm]))

  <<ptf>>
#+END_SRC

