#+SETUPFILE: setup.org

* thi.ng.geom.plane
** Namespace declaration
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx :mkdirp yes :padline no
  (ns thi.ng.geom.plane
    ,#+cljs (:require-macros [thi.ng.macromath.core :as mm])
    (:require
     ,#+clj [thi.ng.macromath.core :as mm]
     [thi.ng.common.math.core :as m :refer [*eps*]]
     [thi.ng.common.error :as err]
     [thi.ng.geom.core :as g :refer [vec3]]
     [thi.ng.geom.gmesh :as gm])
    ,#+clj
    (:import
     [thi.ng.geom.types Plane]))
#+END_SRC
** Constructor
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  (defn plane
    [n w] (thi.ng.geom.types.Plane. (g/normalize (vec3 n)) w))
  
  (defn plane-with-p
    [p n]
    (let [n (g/normalize (vec3 n))]
      (thi.ng.geom.types.Plane. n (g/dot n p))))
  
  (defn plane-from-points
    ([[a b c]] (plane-from-points a b c))
    ([a b c]
       (let [n (g/normal3* a b c)]
         (thi.ng.geom.types.Plane. n (g/dot n a)))))
#+END_SRC
** Helper functions
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  (defn intersect-plane
    [an aw bn bw]
    (when-not (or (m/delta= aw bw *eps*) (m/delta= an bn *eps*))
      (let [od (g/dot an bn)
            det (/ (mm/madd od od -1))
            u (* (mm/madd bw od (- aw)) det)
            v (* (mm/madd aw od (- bw)) det)]
        {:p (g/madd an u (g/* bn v)) :dir (g/normalize (g/cross an bn))})))
#+END_SRC
** TODO Protocol implementation
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  (extend-type thi.ng.geom.types.Plane
#+END_SRC
*** PClassify
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  g/PClassify
  (classify-point
    [_ p]
    (-> (:n _) (g/dot p) (- (:w _)) (m/signum *eps*)))
#+END_SRC
*** PFlip
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  g/PFlip
  (flip
    [_] (thi.ng.geom.types.Plane. (g/- (:n _)) (- (:w _))))
#+END_SRC
*** PIntersect
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  g/PIntersect
  (intersect-line
   ([_ line] (g/intersect-ray _ (:p line) (g/- (:q line) (:p line))))
   ([_ p q] (g/intersect-ray _ p (g/- q p))))
  (intersect-ray
   ([_ ray] (g/intersect-ray _ (:p ray) (:dir ray)))
   ([_ p dir]
      (let [dp (g/dot (:n _) dir)
            dn (- (g/dot (:n _) p) (:w _))]
        (if (m/delta= 0.0 dp *eps*)
          {:type (if (zero? dn) :on-plane :parallel)}
          (let [du (- (/ dn dp))
                i (g/madd dir du p)]
            (if (m/in-range? 0.0 1.0 du)
              {:type :intersect :p i}
              {:type :intersect-outside :p i}))))))
  (intersect-shape
   [_ s]
   (cond
    (instance? thi.ng.geom.types.Plane s) (intersect-plane (:n _) (:w _) (:n s) (:w s))
    :default (err/illegal-arg! s)))
#+END_SRC
*** PMeshConvert
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  g/PMeshConvert
  (as-mesh
   ([_] (g/as-mesh _ {}))
   ([_ {:keys [p width height size] :or {size 1.0}}]
      (let [w (* (or width size) 0.5)
            h (* (or height size) 0.5)
            flip? (m/delta= -1.0 (g/dot (:n _) g/V3Z))
            p (g/closest-point _ (or p (g/vec3)))
            q (if flip?
                (g/quat 0 0 0 1)
                (g/alignment-quat g/V3Z (:n _)))
            [a b c d] (map #(g/+ p (g/transform-vector q %))
                           [(vec3 (- w) (- h) 0) (vec3 (- w) h 0)
                            (vec3 w h 0) (vec3 w (- h) 0)])]
        (gm/add-face (gm/gmesh) (if flip? [a b c d] [d c b a])))))
#+END_SRC
*** PProximity
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  g/PProximity
  (closest-point
    [_ p]
    (->> p
         (g/dot (:n _))
         (+ (- (:w _)))
         (g/normalize (:n _))
         (g/- p)))
#+END_SRC
*** End implementation                                             :noexport:
#+BEGIN_SRC clojure :tangle babel/src/cljx/thi/ng/geom/plane.cljx
  )
#+END_SRC
